[
  {
    "name": "b_KcskEjoJGk8",
    "type": "registry:block",
    "dependencies": [
      "uuid",
      "recharts",
      "swr",
      "axios",
      "framer-motion",
      "@vercel/blob",
      "@supabase/supabase-js",
      "@supabase/ssr",
      "tailwindcss",
      "tw-animate-css",
      "react-chartjs-2",
      "chart.js",
      "react-leaflet",
      "leaflet",
      "next-themes",
      "@radix-ui/react-avatar",
      "@radix-ui/react-slot",
      "@radix-ui/react-checkbox",
      "@radix-ui/react-dialog",
      "@radix-ui/react-dropdown-menu",
      "@radix-ui/react-label",
      "@radix-ui/react-scroll-area",
      "@radix-ui/react-select",
      "@radix-ui/react-separator",
      "@radix-ui/react-switch",
      "node:fs",
      "node:path"
    ],
    "devDependencies": [],
    "registryDependencies": [
      "button",
      "input",
      "badge",
      "select",
      "card",
      "dialog",
      "label",
      "textarea",
      "avatar",
      "scroll-area",
      "skeleton",
      "dropdown-menu",
      "checkbox",
      "switch",
      "separator"
    ],
    "files": [
      {
        "path": ".gitignore",
        "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.pnpm-debug.log*\n\n# env files\n.env*\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n",
        "type": "registry:block",
        "target": "~/.gitignore"
      },
      {
        "path": "CONFIGURACION.md",
        "content": "# Configuraci├│n del Dashboard de Ventas\n\n## Paso 1: Configurar Variables de Entorno\n\n1. Copia el archivo `.env.local.example` a `.env.local`:\n   \\`\\`\\`bash\n   cp .env.local.example .env.local\n   \\`\\`\\`\n\n2. Ve a tu proyecto en [Supabase Dashboard](https://supabase.com/dashboard)\n\n3. En tu proyecto, ve a **Settings** ÔåÆ **API**\n\n4. Copia los siguientes valores a tu archivo `.env.local`:\n   - **URL**: Copia el valor de \"Project URL\" ÔåÆ `NEXT_PUBLIC_SUPABASE_URL`\n   - **anon key**: Copia el valor de \"anon public\" ÔåÆ `NEXT_PUBLIC_SUPABASE_ANON_KEY`\n\n## Paso 2: Crear las Tablas en Supabase\n\n1. En el dashboard de v0, ve a la secci├│n **Scripts** en el panel izquierdo\n\n2. Ejecuta el script `001_create_sales_tables.sql` haciendo clic en el bot├│n de ejecutar\n\n3. Esto crear├í las tablas necesarias:\n   - `sales` - Tabla principal de ventas\n   - `return_tracking` - Tabla para tracking de devoluciones\n\n## Paso 3: Reiniciar el Servidor\n\nDespu├®s de configurar las variables de entorno, reinicia tu servidor de desarrollo para que los cambios surtan efecto.\n\n## Verificaci├│n\n\nUna vez configurado correctamente, deber├¡as ver:\n- Las tarjetas de estad├¡sticas con valores num├®ricos (no \"NaN\")\n- La tabla de ventas cargando correctamente\n- Sin errores de conexi├│n en la consola\n\n## Soluci├│n de Problemas\n\n### Error \"Server Error - fetch to supabase.co failed\"\n\n**Causa**: Variables de entorno no configuradas o incorrectas\n\n**Soluci├│n**:\n1. Verifica que el archivo `.env.local` existe en la ra├¡z del proyecto\n2. Confirma que las variables tienen los valores correctos de tu proyecto Supabase\n3. Reinicia el servidor de desarrollo\n\n### Error \"NaN\" en las estad├¡sticas\n\n**Causa**: La base de datos no tiene tablas o no hay datos\n\n**Soluci├│n**:\n1. Ejecuta el script SQL `001_create_sales_tables.sql`\n2. Verifica que las tablas se crearon correctamente en Supabase\n3. Opcionalmente, agrega datos de prueba\n\n### La base de datos no responde (Error 521)\n\n**Causa**: El proyecto de Supabase est├í pausado o tiene problemas\n\n**Soluci├│n**:\n1. Ve a tu dashboard de Supabase\n2. Verifica que el proyecto est├® activo (no pausado)\n3. Si est├í pausado, react├¡valo\n4. Los proyectos gratuitos se pausan despu├®s de 1 semana de inactividad\n",
        "type": "registry:block",
        "target": "~/CONFIGURACION.md"
      },
      {
        "path": "INSTRUCCIONES_SETUP.md",
        "content": "# Configuraci├│n del Dashboard de Ventas\n\n## Problema Actual\n\nLa aplicaci├│n muestra el error: **\"Could not find the table 'public.sales' in the schema cache\"**\n\nEsto significa que las tablas de la base de datos no han sido creadas todav├¡a.\n\n## Soluci├│n: Crear las Tablas en Supabase\n\n### Opci├│n 1: Usando el SQL Editor de Supabase (Recomendado)\n\n1. **Abre tu proyecto en Supabase Dashboard**\n   - Ve a [https://supabase.com/dashboard](https://supabase.com/dashboard)\n   - Selecciona tu proyecto\n\n2. **Abre el SQL Editor**\n   - En el men├║ lateral, haz clic en \"SQL Editor\"\n   - Haz clic en \"New query\"\n\n3. **Copia y pega el script SQL**\n   - Abre el archivo `scripts/001_create_sales_tables.sql` en este proyecto\n   - Copia todo su contenido\n   - P├®galo en el editor SQL de Supabase\n\n4. **Ejecuta el script**\n   - Haz clic en el bot├│n \"Run\" o presiona `Ctrl+Enter` (Windows/Linux) o `Cmd+Enter` (Mac)\n   - Deber├¡as ver un mensaje de ├®xito\n\n5. **Verifica las tablas**\n   - Ve a \"Table Editor\" en el men├║ lateral\n   - Deber├¡as ver las tablas `sales` y `return_tracking`\n\n6. **Recarga la aplicaci├│n**\n   - Vuelve a v0 y recarga la p├ígina de ventas\n   - Los errores deber├¡an desaparecer\n\n### Opci├│n 2: Usando Supabase CLI (Avanzado)\n\nSi tienes Supabase CLI instalado:\n\n\\`\\`\\`bash\nsupabase db execute --file scripts/001_create_sales_tables.sql\n\\`\\`\\`\n\n## Verificar Variables de Entorno\n\nAseg├║rate de que las siguientes variables est├®n configuradas en la secci├│n **Vars** del sidebar:\n\n- `NEXT_PUBLIC_SUPABASE_URL` - URL de tu proyecto Supabase\n- `NEXT_PUBLIC_SUPABASE_ANON_KEY` - Clave an├│nima de Supabase\n- `SUPABASE_SERVICE_ROLE_KEY` - Clave de servicio (para operaciones del servidor)\n\nEstas variables deber├¡an estar configuradas autom├íticamente si conectaste Supabase desde v0.\n\n## Estructura de las Tablas\n\n### Tabla `sales`\nAlmacena todas las ventas con informaci├│n de:\n- Cliente (nombre, tel├®fono, email)\n- Productos (JSONB)\n- Pago (m├®todo, total)\n- Env├¡o (transportadora, gu├¡a, c├│digo MiPaquete)\n- Estado y devoluciones\n\n### Tabla `return_tracking`\nRastrea el estado de las devoluciones usando c├│digos de MiPaquete.\n\n## Pr├│ximos Pasos\n\nUna vez creadas las tablas:\n\n1. La p├ígina de ventas cargar├í correctamente\n2. Podr├ís agregar ventas manualmente o importarlas\n3. Las estad├¡sticas se calcular├ín autom├íticamente\n4. Podr├ís filtrar y exportar datos\n\n## ┬┐Necesitas Ayuda?\n\nSi sigues teniendo problemas:\n- Verifica que las variables de entorno est├®n correctas\n- Revisa los logs de Supabase para errores espec├¡ficos\n- Aseg├║rate de que tu plan de Supabase permita crear tablas\n\\`\\`\\`\n\n\\`\\`\\`typescriptreact file=\"\" isHidden\n",
        "type": "registry:block",
        "target": "~/INSTRUCCIONES_SETUP.md"
      },
      {
        "path": "README.md",
        "content": "# NUEVOCURSORwithvercelfix\n\n*Automatically synced with your [v0.app](https://v0.app) deployments*\n\n[![Deployed on Vercel](https://img.shields.io/badge/Deployed%20on-Vercel-black?style=for-the-badge&logo=vercel)](https://vercel.com/galleaprobaciones-9369s-projects/v0-nuevocursor-withvercelfix)\n[![Built with v0](https://img.shields.io/badge/Built%20with-v0.app-black?style=for-the-badge)](https://v0.app/chat/projects/LzSEWdQWWwv)\n\n## Overview\n\nThis repository will stay in sync with your deployed chats on [v0.app](https://v0.app).\nAny changes you make to your deployed app will be automatically pushed to this repository from [v0.app](https://v0.app).\n\n## Deployment\n\nYour project is live at:\n\n**[https://vercel.com/galleaprobaciones-9369s-projects/v0-nuevocursor-withvercelfix](https://vercel.com/galleaprobaciones-9369s-projects/v0-nuevocursor-withvercelfix)**\n\n## Build your app\n\nContinue building your app on:\n\n**[https://v0.app/chat/projects/LzSEWdQWWwv](https://v0.app/chat/projects/LzSEWdQWWwv)**\n\n## How It Works\n\n1. Create and modify your project using [v0.app](https://v0.app)\n2. Deploy your chats from the v0 interface\n3. Changes are automatically pushed to this repository\n4. Vercel deploys the latest version from this repository\n",
        "type": "registry:block",
        "target": "~/README.md"
      },
      {
        "path": "README_fix_vercel.md",
        "content": "# Vercel Route Collision Fix (Bundle)\n\nEste paquete incluye:\n- `package.json` con `\"postinstall\": \"node scripts/next-fix-route-collisions.mjs\"`\n- `scripts/next-fix-route-collisions.mjs` que corrige colisiones de rutas en Next.js sin borrar nada.\n\n## Uso\n1. Copia el contenido de esta carpeta **en la ra├¡z de tu proyecto** (donde est├í tu `package.json`).\n2. Si ya ten├¡as un `package.json`, fusiona el bloque `\"scripts\"` agregando el `postinstall`.\n3. Despliega en Vercel como siempre.\n\nEl script:\n- Busca `app/**/page.*` (ts, tsx, js, jsx)\n- Calcula la ruta normalizada (ignora segmentos como `(dashboard)`).\n- Si hay duplicados para el mismo path, renombra los `page.*` que chocan a `page.shadow.*`.\n- Nunca elimina archivos y es reversible.\n",
        "type": "registry:block",
        "target": "~/README_fix_vercel.md"
      },
      {
        "path": "adapters/inventory.ts",
        "content": "\"use client\"\nimport { v4 as uuid } from \"uuid\"\nimport type { InventorySnapshot, Movement, Product, Warehouse, CostMethod } from \"@/lib/inventory-types\"\n\nconst KEY = \"lux-inventory-v1\"\n\nconst defaultWarehouses: Warehouse[] = [\n  { id: \"W1\", name: \"Principal\" },\n  { id: \"W2\", name: \"Secundaria\" },\n]\n\nconst seed: InventorySnapshot = {\n  warehouses: defaultWarehouses,\n  costMethod: \"avg\",\n  products: [\n    {\n      id: uuid(),\n      name: \"Cadena de Oro 18k\",\n      category: \"Cadenas\",\n      brand: \"GALLE\",\n      notes: \"Best seller\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      variants: [\n        {\n          id: uuid(),\n          name: \"45cm / Dorado\",\n          sku: \"CAD-18K-45-DOR\",\n          barcode: \"7701234560001\",\n          stockByWh: { W1: 22, W2: 8 },\n          cost: 120000,\n          price: 180000,\n          reorderLevel: 10,\n          enabled: true,\n        },\n      ],\n    },\n    {\n      id: uuid(),\n      name: \"Aretes de Oro laminado\",\n      category: \"Aretes\",\n      brand: \"GALLE\",\n      notes: \"\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      variants: [\n        {\n          id: uuid(),\n          name: \"├Ünica / Dorado\",\n          sku: \"ARE-LAM-UNI-DOR\",\n          barcode: \"7701234560002\",\n          stockByWh: { W1: 6, W2: 0 },\n          cost: 65000,\n          price: 98000,\n          reorderLevel: 5,\n          enabled: true,\n        },\n      ],\n    },\n  ],\n  movements: [],\n}\n\nfunction load(): InventorySnapshot {\n  if (typeof window === \"undefined\") return seed\n  const raw = localStorage.getItem(KEY)\n  if (!raw) {\n    localStorage.setItem(KEY, JSON.stringify(seed))\n    return seed\n  }\n  return JSON.parse(raw)\n}\n\nfunction save(snapshot: InventorySnapshot) {\n  if (typeof window === \"undefined\") return\n  localStorage.setItem(KEY, JSON.stringify(snapshot))\n}\n\nconst api = {\n  getSnapshot(): InventorySnapshot {\n    return load()\n  },\n  setCostMethod(method: CostMethod) {\n    const s = load()\n    s.costMethod = method\n    save(s)\n  },\n  listProducts(): Product[] {\n    return load().products\n  },\n  listWarehouses(): Warehouse[] {\n    return load().warehouses\n  },\n  listMovements(): Movement[] {\n    return load().movements.sort((a, b) => a.date.localeCompare(b.date))\n  },\n  upsertProduct(p: Product) {\n    const s = load()\n    const idx = s.products.findIndex((x) => x.id === p.id)\n    if (idx >= 0) s.products[idx] = p\n    else s.products.unshift(p)\n    p.updatedAt = new Date().toISOString()\n    save(s)\n  },\n  deleteProduct(productId: string) {\n    const s = load()\n    s.products = s.products.filter((p) => p.id !== productId)\n    s.movements = s.movements.filter((m) => m.productId !== productId)\n    save(s)\n  },\n  registerMovement(m: Movement) {\n    const s = load()\n    const product = s.products.find((p) => p.id === m.productId)\n    if (!product) throw new Error(\"Producto no existe\")\n    const variant = product.variants.find((v) => v.id === m.variantId)\n    if (!variant) throw new Error(\"Variante no existe\")\n\n    const qtySigned = m.type === \"out\" ? -Math.abs(m.qty) : m.type === \"transfer\" ? Math.abs(m.qty) : Math.abs(m.qty)\n\n    if (m.type === \"in\") {\n      const totalUnits = Object.values(variant.stockByWh).reduce((a, b) => a + b, 0)\n      if (s.costMethod === \"avg\") {\n        const totalValor = totalUnits * variant.cost + (m.unitCost ?? variant.cost) * Math.abs(m.qty)\n        const nuevaCant = totalUnits + Math.abs(m.qty)\n        variant.cost = nuevaCant > 0 ? Math.round(totalValor / nuevaCant) : variant.cost\n      }\n      const wh = m.toWh || \"W1\"\n      variant.stockByWh[wh] = (variant.stockByWh[wh] ?? 0) + Math.abs(m.qty)\n    } else if (m.type === \"out\") {\n      const wh = m.fromWh || \"W1\"\n      variant.stockByWh[wh] = (variant.stockByWh[wh] ?? 0) + qtySigned\n      if (s.costMethod === \"fifo\") {\n        variant.cost = m.unitCost ?? variant.cost\n      }\n    } else if (m.type === \"adjust\") {\n      const wh = m.toWh || m.fromWh || \"W1\"\n      variant.stockByWh[wh] = (variant.stockByWh[wh] ?? 0) + qtySigned\n      if (typeof m.unitCost === \"number\") variant.cost = m.unitCost\n    } else if (m.type === \"transfer\") {\n      const from = m.fromWh || \"W1\"\n      const to = m.toWh || \"W2\"\n      variant.stockByWh[from] = (variant.stockByWh[from] ?? 0) - Math.abs(m.qty)\n      variant.stockByWh[to] = (variant.stockByWh[to] ?? 0) + Math.abs(m.qty)\n    }\n\n    m.id = uuid()\n    s.movements.push(m)\n    product.updatedAt = new Date().toISOString()\n    save(s)\n  },\n  valuation() {\n    const s = load()\n    let unidades = 0,\n      valor = 0,\n      agotado = 0\n    s.products.forEach((p) =>\n      p.variants.forEach((v) => {\n        const st = Object.values(v.stockByWh).reduce((a, b) => a + b, 0)\n        unidades += st\n        valor += st * v.cost\n        if (v.enabled && st <= (v.reorderLevel ?? 0)) agotado++\n      }),\n    )\n    const costoProm = unidades > 0 ? Math.round(valor / unidades) : 0\n    return { unidades, valor, costoProm, agotado }\n  },\n}\n\nexport default api\n",
        "type": "registry:block",
        "target": "~/adapters/inventory.ts"
      },
      {
        "path": "app/(dashboard)/clientes/loading.tsx",
        "content": "export default function Loading() {\n  return null\n}\n",
        "type": "registry:block",
        "target": "~/app/(dashboard)/clientes/loading.tsx"
      },
      {
        "path": "app/(dashboard)/clientes/page.tsx",
        "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useState, useMemo, useCallback } from \"react\"\nimport {\n  Search,\n  Download,\n  Printer,\n  Share2,\n  Phone,\n  Mail,\n  MapPin,\n  Award,\n  TrendingUp,\n  TrendingDown,\n  AlertTriangle,\n  CheckCircle2,\n  Clock,\n  ShoppingBag,\n  Gem,\n  Package,\n} from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, Cell, ResponsiveContainer } from \"recharts\"\n\ntype Cliente = {\n  id: string\n  nombre: string\n  email: string\n  telefono: string\n  ciudad: string\n  tipo: \"Mayorista Joyer├¡a\" | \"Baliner├¡a\" | \"Detal\"\n  asesor: string\n  ultimaCompra: string\n  frecuencia: number\n  totalAcumulado: number\n  monthlySpent: number[]\n  jewelrySpent: number\n  balineriaSpent: number\n  detalSpent: number\n  esProspecto: boolean\n  incentivosGanados: Array<{ nivel: number; premio: string; fecha: string }>\n  rfmScore: \"Bueno\" | \"Atenci├│n\" | \"Riesgo\"\n}\n\nconst INCENTIVOS = [\n  { nivel: 1, monto: 1000000, premio: \"Bono ├ëxito $100K\", icon: \"­ƒÄü\" },\n  { nivel: 2, monto: 3000000, premio: \"Bono V├®lez $300K\", icon: \"­ƒÄü\" },\n  { nivel: 3, monto: 8000000, premio: \"Efectivo $800K\", icon: \"­ƒÆÁ\" },\n  { nivel: 4, monto: 10000000, premio: \"Efectivo $1M\", icon: \"­ƒÆÁ\" },\n  { nivel: 5, monto: 15000000, premio: \"Patineta Xiaomi\", icon: \"­ƒø┤\" },\n  { nivel: 6, monto: 30000000, premio: \"Viaje San Andr├®s\", icon: \"Ô£ê´©Å\" },\n  { nivel: 7, monto: 35000000, premio: \"Efectivo $3.5M\", icon: \"­ƒÆÁ\" },\n  { nivel: 8, monto: 50000000, premio: 'TV Samsung 70\"', icon: \"­ƒô║\" },\n  { nivel: 9, monto: 80000000, premio: \"Moto Suzuki GN 125\", icon: \"­ƒÅì´©Å\" },\n  { nivel: 10, monto: 100000000, premio: \"Moto AKT TT 200\", icon: \"­ƒÅì´©Å\" },\n  { nivel: 11, monto: 150000000, premio: \"Viaje Canc├║n\", icon: \"Ô£ê´©Å\" },\n  { nivel: 12, monto: 200000000, premio: \"Crucero Caribe\", icon: \"­ƒÜó\" },\n  { nivel: 13, monto: 250000000, premio: \"Viaje R├¡o + $2M\", icon: \"Ô£ê´©Å\" },\n  { nivel: 14, monto: 300000000, premio: \"Viaje Par├¡s + $4M\", icon: \"Ô£ê´©Å\" },\n  { nivel: 15, monto: 500000000, premio: \"Rolex Datejust\", icon: \"ÔîÜ\" },\n  { nivel: 16, monto: 800000000, premio: \"Mazda 2 Sed├ín\", icon: \"­ƒÜù\" },\n  { nivel: 17, monto: 1000000000, premio: \"Toyota Corolla\", icon: \"­ƒÜù\" },\n  { nivel: 18, monto: 1500000000, premio: \"Audi Q2\", icon: \"­ƒÜù\" },\n  { nivel: 19, monto: 1800000000, premio: \"BMW X2\", icon: \"­ƒÜù\" },\n  { nivel: 20, monto: 2000000000, premio: \"Efectivo $200M\", icon: \"­ƒÆÁ\" },\n]\n\nconst MOCK_CLIENTES: Cliente[] = [\n  {\n    id: \"1\",\n    nombre: \"Mar├¡a Gonz├ílez\",\n    email: \"maria.gonzalez@email.com\",\n    telefono: \"+57 300 123 4567\",\n    ciudad: \"Bogot├í\",\n    tipo: \"Mayorista Joyer├¡a\",\n    asesor: \"Carlos M├®ndez\",\n    ultimaCompra: \"2025-01-10\",\n    frecuencia: 12,\n    totalAcumulado: 145000000,\n    monthlySpent: [\n      8000000, 10000000, 12000000, 15000000, 11000000, 13000000, 14000000, 12000000, 10000000, 15000000, 13000000,\n      12000000,\n    ],\n    jewelrySpent: 145000000,\n    balineriaSpent: 0,\n    detalSpent: 0,\n    esProspecto: false,\n    incentivosGanados: [\n      { nivel: 1, premio: \"Bono ├ëxito $100K\", fecha: \"2024-01-15\" },\n      { nivel: 5, premio: \"Patineta Xiaomi\", fecha: \"2024-06-20\" },\n    ],\n    rfmScore: \"Bueno\",\n  },\n  {\n    id: \"2\",\n    nombre: \"Carlos Ram├¡rez\",\n    email: \"carlos.ramirez@email.com\",\n    telefono: \"+57 301 234 5678\",\n    ciudad: \"Medell├¡n\",\n    tipo: \"Baliner├¡a\",\n    asesor: \"Ana L├│pez\",\n    ultimaCompra: \"2025-01-12\",\n    frecuencia: 8,\n    totalAcumulado: 750000,\n    monthlySpent: [50000, 60000, 70000, 80000, 90000, 100000, 80000, 70000, 60000, 50000, 40000, 100000],\n    jewelrySpent: 0,\n    balineriaSpent: 750000,\n    detalSpent: 0,\n    esProspecto: true,\n    incentivosGanados: [],\n    rfmScore: \"Bueno\",\n  },\n  {\n    id: \"3\",\n    nombre: \"Ana Mart├¡nez\",\n    email: \"ana.martinez@email.com\",\n    telefono: \"+57 302 345 6789\",\n    ciudad: \"Cali\",\n    tipo: \"Detal\",\n    asesor: \"Pedro Ruiz\",\n    ultimaCompra: \"2024-11-11\",\n    frecuencia: 5,\n    totalAcumulado: 280000,\n    monthlySpent: [20000, 25000, 30000, 35000, 40000, 30000, 25000, 20000, 15000, 10000, 15000, 15000],\n    jewelrySpent: 0,\n    balineriaSpent: 0,\n    detalSpent: 280000,\n    esProspecto: false,\n    incentivosGanados: [],\n    rfmScore: \"Riesgo\",\n  },\n  {\n    id: \"4\",\n    nombre: \"Luis Hern├índez\",\n    email: \"luis.hernandez@email.com\",\n    telefono: \"+57 303 456 7890\",\n    ciudad: \"Barranquilla\",\n    tipo: \"Mayorista Joyer├¡a\",\n    asesor: \"Mar├¡a Silva\",\n    ultimaCompra: \"2025-01-09\",\n    frecuencia: 18,\n    totalAcumulado: 325000000,\n    monthlySpent: [\n      25000000, 28000000, 30000000, 27000000, 26000000, 29000000, 31000000, 28000000, 25000000, 27000000, 26000000,\n      23000000,\n    ],\n    jewelrySpent: 325000000,\n    balineriaSpent: 0,\n    detalSpent: 0,\n    esProspecto: false,\n    incentivosGanados: [\n      { nivel: 1, premio: \"Bono ├ëxito $100K\", fecha: \"2023-11-10\" },\n      { nivel: 6, premio: \"Viaje San Andr├®s\", fecha: \"2024-03-05\" },\n      { nivel: 14, premio: \"Viaje Par├¡s + $4M\", fecha: \"2024-12-01\" },\n    ],\n    rfmScore: \"Bueno\",\n  },\n  {\n    id: \"5\",\n    nombre: \"Patricia Silva\",\n    email: \"patricia.silva@email.com\",\n    telefono: \"+57 304 567 8901\",\n    ciudad: \"Cartagena\",\n    tipo: \"Baliner├¡a\",\n    asesor: \"Jorge D├¡az\",\n    ultimaCompra: \"2024-12-08\",\n    frecuencia: 6,\n    totalAcumulado: 420000,\n    monthlySpent: [30000, 35000, 40000, 45000, 50000, 40000, 35000, 30000, 25000, 30000, 35000, 25000],\n    jewelrySpent: 0,\n    balineriaSpent: 420000,\n    detalSpent: 0,\n    esProspecto: false,\n    incentivosGanados: [],\n    rfmScore: \"Atenci├│n\",\n  },\n  {\n    id: \"6\",\n    nombre: \"Roberto D├¡az\",\n    email: \"roberto.diaz@email.com\",\n    telefono: \"+57 305 678 9012\",\n    ciudad: \"Bucaramanga\",\n    tipo: \"Detal\",\n    asesor: \"Laura G├│mez\",\n    ultimaCompra: \"2025-01-13\",\n    frecuencia: 9,\n    totalAcumulado: 580000,\n    monthlySpent: [40000, 45000, 50000, 55000, 60000, 50000, 45000, 40000, 35000, 50000, 55000, 55000],\n    jewelrySpent: 0,\n    balineriaSpent: 0,\n    detalSpent: 580000,\n    esProspecto: true,\n    incentivosGanados: [],\n    rfmScore: \"Bueno\",\n  },\n  {\n    id: \"7\",\n    nombre: \"Laura P├®rez\",\n    email: \"laura.perez@email.com\",\n    telefono: \"+57 306 789 0123\",\n    ciudad: \"Pereira\",\n    tipo: \"Mayorista Joyer├¡a\",\n    asesor: \"Diego Castro\",\n    ultimaCompra: \"2025-01-07\",\n    frecuencia: 15,\n    totalAcumulado: 89000000,\n    monthlySpent: [\n      6000000, 7000000, 8000000, 7500000, 7000000, 8000000, 8500000, 7000000, 6500000, 8000000, 7500000, 7000000,\n    ],\n    jewelrySpent: 89000000,\n    balineriaSpent: 0,\n    detalSpent: 0,\n    esProspecto: false,\n    incentivosGanados: [\n      { nivel: 1, premio: \"Bono ├ëxito $100K\", fecha: \"2024-02-20\" },\n      { nivel: 3, premio: \"Efectivo $800K\", fecha: \"2024-08-15\" },\n    ],\n    rfmScore: \"Bueno\",\n  },\n  {\n    id: \"8\",\n    nombre: \"Diego Torres\",\n    email: \"diego.torres@email.com\",\n    telefono: \"+57 307 890 1234\",\n    ciudad: \"Manizales\",\n    tipo: \"Baliner├¡a\",\n    asesor: \"Sof├¡a Vargas\",\n    ultimaCompra: \"2025-01-14\",\n    frecuencia: 7,\n    totalAcumulado: 650000,\n    monthlySpent: [45000, 50000, 55000, 60000, 65000, 55000, 50000, 45000, 40000, 55000, 60000, 70000],\n    jewelrySpent: 0,\n    balineriaSpent: 650000,\n    detalSpent: 0,\n    esProspecto: true,\n    incentivosGanados: [],\n    rfmScore: \"Bueno\",\n  },\n]\n\nconst TIPOS_CLIENTE = [\n  { id: \"todos\", label: \"Todos\", icon: \"­ƒæÑ\" },\n  { id: \"mayorista\", label: \"Mayoristas Joyer├¡a\", icon: \"Ô£¿\" },\n  { id: \"balineria\", label: \"Baliner├¡a\", icon: \"­ƒøì´©Å\" },\n  { id: \"detal\", label: \"Detal\", icon: \"Ô¡ò\" },\n  { id: \"prospectos\", label: \"Prospectos ­ƒöÑ\", icon: \"\" },\n]\n\nexport default function ClientesPage() {\n  const [selectedTipo, setSelectedTipo] = useState(\"todos\")\n  const [searchQuery, setSearchQuery] = useState(\"\")\n  const [selectedCliente, setSelectedCliente] = useState<Cliente | null>(null)\n\n  const filteredClientes = useMemo(() => {\n    return MOCK_CLIENTES.filter((cliente) => {\n      const matchesTipo =\n        selectedTipo === \"todos\" ||\n        (selectedTipo === \"mayorista\" && cliente.tipo === \"Mayorista Joyer├¡a\") ||\n        (selectedTipo === \"balineria\" && cliente.tipo === \"Baliner├¡a\") ||\n        (selectedTipo === \"detal\" && cliente.tipo === \"Detal\") ||\n        (selectedTipo === \"prospectos\" && cliente.esProspecto)\n\n      const matchesSearch =\n        searchQuery === \"\" ||\n        cliente.nombre.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        cliente.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        cliente.ciudad.toLowerCase().includes(searchQuery.toLowerCase())\n\n      return matchesTipo && matchesSearch\n    })\n  }, [selectedTipo, searchQuery])\n\n  const kpis = useMemo(() => {\n    const activos = MOCK_CLIENTES.filter((c) => {\n      const daysSinceLastOrder = Math.floor(\n        (new Date().getTime() - new Date(c.ultimaCompra).getTime()) / (1000 * 60 * 60 * 24),\n      )\n      return daysSinceLastOrder <= 30\n    }).length\n\n    const nuevos = MOCK_CLIENTES.filter((c) => c.frecuencia <= 3).length\n\n    const recompra = (MOCK_CLIENTES.filter((c) => c.frecuencia > 1).length / MOCK_CLIENTES.length) * 100\n\n    const ticketPromedio =\n      MOCK_CLIENTES.reduce((sum, c) => sum + c.totalAcumulado, 0) /\n      MOCK_CLIENTES.reduce((sum, c) => sum + c.frecuencia, 0)\n\n    const ventasMes = MOCK_CLIENTES.reduce((sum, c) => sum + c.monthlySpent[11], 0)\n\n    const incentivosEntregados = MOCK_CLIENTES.reduce((sum, c) => sum + c.incentivosGanados.length, 0)\n\n    return { activos, nuevos, recompra, ticketPromedio, ventasMes, incentivosEntregados }\n  }, [])\n\n  const topClientes = useMemo(() => {\n    return [...MOCK_CLIENTES].sort((a, b) => b.totalAcumulado - a.totalAcumulado).slice(0, 10)\n  }, [])\n\n  const clientesRiesgo = useMemo(() => {\n    return [...MOCK_CLIENTES]\n      .map((c) => ({\n        ...c,\n        daysSinceLastOrder: Math.floor(\n          (new Date().getTime() - new Date(c.ultimaCompra).getTime()) / (1000 * 60 * 60 * 24),\n        ),\n      }))\n      .filter((c) => c.daysSinceLastOrder > 30)\n      .sort((a, b) => b.daysSinceLastOrder - a.daysSinceLastOrder)\n      .slice(0, 5)\n  }, [])\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(e.target.value)\n  }, [])\n\n  const handleTipoChange = useCallback((tipo: string) => {\n    setSelectedTipo(tipo)\n  }, [])\n\n  const handleClienteClick = useCallback((cliente: Cliente) => {\n    setSelectedCliente(cliente)\n  }, [])\n\n  const handleCloseDrawer = useCallback(() => {\n    setSelectedCliente(null)\n  }, [])\n\n  const getProximoIncentivo = useCallback((totalAcumulado: number) => {\n    return INCENTIVOS.find((inc) => inc.monto > totalAcumulado) || INCENTIVOS[INCENTIVOS.length - 1]\n  }, [])\n\n  const getProgreso = useCallback(\n    (totalAcumulado: number) => {\n      const proximo = getProximoIncentivo(totalAcumulado)\n      const anterior = INCENTIVOS.find((inc, idx) => INCENTIVOS[idx + 1]?.nivel === proximo.nivel) || INCENTIVOS[0]\n      const progreso = ((totalAcumulado - anterior.monto) / (proximo.monto - anterior.monto)) * 100\n      return Math.min(Math.max(progreso, 0), 100)\n    },\n    [getProximoIncentivo],\n  )\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"border-b border-gray-200 bg-white px-8 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"font-serif text-4xl font-bold text-gray-900\">Seguimiento de Clientes</h1>\n            <p className=\"mt-2 text-sm text-gray-600\">\n              Gesti├│n premium de Mayoristas Joyer├¡a, Baliner├¡a y Clientes Detal\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Exportar\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Printer className=\"mr-2 h-4 w-4\" />\n              Imprimir\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Share2 className=\"mr-2 h-4 w-4\" />\n              Compartir\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"border-b border-gray-200 bg-[#F5F5F7] px-8 py-4\">\n        <div className=\"flex gap-2\">\n          {TIPOS_CLIENTE.map((tipo) => (\n            <button\n              key={tipo.id}\n              onClick={() => handleTipoChange(tipo.id)}\n              className={`rounded-full px-5 py-2.5 text-sm font-medium transition-all ${\n                selectedTipo === tipo.id\n                  ? \"bg-[#C8A96A] text-white shadow-lg shadow-[#C8A96A]/30\"\n                  : \"bg-white/80 text-gray-700 backdrop-blur-sm hover:bg-white\"\n              }`}\n            >\n              {tipo.icon && <span className=\"mr-2\">{tipo.icon}</span>}\n              {tipo.label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"px-8 py-8\">\n        <div className=\"mb-8 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6\">\n          {/* Activos */}\n          <div className=\"group relative overflow-hidden rounded-3xl bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.08)] transition-all hover:shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n            <div className=\"absolute inset-0 rounded-3xl bg-gradient-to-br from-[#C8A96A] via-amber-400 to-[#C8A96A] p-[1px]\">\n              <div className=\"h-full w-full rounded-3xl bg-white\" />\n            </div>\n            <div className=\"relative\">\n              <div className=\"mb-2 text-xs font-semibold uppercase tracking-wider text-gray-600\">Activos</div>\n              <div className=\"mb-3 font-serif text-3xl font-bold tabular-nums text-gray-900\">{kpis.activos}</div>\n              <ResponsiveContainer width=\"100%\" height={30}>\n                <LineChart data={[{ v: 45 }, { v: 52 }, { v: 48 }, { v: 61 }, { v: 55 }, { v: kpis.activos }]}>\n                  <Line type=\"monotone\" dataKey=\"v\" stroke=\"#C8A96A\" strokeWidth={2} dot={false} />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Nuevos */}\n          <div className=\"group relative overflow-hidden rounded-3xl bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.08)] transition-all hover:shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n            <div className=\"absolute inset-0 rounded-3xl bg-gradient-to-br from-[#C8A96A] via-amber-400 to-[#C8A96A] p-[1px]\">\n              <div className=\"h-full w-full rounded-3xl bg-white\" />\n            </div>\n            <div className=\"relative\">\n              <div className=\"mb-2 text-xs font-semibold uppercase tracking-wider text-gray-600\">Nuevos</div>\n              <div className=\"mb-3 font-serif text-3xl font-bold tabular-nums text-gray-900\">{kpis.nuevos}</div>\n              <ResponsiveContainer width=\"100%\" height={30}>\n                <LineChart data={[{ v: 8 }, { v: 12 }, { v: 10 }, { v: 15 }, { v: 11 }, { v: kpis.nuevos }]}>\n                  <Line type=\"monotone\" dataKey=\"v\" stroke=\"#10B981\" strokeWidth={2} dot={false} />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Recompra % */}\n          <div className=\"group relative overflow-hidden rounded-3xl bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.08)] transition-all hover:shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n            <div className=\"absolute inset-0 rounded-3xl bg-gradient-to-br from-[#C8A96A] via-amber-400 to-[#C8A96A] p-[1px]\">\n              <div className=\"h-full w-full rounded-3xl bg-white\" />\n            </div>\n            <div className=\"relative\">\n              <div className=\"mb-2 text-xs font-semibold uppercase tracking-wider text-gray-600\">Recompra %</div>\n              <div className=\"mb-3 font-serif text-3xl font-bold tabular-nums text-gray-900\">\n                {kpis.recompra.toFixed(0)}%\n              </div>\n              <ResponsiveContainer width=\"100%\" height={30}>\n                <LineChart data={[{ v: 82 }, { v: 85 }, { v: 83 }, { v: 88 }, { v: 86 }, { v: kpis.recompra }]}>\n                  <Line type=\"monotone\" dataKey=\"v\" stroke=\"#3B82F6\" strokeWidth={2} dot={false} />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Ticket Promedio */}\n          <div className=\"group relative overflow-hidden rounded-3xl bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.08)] transition-all hover:shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n            <div className=\"absolute inset-0 rounded-3xl bg-gradient-to-br from-[#C8A96A] via-amber-400 to-[#C8A96A] p-[1px]\">\n              <div className=\"h-full w-full rounded-3xl bg-white\" />\n            </div>\n            <div className=\"relative\">\n              <div className=\"mb-2 text-xs font-semibold uppercase tracking-wider text-gray-600\">Ticket Prom.</div>\n              <div className=\"mb-3 font-serif text-3xl font-bold tabular-nums text-[#C8A96A]\">\n                ${(kpis.ticketPromedio / 1000000).toFixed(1)}M\n              </div>\n              <ResponsiveContainer width=\"100%\" height={30}>\n                <BarChart\n                  data={[\n                    { v: 8.2 },\n                    { v: 8.5 },\n                    { v: 8.8 },\n                    { v: 9.1 },\n                    { v: 8.9 },\n                    { v: kpis.ticketPromedio / 1000000 },\n                  ]}\n                >\n                  <Bar dataKey=\"v\" fill=\"#C8A96A\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Ventas Mes */}\n          <div className=\"group relative overflow-hidden rounded-3xl bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.08)] transition-all hover:shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n            <div className=\"absolute inset-0 rounded-3xl bg-gradient-to-br from-[#C8A96A] via-amber-400 to-[#C8A96A] p-[1px]\">\n              <div className=\"h-full w-full rounded-3xl bg-white\" />\n            </div>\n            <div className=\"relative\">\n              <div className=\"mb-2 text-xs font-semibold uppercase tracking-wider text-gray-600\">Ventas Mes</div>\n              <div className=\"mb-3 font-serif text-3xl font-bold tabular-nums text-gray-900\">\n                ${(kpis.ventasMes / 1000000).toFixed(0)}M\n              </div>\n              <ResponsiveContainer width=\"100%\" height={30}>\n                <LineChart\n                  data={[{ v: 95 }, { v: 102 }, { v: 98 }, { v: 110 }, { v: 105 }, { v: kpis.ventasMes / 1000000 }]}\n                >\n                  <Line type=\"monotone\" dataKey=\"v\" stroke=\"#8B5CF6\" strokeWidth={2} dot={false} />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Incentivos Entregados */}\n          <div className=\"group relative overflow-hidden rounded-3xl bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.08)] transition-all hover:shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n            <div className=\"absolute inset-0 rounded-3xl bg-gradient-to-br from-[#C8A96A] via-amber-400 to-[#C8A96A] p-[1px]\">\n              <div className=\"h-full w-full rounded-3xl bg-white\" />\n            </div>\n            <div className=\"relative\">\n              <div className=\"mb-2 text-xs font-semibold uppercase tracking-wider text-gray-600\">Incentivos</div>\n              <div className=\"mb-3 font-serif text-3xl font-bold tabular-nums text-gray-900\">\n                {kpis.incentivosEntregados}\n              </div>\n              <ResponsiveContainer width=\"100%\" height={30}>\n                <BarChart data={[{ v: 3 }, { v: 4 }, { v: 5 }, { v: 6 }, { v: 5 }, { v: kpis.incentivosEntregados }]}>\n                  <Bar dataKey=\"v\" fill=\"#F59E0B\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mb-8 grid grid-cols-1 gap-6 lg:grid-cols-2\">\n          {/* Top 10 por Ventas */}\n          <div className=\"overflow-hidden rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.08)]\">\n            <h3 className=\"mb-4 font-serif text-xl font-bold text-gray-900\">Top 10 por Ventas</h3>\n            <div className=\"space-y-3\">\n              {topClientes.map((cliente, idx) => (\n                <div\n                  key={cliente.id}\n                  className=\"flex items-center gap-3 rounded-xl border border-gray-100 bg-[#FAFAFC] p-3 transition-all hover:border-[#C8A96A]/30 hover:bg-white\"\n                >\n                  <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-gradient-to-br from-[#C8A96A] to-amber-500 text-xs font-bold text-white\">\n                    {idx + 1}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"text-sm font-medium text-gray-900\">{cliente.nombre}</div>\n                    <div className=\"text-xs text-gray-500\">{cliente.ciudad}</div>\n                  </div>\n                  <div className=\"w-20\">\n                    <ResponsiveContainer width=\"100%\" height={20}>\n                      <LineChart data={cliente.monthlySpent.map((v) => ({ v }))}>\n                        <Line type=\"monotone\" dataKey=\"v\" stroke=\"#C8A96A\" strokeWidth={1.5} dot={false} />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-serif text-sm font-bold tabular-nums text-[#C8A96A]\">\n                      ${(cliente.totalAcumulado / 1000000).toFixed(1)}M\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Riesgo de Fuga */}\n          <div className=\"overflow-hidden rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.08)]\">\n            <h3 className=\"mb-4 font-serif text-xl font-bold text-gray-900\">Riesgo de Fuga</h3>\n            <div className=\"space-y-3\">\n              {clientesRiesgo.length > 0 ? (\n                clientesRiesgo.map((cliente) => (\n                  <div\n                    key={cliente.id}\n                    className=\"flex items-center gap-3 rounded-xl border border-red-100 bg-red-50/50 p-3 transition-all hover:border-red-200 hover:bg-red-50\"\n                  >\n                    <AlertTriangle className=\"h-5 w-5 text-red-500\" />\n                    <div className=\"flex-1\">\n                      <div className=\"text-sm font-medium text-gray-900\">{cliente.nombre}</div>\n                      <div className=\"text-xs text-gray-500\">{cliente.ciudad}</div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-xs font-medium text-red-600\">{cliente.daysSinceLastOrder} d├¡as</div>\n                      <div className=\"text-xs text-gray-500\">sin comprar</div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n                  <CheckCircle2 className=\"mb-2 h-12 w-12 text-green-500\" />\n                  <p className=\"text-sm font-medium text-gray-900\">┬íExcelente!</p>\n                  <p className=\"text-xs text-gray-500\">No hay clientes en riesgo</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mb-6 flex items-center justify-between\">\n          <h2 className=\"font-serif text-2xl font-bold text-gray-900\">Lista de Clientes</h2>\n          <div className=\"relative w-96\">\n            <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Buscar por nombre, email o ciudad...\"\n              value={searchQuery}\n              onChange={handleSearchChange}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n\n        <div className=\"overflow-hidden rounded-3xl border border-gray-200 bg-white shadow-[0_20px_60px_rgba(0,0,0,.08)]\">\n          <table className=\"w-full\">\n            <thead className=\"sticky top-0 bg-[#F5F5F7]\">\n              <tr>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  Cliente\n                </th>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  Segmento\n                </th>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  Ciudad\n                </th>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  Asesor\n                </th>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  ├Ültima Compra\n                </th>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  Frecuencia\n                </th>\n                <th className=\"px-4 py-4 text-right text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  Total Acumulado\n                </th>\n                <th className=\"px-4 py-4 text-left text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  Progreso a Incentivo\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-100\">\n              {filteredClientes.map((cliente, idx) => {\n                const proximoIncentivo = getProximoIncentivo(cliente.totalAcumulado)\n                const progreso = getProgreso(cliente.totalAcumulado)\n\n                return (\n                  <tr\n                    key={cliente.id}\n                    onClick={() => handleClienteClick(cliente)}\n                    className={`cursor-pointer transition-colors hover:bg-[#F5F5F7] ${\n                      idx % 2 === 0 ? \"bg-white\" : \"bg-[#FAFAFC]\"\n                    }`}\n                  >\n                    <td className=\"px-4 py-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-[#C8A96A] to-amber-500 text-sm font-bold text-white shadow-md\">\n                          {cliente.nombre.charAt(0)}\n                        </div>\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900\">{cliente.nombre}</div>\n                          <div className=\"text-xs text-gray-500\">{cliente.email}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-4\">\n                      <Badge\n                        variant=\"secondary\"\n                        className={\n                          cliente.tipo === \"Mayorista Joyer├¡a\"\n                            ? \"bg-purple-100 text-purple-700\"\n                            : cliente.tipo === \"Baliner├¡a\"\n                              ? \"bg-blue-100 text-blue-700\"\n                              : \"bg-green-100 text-green-700\"\n                        }\n                      >\n                        {cliente.tipo}\n                      </Badge>\n                    </td>\n                    <td className=\"px-4 py-4 text-sm text-gray-900\">{cliente.ciudad}</td>\n                    <td className=\"px-4 py-4 text-sm text-gray-600\">{cliente.asesor}</td>\n                    <td className=\"px-4 py-4 text-xs text-gray-600\">{cliente.ultimaCompra}</td>\n                    <td className=\"px-4 py-4\">\n                      <Badge variant=\"secondary\" className=\"bg-amber-100 text-amber-700\">\n                        {cliente.frecuencia}x\n                      </Badge>\n                    </td>\n                    <td className=\"px-4 py-4 text-right\">\n                      <div className=\"font-serif text-sm font-bold tabular-nums text-[#C8A96A]\">\n                        ${(cliente.totalAcumulado / 1000000).toFixed(cliente.totalAcumulado >= 1000000 ? 1 : 0)}\n                        {cliente.totalAcumulado >= 1000000 ? \"M\" : \"K\"}\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-4\">\n                      <div className=\"flex items-center gap-2\">\n                        {cliente.esProspecto && cliente.tipo !== \"Mayorista Joyer├¡a\" && (\n                          <Badge\n                            variant=\"secondary\"\n                            className=\"bg-gradient-to-r from-orange-100 to-amber-100 text-orange-700 shadow-sm shadow-orange-200\"\n                          >\n                            ­ƒöÑ Prospecto Mayorista\n                          </Badge>\n                        )}\n                        <div className=\"relative h-3 w-48 overflow-hidden rounded-full bg-gray-200\">\n                          <div\n                            className=\"h-full bg-gradient-to-r from-[#C8A96A] via-amber-400 to-amber-500 shadow-inner\"\n                            style={{ width: `${progreso}%` }}\n                          />\n                          {INCENTIVOS.map((inc, idx) => (\n                            <div\n                              key={inc.nivel}\n                              className=\"absolute top-0 h-full w-[2px] bg-white/60\"\n                              style={{ left: `${(idx / (INCENTIVOS.length - 1)) * 100}%` }}\n                              title={`${inc.premio} - $${(inc.monto / 1000000).toFixed(0)}M`}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                    </td>\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {selectedCliente && (\n        <div className=\"fixed inset-0 z-50 bg-black/50 backdrop-blur-sm\" onClick={handleCloseDrawer}>\n          <div\n            className=\"absolute right-0 top-0 h-full w-[600px] bg-white shadow-2xl\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"flex h-full flex-col\">\n              {/* Header con gradiente dorado */}\n              <div className=\"border-b border-gray-200 bg-gradient-to-br from-[#C8A96A] via-amber-500 to-amber-600 p-8 text-white\">\n                <div className=\"mb-6 flex items-center justify-between\">\n                  <h2 className=\"font-serif text-3xl font-bold\">Detalles del Cliente</h2>\n                  <button onClick={handleCloseDrawer} className=\"rounded-full p-2 transition-colors hover:bg-white/20\">\n                    Ô£ò\n                  </button>\n                </div>\n                <div className=\"flex items-center gap-6\">\n                  {/* Avatar con anillo dorado */}\n                  <div className=\"relative\">\n                    <div className=\"absolute -inset-2 rounded-full bg-gradient-to-br from-white via-amber-200 to-white opacity-50 blur-md\" />\n                    <div className=\"relative flex h-20 w-20 items-center justify-center rounded-full bg-white text-3xl font-bold text-[#C8A96A] shadow-2xl ring-4 ring-white/50\">\n                      {selectedCliente.nombre.charAt(0)}\n                    </div>\n                  </div>\n                  <div>\n                    <h3 className=\"mb-2 font-serif text-2xl font-bold\">{selectedCliente.nombre}</h3>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge\n                        variant=\"secondary\"\n                        className={\n                          selectedCliente.tipo === \"Mayorista Joyer├¡a\"\n                            ? \"bg-purple-100 text-purple-700\"\n                            : selectedCliente.tipo === \"Baliner├¡a\"\n                              ? \"bg-blue-100 text-blue-700\"\n                              : \"bg-green-100 text-green-700\"\n                        }\n                      >\n                        {selectedCliente.tipo}\n                      </Badge>\n                      <Badge\n                        variant=\"secondary\"\n                        className={\n                          selectedCliente.rfmScore === \"Bueno\"\n                            ? \"bg-green-100 text-green-700\"\n                            : selectedCliente.rfmScore === \"Atenci├│n\"\n                              ? \"bg-yellow-100 text-yellow-700\"\n                              : \"bg-red-100 text-red-700\"\n                        }\n                      >\n                        RFM: {selectedCliente.rfmScore}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Content */}\n              <div className=\"flex-1 overflow-y-auto p-8\">\n                {/* Informaci├│n de Contacto */}\n                <div className=\"mb-8\">\n                  <h4 className=\"mb-4 font-serif text-xl font-bold text-gray-900\">Informaci├│n de Contacto</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-3 rounded-xl border border-gray-200 bg-[#FAFAFC] p-3\">\n                      <Mail className=\"h-5 w-5 text-[#C8A96A]\" />\n                      <span className=\"text-sm text-gray-700\">{selectedCliente.email}</span>\n                    </div>\n                    <div className=\"flex items-center gap-3 rounded-xl border border-gray-200 bg-[#FAFAFC] p-3\">\n                      <Phone className=\"h-5 w-5 text-[#C8A96A]\" />\n                      <span className=\"text-sm text-gray-700\">{selectedCliente.telefono}</span>\n                    </div>\n                    <div className=\"flex items-center gap-3 rounded-xl border border-gray-200 bg-[#FAFAFC] p-3\">\n                      <MapPin className=\"h-5 w-5 text-[#C8A96A]\" />\n                      <span className=\"text-sm text-gray-700\">{selectedCliente.ciudad}</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* M├®tricas Clave */}\n                <div className=\"mb-8 grid grid-cols-2 gap-4\">\n                  <div className=\"overflow-hidden rounded-2xl border border-gray-200 bg-gradient-to-br from-[#FAFAFC] to-white p-5 shadow-sm\">\n                    <div className=\"mb-2 text-xs font-semibold uppercase tracking-wider text-gray-600\">\n                      Total Acumulado\n                    </div>\n                    <div className=\"font-serif text-3xl font-bold tabular-nums text-[#C8A96A]\">\n                      ${(selectedCliente.totalAcumulado / 1000000).toFixed(1)}M\n                    </div>\n                  </div>\n                  <div className=\"overflow-hidden rounded-2xl border border-gray-200 bg-gradient-to-br from-[#FAFAFC] to-white p-5 shadow-sm\">\n                    <div className=\"mb-2 text-xs font-semibold uppercase tracking-wider text-gray-600\">Frecuencia</div>\n                    <div className=\"font-serif text-3xl font-bold tabular-nums text-gray-900\">\n                      {selectedCliente.frecuencia}x\n                    </div>\n                  </div>\n                </div>\n\n                {/* Mix de Compra (Pie Chart) */}\n                <div className=\"mb-8\">\n                  <h4 className=\"mb-4 font-serif text-xl font-bold text-gray-900\">Mix de Compra</h4>\n                  <div className=\"flex items-center gap-6 rounded-2xl border border-gray-200 bg-[#FAFAFC] p-6\">\n                    <ResponsiveContainer width={120} height={120}>\n                      <PieChart>\n                        <Pie\n                          data={[\n                            { name: \"Joyer├¡a\", value: selectedCliente.jewelrySpent },\n                            { name: \"Baliner├¡a\", value: selectedCliente.balineriaSpent },\n                            { name: \"Detal\", value: selectedCliente.detalSpent },\n                          ].filter((d) => d.value > 0)}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          innerRadius={35}\n                          outerRadius={55}\n                          paddingAngle={2}\n                          dataKey=\"value\"\n                        >\n                          <Cell fill=\"#C8A96A\" />\n                          <Cell fill=\"#3B82F6\" />\n                          <Cell fill=\"#10B981\" />\n                        </Pie>\n                      </PieChart>\n                    </ResponsiveContainer>\n                    <div className=\"flex-1 space-y-2\">\n                      {selectedCliente.jewelrySpent > 0 && (\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <Gem className=\"h-4 w-4 text-[#C8A96A]\" />\n                            <span className=\"text-sm text-gray-700\">Joyer├¡a</span>\n                          </div>\n                          <span className=\"font-serif text-sm font-bold tabular-nums text-gray-900\">\n                            ${(selectedCliente.jewelrySpent / 1000000).toFixed(1)}M\n                          </span>\n                        </div>\n                      )}\n                      {selectedCliente.balineriaSpent > 0 && (\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <ShoppingBag className=\"h-4 w-4 text-blue-500\" />\n                            <span className=\"text-sm text-gray-700\">Baliner├¡a</span>\n                          </div>\n                          <span className=\"font-serif text-sm font-bold tabular-nums text-gray-900\">\n                            ${(selectedCliente.balineriaSpent / 1000).toFixed(0)}K\n                          </span>\n                        </div>\n                      )}\n                      {selectedCliente.detalSpent > 0 && (\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <Package className=\"h-4 w-4 text-green-500\" />\n                            <span className=\"text-sm text-gray-700\">Detal</span>\n                          </div>\n                          <span className=\"font-serif text-sm font-bold tabular-nums text-gray-900\">\n                            ${(selectedCliente.detalSpent / 1000).toFixed(0)}K\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Pr├│ximo Incentivo */}\n                <div className=\"mb-8\">\n                  <h4 className=\"mb-4 font-serif text-xl font-bold text-gray-900\">Pr├│ximo Incentivo</h4>\n                  <div className=\"overflow-hidden rounded-2xl border border-[#C8A96A]/30 bg-gradient-to-br from-amber-50 via-yellow-50 to-amber-50 p-6 shadow-sm\">\n                    <div className=\"mb-3 flex items-center justify-between\">\n                      <div>\n                        <div className=\"mb-1 text-2xl\">{getProximoIncentivo(selectedCliente.totalAcumulado).icon}</div>\n                        <div className=\"font-serif text-lg font-bold text-gray-900\">\n                          {getProximoIncentivo(selectedCliente.totalAcumulado).premio}\n                        </div>\n                      </div>\n                      <Award className=\"h-8 w-8 text-[#C8A96A]\" />\n                    </div>\n                    <div className=\"mb-3 h-3 overflow-hidden rounded-full bg-gray-200\">\n                      <div\n                        className=\"h-full bg-gradient-to-r from-[#C8A96A] via-amber-400 to-amber-500 shadow-inner\"\n                        style={{ width: `${getProgreso(selectedCliente.totalAcumulado)}%` }}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between text-xs text-gray-600\">\n                      <span>Progreso: {getProgreso(selectedCliente.totalAcumulado).toFixed(0)}%</span>\n                      <span className=\"font-semibold\">\n                        ${(getProximoIncentivo(selectedCliente.totalAcumulado).monto / 1000000).toFixed(1)}M\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Timeline de Incentivos Ganados */}\n                {selectedCliente.incentivosGanados.length > 0 && (\n                  <div className=\"mb-8\">\n                    <h4 className=\"mb-4 font-serif text-xl font-bold text-gray-900\">Incentivos Ganados</h4>\n                    <div className=\"space-y-3\">\n                      {selectedCliente.incentivosGanados.map((incentivo, idx) => (\n                        <div\n                          key={idx}\n                          className=\"flex items-center gap-4 rounded-xl border border-gray-200 bg-white p-4 shadow-sm transition-all hover:border-[#C8A96A]/30 hover:shadow-md\"\n                        >\n                          <div className=\"flex h-12 w-12 items-center justify-center rounded-full bg-gradient-to-br from-[#C8A96A] to-amber-500 text-white shadow-md\">\n                            <Award className=\"h-6 w-6\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"font-serif text-sm font-bold text-gray-900\">{incentivo.premio}</div>\n                            <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n                              <Clock className=\"h-3 w-3\" />\n                              {incentivo.fecha}\n                            </div>\n                          </div>\n                          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">\n                            Nivel {incentivo.nivel}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* IA Comercial */}\n                <div>\n                  <h4 className=\"mb-4 font-serif text-xl font-bold text-gray-900\">IA Comercial</h4>\n                  <div className=\"space-y-3 rounded-2xl border border-gray-200 bg-gradient-to-br from-[#FAFAFC] to-white p-6 shadow-sm\">\n                    <div className=\"flex items-start gap-3\">\n                      <TrendingUp className=\"mt-0.5 h-5 w-5 text-green-500\" />\n                      <div>\n                        <div className=\"mb-1 text-sm font-medium text-gray-900\">C├│mo nos fue</div>\n                        <div className=\"text-xs text-gray-600\">Incremento del 15% en compras vs. mes anterior</div>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"ml-auto bg-green-100 text-green-700\">\n                        Bueno\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-start gap-3\">\n                      <TrendingDown className=\"mt-0.5 h-5 w-5 text-gray-400\" />\n                      <div>\n                        <div className=\"mb-1 text-sm font-medium text-gray-900\">Variaciones</div>\n                        <div className=\"text-xs text-gray-600\">Frecuencia estable en los ├║ltimos 3 meses</div>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"ml-auto bg-gray-100 text-gray-700\">\n                        Neutro\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-start gap-3\">\n                      <AlertTriangle className=\"mt-0.5 h-5 w-5 text-yellow-500\" />\n                      <div>\n                        <div className=\"mb-1 text-sm font-medium text-gray-900\">Alertas</div>\n                        <div className=\"text-xs text-gray-600\">Pr├│ximo a alcanzar incentivo de nivel superior</div>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"ml-auto bg-yellow-100 text-yellow-700\">\n                        Atenci├│n\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-start gap-3\">\n                      <CheckCircle2 className=\"mt-0.5 h-5 w-5 text-blue-500\" />\n                      <div>\n                        <div className=\"mb-1 text-sm font-medium text-gray-900\">Acciones</div>\n                        <div className=\"text-xs text-gray-600\">Ofrecer productos premium para acelerar progreso</div>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"ml-auto bg-blue-100 text-blue-700\">\n                        Bueno\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-start gap-3\">\n                      <TrendingUp className=\"mt-0.5 h-5 w-5 text-purple-500\" />\n                      <div>\n                        <div className=\"mb-1 text-sm font-medium text-gray-900\">Proyecci├│n</div>\n                        <div className=\"text-xs text-gray-600\">\n                          Alcanzar├í pr├│ximo incentivo en ~2 meses al ritmo actual\n                        </div>\n                      </div>\n                      <Badge variant=\"secondary\" className=\"ml-auto bg-purple-100 text-purple-700\">\n                        Bueno\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/(dashboard)/clientes/page.tsx"
      },
      {
        "path": "app/(dashboard)/configuracion/loading.tsx",
        "content": "export default function ConfiguracionLoading() {\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-white\">\n      <div className=\"text-center\">\n        <div className=\"mx-auto h-12 w-12 animate-spin rounded-full border-4 border-gray-200 border-t-[#C8A96A]\" />\n        <p className=\"mt-4 text-sm text-gray-600\">Cargando configuraci├│n...</p>\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:block",
        "target": "~/app/(dashboard)/configuracion/loading.tsx"
      },
      {
        "path": "app/(dashboard)/dashboard/page.tsx",
        "content": "\"use client\"\n\nimport LuxurySalesDashboard from \"@/components/luxury-sales-dashboard\"\n\nexport default function DashboardPage() {\n  return <LuxurySalesDashboard />\n}\n",
        "type": "registry:page",
        "target": "app/(dashboard)/dashboard/page.tsx"
      },
      {
        "path": "app/(dashboard)/entregas/components/TrackingDialog.tsx",
        "content": "\"use client\"\nimport { useEffect } from \"react\"\nimport useSWR from \"swr\"\n\nconst fetcher = (u: string) => fetch(u).then((r) => r.json())\n\nexport default function TrackingDialog({\n  guia,\n  open,\n  onClose,\n}: {\n  guia: string\n  open: boolean\n  onClose: () => void\n}) {\n  const { data, error, isLoading, mutate } = useSWR(\n    open && guia ? `/api/mipaquete/track?guia=${encodeURIComponent(guia)}` : null,\n    fetcher,\n  )\n\n  useEffect(() => {\n    if (open) mutate()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, guia])\n\n  if (!open) return null\n\n  const ok = data?.ok === true\n  const d = data?.data\n\n  return (\n    <div className=\"fixed inset-0 z-[80] grid place-items-center bg-black/40 backdrop-blur-sm\">\n      <div className=\"w-[min(1200px,95vw)] max-h-[85vh] overflow-hidden rounded-3xl border-2 border-[#d8bd80]/30 bg-gradient-to-br from-white via-[#fdfbf7] to-white shadow-[0_40px_100px_rgba(0,0,0,.3)]\">\n        <div className=\"relative overflow-hidden\">\n          <div className=\"h-16 w-full bg-gradient-to-r from-[#d8bd80] via-[#e8d4a0] to-[#d8bd80]\" />\n          <div className=\"absolute inset-0 flex items-center px-6\">\n            <div className=\"flex items-center gap-2.5\">\n              <div className=\"h-9 w-9 rounded-full bg-white/90 shadow-lg grid place-items-center text-lg\">­ƒôª</div>\n              <div>\n                <div className=\"text-xs font-medium text-[#6b5728]/80 uppercase tracking-wider\">Tracking MiPaquete</div>\n                <div className=\"text-base font-bold text-[#6b5728] tabular-nums\">{guia}</div>\n              </div>\n            </div>\n            <button\n              onClick={onClose}\n              aria-label=\"Cerrar\"\n              className=\"ml-auto grid h-9 w-9 place-items-center rounded-full bg-white/95 text-neutral-700 shadow-lg hover:bg-white hover:scale-105 transition-transform text-lg\"\n            >\n              ├ù\n            </button>\n          </div>\n        </div>\n\n        <div className=\"p-5 overflow-y-auto max-h-[calc(85vh-64px)]\">\n          {isLoading && (\n            <div className=\"flex items-center justify-center py-16\">\n              <div className=\"text-center space-y-2.5\">\n                <div className=\"h-10 w-10 mx-auto rounded-full border-4 border-[#d8bd80] border-t-transparent animate-spin\" />\n                <div className=\"text-sm text-neutral-600\">Cargando informaci├│n del env├¡o...</div>\n              </div>\n            </div>\n          )}\n\n          {!isLoading && ok && <ResumenTracking data={d} guia={guia} />}\n\n          {!isLoading && !ok && (\n            <div className=\"max-w-2xl mx-auto space-y-3\">\n              <div className=\"rounded-2xl border-2 border-rose-200 bg-rose-50 p-5 text-rose-900\">\n                <div className=\"text-base font-semibold mb-1.5\">No fue posible obtener el estado</div>\n                <div className=\"text-sm opacity-80\">Por favor, verifica el n├║mero de gu├¡a o intenta m├ís tarde.</div>\n              </div>\n              {data?.error && (\n                <pre className=\"overflow-x-auto rounded-2xl bg-neutral-100 p-3.5 text-xs text-neutral-700 border\">\n                  {JSON.stringify({ error: data?.error, detail: data?.detail }, null, 2)}\n                </pre>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n/* Dise├▒o compacto con espaciados reducidos y grid de 2 columnas en la secci├│n de destinatario */\nfunction ResumenTracking({ data, guia }: { data: any; guia: string }) {\n  const destinatario = data?.receiver || data?.destinatario || {}\n  const carrier = data?.carrier || data?.transportadora || {}\n  const valorCobrar = data?.price || data?.valor || data?.valorCobrar || 0\n  const timeline: Array<{ label: string; at?: string; done?: boolean }> = data?.timeline ||\n    data?.historial || [\n      { label: \"Recolecci├│n\", done: !!data },\n      { label: \"Recogido\", done: !!data },\n      { label: \"En transporte\", done: !!data?.inTransit },\n      { label: \"En ciudad\", done: !!data?.inCity },\n      { label: \"Distribuci├│n\", done: !!data?.inDistribution },\n      { label: \"Entregado\", done: !!data?.delivered },\n    ]\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n      {/* Columna izquierda: Informaci├│n del destinatario y progreso */}\n      <div className=\"space-y-4\">\n        <div className=\"rounded-2xl border-2 border-[#d8bd80]/30 bg-gradient-to-br from-white to-[#fdfbf7] p-4 shadow-lg\">\n          <div className=\"flex items-center gap-2.5 mb-4\">\n            <div className=\"h-10 w-10 rounded-xl bg-gradient-to-br from-[#d8bd80] to-[#c9b074] shadow-md grid place-items-center text-lg\">\n              ­ƒæñ\n            </div>\n            <div>\n              <div className=\"text-[10px] font-medium text-[#6b5728]/70 uppercase tracking-wider\">Destinatario</div>\n              <div className=\"text-base font-bold text-[#6b5728]\">{destinatario?.name || \"Sin informaci├│n\"}</div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-3\">\n            <InfoField icon=\"­ƒôì\" label=\"Direcci├│n\" value={destinatario?.address} />\n            <InfoField icon=\"­ƒÜÜ\" label=\"Transportadora\" value={carrier?.name || \"No especificada\"} />\n            <InfoField icon=\"­ƒÅÖ´©Å\" label=\"Ciudad\" value={destinatario?.city} />\n            <InfoField\n              icon=\"­ƒÆ░\"\n              label=\"Valor a cobrar\"\n              value={valorCobrar ? `$${Number(valorCobrar).toLocaleString(\"es-CO\")}` : \"$0\"}\n              highlight\n            />\n            <InfoField icon=\"­ƒô▒\" label=\"Tel├®fono\" value={destinatario?.phone} />\n          </div>\n        </div>\n\n        <div className=\"rounded-2xl border-2 border-[#d8bd80]/30 bg-white p-4 shadow-lg\">\n          <div className=\"mb-4 flex items-center gap-2.5\">\n            <div className=\"h-9 w-9 rounded-xl bg-gradient-to-br from-[#d8bd80] to-[#c9b074] shadow grid place-items-center text-base\">\n              ­ƒôè\n            </div>\n            <div className=\"text-base font-bold text-[#6b5728]\">Estado del Env├¡o</div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between gap-1\">\n              {timeline.map((t, i) => (\n                <div key={i} className=\"flex-1 text-center\">\n                  <div\n                    className={`h-8 rounded-lg flex items-center justify-center text-[10px] font-semibold transition-all ${\n                      t.done\n                        ? \"bg-gradient-to-br from-[#d8bd80] to-[#c9b074] text-white shadow-sm\"\n                        : \"bg-neutral-200 text-neutral-500\"\n                    }`}\n                  >\n                    {t.done ? \"Ô£ô\" : \"\"}\n                  </div>\n                  <div className={`text-[9px] mt-1 font-medium ${t.done ? \"text-[#6b5728]\" : \"text-neutral-400\"}`}>\n                    {t.label}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"rounded-2xl border-2 border-[#d8bd80]/30 bg-white shadow-lg overflow-hidden\">\n        <div className=\"bg-gradient-to-r from-[#d8bd80]/10 to-[#c9b074]/10 px-4 py-2.5 border-b border-[#d8bd80]/20\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-xs font-semibold text-[#6b5728]\">Vista MiPaquete (embebida)</div>\n            <a\n              href={`https://mipaquete.com/rastreo/${guia}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-[10px] text-[#6b5728] hover:underline font-medium\"\n            >\n              Abrir en pesta├▒a Ôåù\n            </a>\n          </div>\n        </div>\n        <div className=\"h-[480px] overflow-auto\">\n          <iframe\n            src={`https://mipaquete.com/rastreo/${guia}`}\n            className=\"w-full h-full border-0\"\n            title=\"Vista MiPaquete\"\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\n/* Componente InfoField m├ís compacto con padding y fuentes reducidas */\nfunction InfoField({\n  icon,\n  label,\n  value,\n  highlight,\n}: {\n  icon: string\n  label: string\n  value?: string\n  highlight?: boolean\n}) {\n  return (\n    <div\n      className={`rounded-xl p-2.5 transition-all ${\n        highlight\n          ? \"bg-gradient-to-br from-[#d8bd80]/20 to-[#c9b074]/10 border-2 border-[#d8bd80]/40\"\n          : \"bg-neutral-50 border border-neutral-200\"\n      }`}\n    >\n      <div className=\"flex items-start gap-2\">\n        <div className=\"text-base mt-0.5\">{icon}</div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"text-[9px] font-medium text-neutral-600 uppercase tracking-wide mb-0.5\">{label}</div>\n          <div\n            className={`text-xs font-semibold break-words ${highlight ? \"text-[#6b5728] text-sm\" : \"text-neutral-800\"}`}\n          >\n            {value || \"No disponible\"}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:block",
        "target": "~/app/(dashboard)/entregas/components/TrackingDialog.tsx"
      },
      {
        "path": "app/(dashboard)/entregas/page.tsx",
        "content": "\"use client\"\nimport type React from \"react\"\nimport { useMemo, useState } from \"react\"\nimport axios from \"axios\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Truck, CheckCircle2, Clock3, AlertTriangle, PackageSearch, MapPin, RotateCcw, Route } from \"lucide-react\"\nimport TrackingDialog from \"./components/TrackingDialog\"\n\n/* =========================================================\n   MiPaquete ÔÇö Tracking (mueve estos secretos a backend si puedes)\n   ========================================================= */\nconst MIPAQUETE_TRACKING_URL = \"https://api.mipaquete.com/v2/tracking\"\nconst SESSION_TRACKER = \"a0c96ea6-b22d-4fb7-a278-850678d5429c\"\nconst API_KEY =\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzExOWRjNDMzNjk2M2YzMzBlYjFjZTYiLCJuYW1lIjoiQ29tZXJjaWFsaXphZG9yYSIsInN1cm5hbWUiOiJnYWxlMThrIiwiZW1haWwiOiJnYWxsZW9yb2xhbWluYWRvMThrQGdtYWlsLmNvbSIsImNlbGxQaG9uZSI6IjMwMTY4NDUwMjYiLCJjcmVhdGVkQXQiOiIyMDI0LTEwLTE3VDIzOjI5OjA4LjAxNFoiLCJkYXRlIjoiMjAyNS0wOC0xOSAxMDoyMDoyNCIsImlhdCI6MTc1NTYxNjgyNH0.LHBLIsBCQlNM6WlnB514dN00dR7LcPjIQcYt1B62hEA\"\n\nconst mipaquete = axios.create({\n  baseURL: MIPAQUETE_TRACKING_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"session-tracker\": SESSION_TRACKER,\n    apikey: API_KEY,\n  },\n})\n\nasync function getTracking(code: string) {\n  try {\n    const r = await mipaquete.get(`/${encodeURIComponent(code)}`)\n    return r.data\n  } catch {\n    const r = await mipaquete.get(\"\", { params: { code } })\n    return r.data\n  }\n}\n\n/* =========================================================\n   UI ÔÇö Luxury Clean con 30% de dorado\n   ========================================================= */\nconst GOLD = \"#D8BD80\" // champagne\nconst GLASS = \"bg-white/95 backdrop-blur-md\"\n\n/** KPIs con elevaci├│n suave y dorado al 45% + relleno luxury */\nfunction GradientCard({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"group rounded-[24px] p-[1px] bg-gradient-to-b from-white via-[#D8BD80]/45 to-white\">\n      <div\n        className={`rounded-[23px] ${GLASS} border border-white/70\n        border-l-4 border-l-[#D8BD80]\n        shadow-[0_12px_36px_rgba(0,0,0,.06)]\n        transition-all duration-300 ease-out\n        group-hover:-translate-y-[2px] group-hover:shadow-[0_18px_48px_rgba(0,0,0,.10)]`}\n      >\n        {children}\n      </div>\n    </div>\n  )\n}\n\n/** Filtros y tabla: FIJOS (sin elevaci├│n) */\nfunction FixedCard({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"rounded-[24px] p-[1px] bg-gradient-to-b from-white via-[#D8BD80]/45 to-white\">\n      <div className={`rounded-[23px] ${GLASS} border border-white/70 shadow-[0_10px_28px_rgba(0,0,0,.05)]`}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\ntype Estado = \"En tr├ínsito\" | \"Despachado\" | \"Entregado\" | \"Retrasado\" | \"Devoluci├│n\"\n\ntype Shipment = {\n  envioId: string\n  pedidoId: string\n  factura?: string\n  cliente: string\n  ciudad: string\n  transportadora: string\n  guia: string\n  estado: Estado\n  progreso: number\n  despacho: string\n  eta: string // fecha aprox. de entrega\n  lastUpdate: string\n}\n\nfunction EstadoBadge({ estado }: { estado: Estado }) {\n  const map: Record<Estado, string> = {\n    \"En tr├ínsito\": \"bg-blue-100 text-blue-900\",\n    Despachado: \"bg-neutral-100 text-neutral-900\",\n    Entregado: \"bg-emerald-100 text-emerald-900\",\n    Retrasado: \"bg-amber-100 text-amber-900\",\n    Devoluci├│n: \"bg-rose-100 text-rose-900\",\n  }\n  return <Badge className={`rounded-full border-0 ${map[estado]}`}>{estado}</Badge>\n}\n\nfunction ProgressBar({ value }: { value: number }) {\n  return (\n    <div className=\"w-full h-2 rounded-full bg-neutral-200/80 overflow-hidden\">\n      <div\n        className=\"h-full rounded-full\"\n        style={{\n          width: `${value}%`,\n          background: `linear-gradient(90deg, ${GOLD}, rgba(184,167,116,.8))`,\n        }}\n      />\n    </div>\n  )\n}\n\n/* =========================================================\n   MOCK DATA\n   ========================================================= */\nconst MOCK_SHIPMENTS: Shipment[] = [\n  {\n    envioId: \"ENV-2025-021\",\n    pedidoId: \"ORD-2025-10-001\",\n    factura: \"FAC-2025-0002\",\n    cliente: \"Carlos Rodr├¡guez\",\n    ciudad: \"Bogot├í\",\n    transportadora: \"COORDINADORA\",\n    guia: \"58048077984\",\n    estado: \"En tr├ínsito\",\n    progreso: 70,\n    despacho: \"2025-10-07\",\n    eta: \"2025-10-09\",\n    lastUpdate: \"hace 2 h\",\n  },\n  {\n    envioId: \"ENV-2025-022\",\n    pedidoId: \"ORD-2025-10-002\",\n    factura: \"FAC-2025-0001\",\n    cliente: \"Mar├¡a Gonz├ílez\",\n    ciudad: \"Medell├¡n\",\n    transportadora: \"SERVIENTREGA\",\n    guia: \"1714815\",\n    estado: \"Despachado\",\n    progreso: 35,\n    despacho: \"2025-10-07\",\n    eta: \"2025-10-10\",\n    lastUpdate: \"hace 4 h\",\n  },\n  {\n    envioId: \"ENV-2025-023\",\n    pedidoId: \"ORD-2025-10-003\",\n    cliente: \"Ana Mart├¡nez\",\n    ciudad: \"Cali\",\n    transportadora: \"ENVIA\",\n    guia: \"1714829\",\n    estado: \"Retrasado\",\n    progreso: 55,\n    despacho: \"2025-10-05\",\n    eta: \"2025-10-08\",\n    lastUpdate: \"hace 1 h\",\n  },\n  {\n    envioId: \"ENV-2025-024\",\n    pedidoId: \"ORD-2025-10-004\",\n    cliente: \"Luis Hern├índez\",\n    ciudad: \"Barranquilla\",\n    transportadora: \"SERVIENTREGA\",\n    guia: \"1714821\",\n    estado: \"Entregado\",\n    progreso: 100,\n    despacho: \"2025-10-04\",\n    eta: \"2025-10-06\",\n    lastUpdate: \"hace 1 d\",\n  },\n]\n\n/* =========================================================\n   PAGE\n   ========================================================= */\nexport default function EntregasPage() {\n  const [busqueda, setBusqueda] = useState(\"\")\n  const [estadoSel, setEstadoSel] = useState<string>(\"TODOS\")\n  const [transSel, setTransSel] = useState<string>(\"TODAS\")\n  const [trace, setTrace] = useState({ open: false, guia: \"\" })\n\n  const resumen = useMemo(\n    () => ({\n      enCurso: 18,\n      entregados: 126,\n      retrasos: 3,\n      promDias: 2.8,\n      aTiempoPct: 92,\n      devoluciones: 1,\n    }),\n    [],\n  )\n\n  const enviosFiltrados = useMemo(() => {\n    return MOCK_SHIPMENTS.filter((e) => {\n      const q = e.envioId + e.pedidoId + (e.factura ?? \"\") + e.cliente + e.ciudad + e.transportadora + e.guia\n      const okSearch = q.toLowerCase().includes(busqueda.toLowerCase())\n      const okEstado = estadoSel === \"TODOS\" ? true : e.estado.toLowerCase().includes(estadoSel.toLowerCase())\n      const okTrans = transSel === \"TODAS\" ? true : e.transportadora.toLowerCase().includes(transSel.toLowerCase())\n      return okSearch && okEstado && okTrans\n    })\n  }, [busqueda, estadoSel, transSel])\n\n  return (\n    <div className=\"min-h-screen bg-white text-[#0B0B0C]\">\n      {/* Header */}\n      <section className=\"px-6 lg:px-10 pt-10\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-[32px] md:text-[40px] font-semibold tracking-tight leading-tight\">\n              <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-[#111] via-[#111] to-[rgba(216,189,128,0.8)]\">\n                ENTREGAS\n              </span>\n            </h1>\n            <p className=\"text-sm text-neutral-500 mt-1\">SEGUIMIENTO DE ENVIOS</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" className=\"rounded-full border-neutral-200 bg-transparent\">\n              Exportar CSV\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* KPIs */}\n      <section className=\"px-6 lg:px-10 mt-8 grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-6 gap-6\">\n        {[\n          {\n            icon: <Truck className=\"w-4 h-4\" />,\n            label: \"En curso\",\n            value: resumen.enCurso,\n            sub: \"En tr├ínsito / despachados\",\n          },\n          {\n            icon: <CheckCircle2 className=\"w-4 h-4\" />,\n            label: \"Entregados\",\n            value: resumen.entregados,\n            sub: \"Acumulado del mes\",\n          },\n          {\n            icon: <AlertTriangle className=\"w-4 h-4\" />,\n            label: \"Retrasos\",\n            value: resumen.retrasos,\n            sub: \"Atenci├│n inmediata\",\n          },\n          {\n            icon: <Clock3 className=\"w-4 h-4\" />,\n            label: \"Promedio de entrega\",\n            value: `${resumen.promDias} d`,\n            sub: \"De despacho a entrega\",\n          },\n          {\n            icon: <CheckCircle2 className=\"w-4 h-4\" />,\n            label: \"A tiempo\",\n            value: `${resumen.aTiempoPct}%`,\n            sub: \"Entregas dentro del ETA\",\n          },\n          {\n            icon: <RotateCcw className=\"w-4 h-4\" />,\n            label: \"Devoluciones\",\n            value: resumen.devoluciones,\n            sub: \"Este mes\",\n          },\n        ].map((k, i) => (\n          <GradientCard key={i}>\n            <div className=\"p-6\">\n              <div className=\"text-sm text-neutral-500 flex items-center gap-2\">\n                {k.icon} {k.label}\n              </div>\n              <div className=\"mt-2 text-4xl font-semibold\">{k.value}</div>\n              <p className=\"text-xs text-neutral-500 mt-1\">{k.sub}</p>\n            </div>\n          </GradientCard>\n        ))}\n      </section>\n\n      {/* Filtros ÔÇö FIJO */}\n      <section className=\"px-6 lg:px-10 mt-8\">\n        <FixedCard>\n          <div className=\"p-4 grid grid-cols-1 md:grid-cols-4 gap-4 items-center\">\n            <div className=\"flex items-center gap-2 md:col-span-2\">\n              <PackageSearch className=\"w-4 h-4 text-neutral-400\" />\n              <Input\n                placeholder=\"Buscar por cliente, ciudad, gu├¡a o pedidoÔÇª\"\n                className=\"rounded-full\"\n                value={busqueda}\n                onChange={(e) => setBusqueda(e.target.value)}\n              />\n            </div>\n            <Select onValueChange={setEstadoSel}>\n              <SelectTrigger className=\"rounded-full\">\n                <SelectValue placeholder=\"Estado\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"TODOS\">Todos</SelectItem>\n                <SelectItem value=\"DESPACHADO\">Despachado</SelectItem>\n                <SelectItem value=\"TR├üNSITO\">En tr├ínsito</SelectItem>\n                <SelectItem value=\"ENTREGADO\">Entregado</SelectItem>\n                <SelectItem value=\"RETRASADO\">Retrasado</SelectItem>\n                <SelectItem value=\"DEVOLUCI├ôN\">Devoluci├│n</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select onValueChange={setTransSel}>\n              <SelectTrigger className=\"rounded-full\">\n                <SelectValue placeholder=\"Transportadora\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"TODAS\">Todas</SelectItem>\n                <SelectItem value=\"SERVIENTREGA\">SERVIENTREGA</SelectItem>\n                <SelectItem value=\"INTERRAPIDISIMO\">INTERRAPIDISIMO</SelectItem>\n                <SelectItem value=\"ENVIA\">ENVIA</SelectItem>\n                <SelectItem value=\"COORDINADORA\">COORDINADORA</SelectItem>\n                <SelectItem value=\"TCC\">TCC</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </FixedCard>\n      </section>\n\n      {/* Tabla ÔÇö FIJA */}\n      <section className=\"px-6 lg:px-10 mt-6 pb-14\">\n        <FixedCard>\n          <div className=\"p-0 overflow-hidden\">\n            <table className=\"w-full text-sm\">\n              <thead className=\"bg-neutral-50\">\n                <tr>\n                  <th className=\"text-center px-4 py-3\">Env├¡o</th>\n                  <th className=\"text-center px-4 py-3\">Pedido / Factura</th>\n                  <th className=\"text-center px-4 py-3\">Cliente</th>\n                  <th className=\"text-center px-4 py-3\">Ciudad</th>\n                  <th className=\"text-center px-4 py-3\">Transportadora</th>\n                  <th className=\"text-center px-4 py-3\">Gu├¡a</th>\n                  <th className=\"text-center px-4 py-3\">Estado</th>\n                  <th className=\"text-center px-4 py-3\">Progreso</th>\n                  <th className=\"text-center px-4 py-3\">Despacho</th>\n                  <th className=\"text-center px-4 py-3\">Fecha aproximada de entrega</th>\n                  <th className=\"text-center px-4 py-3\">├Ültima actualizaci├│n</th>\n                  <th className=\"text-center px-4 py-3\">Acciones</th>\n                </tr>\n              </thead>\n              <tbody>\n                {enviosFiltrados.map((e, idx) => (\n                  <tr key={e.envioId} className={idx % 2 ? \"bg-neutral-50/50\" : \"bg-white\"}>\n                    <td className=\"px-4 py-3 font-medium text-center\">{e.envioId}</td>\n                    <td className=\"px-4 py-3 text-neutral-600 text-center\">\n                      {e.pedidoId}\n                      {e.factura ? ` ÔÇó ${e.factura}` : \"\"}\n                    </td>\n                    <td className=\"px-4 py-3 text-center\">{e.cliente}</td>\n                    <td className=\"px-4 py-3 text-center\">\n                      <div className=\"flex items-center gap-1 justify-center\">\n                        <MapPin className=\"w-3 h-3\" /> {e.ciudad}\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-3 text-center\">{e.transportadora}</td>\n                    <td className=\"px-4 py-3 tabular-nums text-center\">{e.guia}</td>\n                    <td className=\"px-4 py-3 text-center\">\n                      <div className=\"flex justify-center\">\n                        <EstadoBadge estado={e.estado} />\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-3 w-[160px]\">\n                      <ProgressBar value={e.progreso} />\n                    </td>\n                    <td className=\"px-4 py-3 text-center\">{e.despacho}</td>\n                    <td className=\"px-4 py-3 text-center\">{e.eta}</td>\n                    <td className=\"px-4 py-3 text-neutral-500 text-center\">{e.lastUpdate}</td>\n                    <td className=\"px-4 py-3 text-center\">\n                      <div className=\"flex justify-center\">\n                        <button\n                          onClick={() => setTrace({ open: true, guia: e.guia })}\n                          className=\"inline-flex items-center gap-2 rounded-full px-4 h-9\n                          border border-[rgba(216,189,128,.6)] text-[#0B0B0C]\n                          bg-white hover:bg-[rgba(216,189,128,.08)]\n                          shadow-[0_2px_10px_rgba(0,0,0,.04)] transition\"\n                          title=\"Ver tracking\"\n                        >\n                          <Route className=\"w-4 h-4\" />\n                          Ver tracking\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n\n            {/* Footer paginaci├│n (demo) */}\n            <div className=\"flex items-center justify-between px-4 py-4 border-t border-neutral-100 text-sm text-neutral-500\">\n              <span>Mostrando {enviosFiltrados.length} env├¡os</span>\n              <div className=\"inline-flex items-center gap-2\">\n                <Button variant=\"outline\" className=\"rounded-full h-8 px-3 bg-transparent\">\n                  Anterior\n                </Button>\n                <Button variant=\"outline\" className=\"rounded-full h-8 px-3 bg-transparent\">\n                  Siguiente\n                </Button>\n              </div>\n            </div>\n          </div>\n        </FixedCard>\n      </section>\n\n      {/* Modal de Tracking ÔÇö muestra timeline si la API trae eventos; si no, JSON */}\n      {trace.open && (\n        <TrackingDialog guia={trace.guia} open={trace.open} onClose={() => setTrace({ open: false, guia: \"\" })} />\n      )}\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/(dashboard)/entregas/page.tsx"
      },
      {
        "path": "app/(dashboard)/facturacion/[numero]/pos/page.tsx",
        "content": "\"use client\"\nimport useSWR from \"swr\"\nimport { useParams } from \"next/navigation\"\n\nconst fetcher = (u: string) => fetch(u).then((r) => r.json())\n\nexport default function FacturaPOS() {\n  const { numero } = useParams<{ numero: string }>()\n  const { data } = useSWR<{ ok: boolean; facturas: any[] }>(\"/api/facturacion/list\", fetcher)\n  const fac = data?.facturas?.find((f) => f.numero === numero)\n\n  if (!fac) return <div className=\"p-6 text-sm\">Cargando factura...</div>\n\n  return (\n    <div className=\"w-[304px] mx-auto text-[11px] text-black\">\n      <style>{`\n        @page { size: 80mm auto; margin: 4mm; }\n        @media print { .no-print { display:none !important; } body{background:#fff;} }\n        .hr { border-top:1px dashed #000; margin:6px 0; }\n        .flex { display:flex; justify-content:space-between; }\n      `}</style>\n\n      <div className=\"text-center\">\n        <div className=\"text-[18px] font-bold\">GALLE</div>\n        <div>COMERCIALIZADORA GALLE18K ORO LAMINADO Y ACCESORIOS SAS</div>\n        <div className=\"hr\" />\n        <div>\n          <b>FACTURA:</b> {fac.numero}\n        </div>\n        <div>\n          <b>FECHA:</b> {fac.emision}\n        </div>\n        <div>\n          <b>M├ëTODO:</b> {fac.metodo} ÔÇó <b>ESTADO:</b> {fac.estado}\n        </div>\n        <div className=\"hr\" />\n      </div>\n\n      <div>\n        <div>\n          <b>CLIENTE:</b> {fac.cliente.nombre}\n        </div>\n        {fac.cliente.nit && (\n          <div>\n            <b>NIT:</b> {fac.cliente.nit}\n          </div>\n        )}\n        {fac.cliente.ciudad && (\n          <div>\n            <b>CIUDAD:</b> {fac.cliente.ciudad}\n          </div>\n        )}\n        {fac.cliente.direccion && (\n          <div>\n            <b>DIR:</b> {fac.cliente.direccion}\n          </div>\n        )}\n        <div className=\"hr\" />\n      </div>\n\n      <div>\n        <div className=\"flex\">\n          <b>REF</b>\n          <b>TOTAL</b>\n        </div>\n        {fac.items.map((it: any, i: number) => (\n          <div key={i}>\n            <div>{it.descripcion}</div>\n            <div className=\"flex\">\n              <span>\n                x{it.und} ÔÇó IVA {it.ivaPct}%\n              </span>\n              <span>$ {it.precioNeto.toLocaleString(\"es-CO\")}</span>\n            </div>\n          </div>\n        ))}\n        <div className=\"hr\" />\n        <div className=\"flex\">\n          <span>SUBTOTAL</span>\n          <b>$ {fac.subtotal.toLocaleString(\"es-CO\")}</b>\n        </div>\n        <div className=\"flex\">\n          <span>IVA</span>\n          <b>$ {fac.iva.toLocaleString(\"es-CO\")}</b>\n        </div>\n        <div className=\"flex text-[14px]\">\n          <span>\n            <b>TOTAL</b>\n          </span>\n          <b>$ {fac.total.toLocaleString(\"es-CO\")}</b>\n        </div>\n        <div className=\"hr\" />\n      </div>\n\n      <div className=\"text-center\">┬íGracias por su compra!</div>\n\n      <div className=\"no-print mt-4 flex gap-2\">\n        <button onClick={() => window.print()} className=\"w-full h-9 rounded bg-black text-white\">\n          Imprimir\n        </button>\n        <a href={`/facturacion/${numero}`} className=\"w-full h-9 rounded border grid place-items-center\">\n          Volver\n        </a>\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/(dashboard)/facturacion/[numero]/pos/page.tsx"
      },
      {
        "path": "app/(dashboard)/facturacion/page.tsx",
        "content": "\"use client\"\nimport useSWR from \"swr\"\nimport { useState } from \"react\"\n\nconst fetcher = (u: string) => fetch(u).then((r) => r.json())\nconst GOLD = \"rgba(216,189,128,.3)\"\n\nexport default function FacturacionPage() {\n  const { data, mutate } = useSWR<{\n    ok: boolean\n    facturas: any[]\n    devoluciones: any[]\n  }>(\"/api/facturacion/list\", fetcher)\n  const facturas = data?.facturas ?? []\n  const [sending, setSending] = useState(false)\n\n  async function crearDemo() {\n    setSending(true)\n    await fetch(\"/api/facturacion/create\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        numero: `FAC-2025-${String(facturas.length + 1).padStart(4, \"0\")}`,\n        cliente: {\n          nombre: \"Patricia Silva\",\n          ciudad: \"Cali\",\n          telefono: \"3001234567\",\n          email: \"patricia@demo.com\",\n        },\n        guia: \"1715000\",\n        transportadora: \"Servientrega\",\n        emision: new Date().toISOString().slice(0, 10),\n        vencimiento: new Date().toISOString().slice(0, 10),\n        subtotal: 320000,\n        iva: 60800,\n        total: 380800,\n        estado: \"Pendiente Pago\",\n        metodo: \"Contraentrega\",\n        items: [\n          {\n            ref: \"1\",\n            descripcion: \"Vestido Midi Floral\",\n            und: 1,\n            ivaPct: 19,\n            precioBase: 320000,\n            precioNeto: 380800,\n          },\n        ],\n      }),\n    })\n    await mutate()\n    setSending(false)\n  }\n\n  return (\n    <div className=\"px-6 py-8\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h1 className=\"text-3xl font-semibold\">\n          <span className=\"bg-gradient-to-r from-[#111] via-[#111] to-[rgba(216,189,128,0.9)] bg-clip-text text-transparent\">\n            Facturaci├│n\n          </span>\n        </h1>\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => mutate()}\n            className=\"rounded-full h-9 px-4 border border-[#D8BD80]/30 hover:border-[#D8BD80]/60 transition-colors\"\n          >\n            Actualizar\n          </button>\n          <button\n            onClick={crearDemo}\n            disabled={sending}\n            className=\"rounded-full h-9 px-4 border border-[#D8BD80]/30 hover:border-[#D8BD80]/60 transition-colors disabled:opacity-50\"\n          >\n            Nueva Factura\n          </button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        {[\"TOTAL FACTURAS\", \"AGOSTO 2025\", \"SEPTIEMBRE 2025\", \"OCTUBRE 2025\"].map((k, i) => (\n          <div\n            key={i}\n            className=\"rounded-2xl border border-[#D8BD80]/45 bg-white/95 shadow-[0_12px_36px_rgba(0,0,0,.06)] p-4 border-l-4 border-l-[#D8BD80]\"\n            style={{\n              backgroundImage: `linear-gradient(to bottom,#fff,${GOLD},#fff)`,\n            }}\n          >\n            <div className=\"text-xs text-neutral-500\">{k}</div>\n            <div className=\"text-2xl font-semibold\">$0</div>\n            <div className=\"text-xs text-neutral-400\">Facturas generadas</div>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"rounded-2xl border border-[#D8BD80]/45 bg-white/95 shadow-[0_10px_28px_rgba(0,0,0,.05)] overflow-hidden\">\n        <table className=\"w-full text-sm\">\n          <thead className=\"bg-neutral-50\">\n            <tr>\n              <th className=\"px-4 py-3 text-left\">N├ÜMERO</th>\n              <th className=\"px-4 py-3 text-left\">CLIENTE</th>\n              <th className=\"px-4 py-3 text-left\">TEL├ëFONO</th>\n              <th className=\"px-4 py-3 text-left\">GU├ìA</th>\n              <th className=\"px-4 py-3 text-left\">TRANSP.</th>\n              <th className=\"px-4 py-3 text-left\">EMISI├ôN</th>\n              <th className=\"px-4 py-3 text-left\">TOTAL</th>\n              <th className=\"px-4 py-3 text-left\">ESTADO</th>\n              <th className=\"px-4 py-3 text-left\">M├ëTODO</th>\n              <th className=\"px-4 py-3 text-left\">ACCIONES</th>\n            </tr>\n          </thead>\n          <tbody>\n            {facturas.map((f) => (\n              <tr key={f.numero} className=\"odd:bg-white even:bg-neutral-50/60\">\n                <td className=\"px-4 py-3\">\n                  <a className=\"underline\" href={`/facturacion/${f.numero}/pos`} target=\"_blank\" rel=\"noreferrer\">\n                    {f.numero}\n                  </a>\n                </td>\n                <td className=\"px-4 py-3\">{f.cliente?.nombre}</td>\n                <td className=\"px-4 py-3\">{f.cliente?.telefono ?? \"ÔÇö\"}</td>\n                <td className=\"px-4 py-3\">{f.guia}</td>\n                <td className=\"px-4 py-3\">{f.transportadora}</td>\n                <td className=\"px-4 py-3\">{f.emision}</td>\n                <td className=\"px-4 py-3\">$ {f.total.toLocaleString(\"es-CO\")}</td>\n                <td className=\"px-4 py-3\">\n                  <span\n                    className={`px-3 py-1 rounded-full text-xs ${\n                      f.estado === \"Pagado\"\n                        ? \"bg-emerald-100 text-emerald-900\"\n                        : f.estado === \"Devuelto\"\n                          ? \"bg-rose-100 text-rose-900\"\n                          : \"bg-amber-100 text-amber-900\"\n                    }`}\n                  >\n                    {f.estado}\n                  </span>\n                </td>\n                <td className=\"px-4 py-3\">{f.metodo}</td>\n                <td className=\"px-4 py-3\">\n                  <div className=\"flex gap-2\">\n                    <button\n                      onClick={async () => {\n                        await fetch(\"/api/facturacion/sync\", {\n                          method: \"POST\",\n                          headers: { \"Content-Type\": \"application/json\" },\n                          body: JSON.stringify({\n                            factura: f.numero,\n                            estado: \"Pagado\",\n                            metodo: f.metodo,\n                          }),\n                        })\n                        mutate()\n                      }}\n                      className=\"h-8 px-3 rounded-full border border-[#D8BD80]/30 hover:border-[#D8BD80]/60 transition-colors text-xs\"\n                    >\n                      Marcar pagado\n                    </button>\n\n                    <button\n                      onClick={async () => {\n                        await fetch(\"/api/facturacion/sync\", {\n                          method: \"POST\",\n                          headers: { \"Content-Type\": \"application/json\" },\n                          body: JSON.stringify({\n                            factura: f.numero,\n                            estado: \"Devuelto\",\n                            motivo: \"Cliente rechaz├│\",\n                          }),\n                        })\n                        mutate()\n                      }}\n                      className=\"h-8 px-3 rounded-full border border-[#D8BD80]/30 hover:border-[#D8BD80]/60 transition-colors text-xs\"\n                    >\n                      Devolver\n                    </button>\n\n                    <a\n                      href={`/facturacion/${f.numero}/pos`}\n                      target=\"_blank\"\n                      className=\"h-8 px-3 rounded-full border border-[#D8BD80]/30 hover:border-[#D8BD80]/60 transition-colors grid place-items-center text-xs\"\n                      rel=\"noreferrer\"\n                    >\n                      Imprimir POS\n                    </a>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <div className=\"px-4 py-3 text-sm text-neutral-500 border-t\">Mostrando {facturas.length} facturas</div>\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/(dashboard)/facturacion/page.tsx"
      },
      {
        "path": "app/(dashboard)/geografia/loading.tsx",
        "content": "export default function GeografiaLoading() {\n  return (\n    <div className=\"min-h-screen bg-[#0B0B0C] p-6\">\n      <div className=\"mb-8 animate-pulse\">\n        <div className=\"h-10 w-64 rounded-lg bg-[#1A1A1C]\" />\n        <div className=\"mt-2 h-4 w-96 rounded bg-[#1A1A1C]\" />\n      </div>\n      <div className=\"grid grid-cols-6 gap-4\">\n        {[...Array(6)].map((_, i) => (\n          <div key={i} className=\"h-32 animate-pulse rounded-3xl bg-[#1A1A1C]\" />\n        ))}\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:block",
        "target": "~/app/(dashboard)/geografia/loading.tsx"
      },
      {
        "path": "app/(dashboard)/geografia/page.tsx",
        "content": "\"use client\"\n\nimport { useState, useMemo, useCallback, useEffect } from \"react\"\nimport { motion } from \"framer-motion\"\nimport {\n  MapPin,\n  TrendingUp,\n  Users,\n  DollarSign,\n  Download,\n  Printer,\n  Share2,\n  X,\n  Award,\n  ShoppingBag,\n  Loader2,\n} from \"lucide-react\"\nimport {\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport dynamic from \"next/dynamic\"\n\nconst SalesMap = dynamic(() => import(\"@/components/SalesMap\"), {\n  ssr: false,\n  loading: () => (\n    <div className=\"flex h-96 items-center justify-center rounded-2xl border-2 border-dashed border-gray-300 bg-gray-50\">\n      <div className=\"text-center\">\n        <div className=\"mx-auto h-16 w-16 animate-pulse rounded-full bg-gray-300\" />\n        <p className=\"mt-4 text-sm text-gray-600\">Cargando mapa...</p>\n      </div>\n    </div>\n  ),\n})\n\n// Types\ntype Order = {\n  id: string\n  date: string\n  city: string\n  product: string\n  amount: number\n  customerId: string\n  payment: \"transferencia\" | \"efectivo\" | \"contraentrega\"\n  subpayment?: \"nequi\" | \"bancolombia\" | \"daviplata\" | \"davivienda\"\n}\n\ntype CityAgg = {\n  city: string\n  sales: number\n  buyers: number\n  avgTicket: number\n  topProduct: string\n  monthly: number[] // 12 meses\n  growth: number // % crecimiento\n  participation: number // % participaci├│n\n  coordinates: [number, number]\n}\n\n// Mock Data\nconst MOCK_CITIES: CityAgg[] = [\n  {\n    city: \"Bogot├í\",\n    sales: 45000000,\n    buyers: 156,\n    avgTicket: 288461,\n    topProduct: \"Collar Oro 18k\",\n    monthly: [\n      3200000, 3500000, 3800000, 4000000, 4200000, 4500000, 4800000, 5000000, 4700000, 4300000, 4100000, 3900000,\n    ],\n    growth: 12.5,\n    participation: 32.5,\n    coordinates: [4.711, -74.0721] as [number, number],\n  },\n  {\n    city: \"Medell├¡n\",\n    sales: 32000000,\n    buyers: 98,\n    avgTicket: 326530,\n    topProduct: \"Anillo Diamante\",\n    monthly: [\n      2400000, 2600000, 2800000, 2900000, 3000000, 3200000, 3400000, 3500000, 3300000, 3100000, 2900000, 2700000,\n    ],\n    growth: 8.3,\n    participation: 23.1,\n    coordinates: [6.2442, -75.5812] as [number, number],\n  },\n  {\n    city: \"Cali\",\n    sales: 18500000,\n    buyers: 67,\n    avgTicket: 276119,\n    topProduct: \"Pulsera Plata\",\n    monthly: [\n      1400000, 1500000, 1600000, 1650000, 1700000, 1800000, 1900000, 1950000, 1850000, 1750000, 1650000, 1550000,\n    ],\n    growth: 5.2,\n    participation: 13.4,\n    coordinates: [3.4516, -76.532] as [number, number],\n  },\n  {\n    city: \"Barranquilla\",\n    sales: 12800000,\n    buyers: 45,\n    avgTicket: 284444,\n    topProduct: \"Aretes Oro\",\n    monthly: [\n      950000, 1000000, 1050000, 1100000, 1150000, 1200000, 1250000, 1300000, 1250000, 1200000, 1150000, 1100000,\n    ],\n    growth: 6.8,\n    participation: 9.2,\n    coordinates: [10.9685, -74.7813] as [number, number],\n  },\n  {\n    city: \"Cartagena\",\n    sales: 9200000,\n    buyers: 34,\n    avgTicket: 270588,\n    topProduct: \"Cadena Oro\",\n    monthly: [700000, 750000, 780000, 800000, 820000, 850000, 880000, 900000, 870000, 840000, 810000, 780000],\n    growth: 4.1,\n    participation: 6.6,\n    coordinates: [10.391, -75.4794] as [number, number],\n  },\n  {\n    city: \"Bucaramanga\",\n    sales: 7500000,\n    buyers: 28,\n    avgTicket: 267857,\n    topProduct: \"Reloj Oro\",\n    monthly: [580000, 600000, 620000, 640000, 660000, 680000, 700000, 720000, 690000, 670000, 650000, 630000],\n    growth: 3.5,\n    participation: 5.4,\n    coordinates: [7.1254, -73.1198] as [number, number],\n  },\n  {\n    city: \"Pereira\",\n    sales: 5800000,\n    buyers: 22,\n    avgTicket: 263636,\n    topProduct: \"Tobillera Plata\",\n    monthly: [450000, 470000, 490000, 500000, 510000, 520000, 540000, 550000, 530000, 510000, 490000, 470000],\n    growth: 2.8,\n    participation: 4.2,\n    coordinates: [4.8133, -75.6961] as [number, number],\n  },\n  {\n    city: \"Santa Marta\",\n    sales: 4200000,\n    buyers: 16,\n    avgTicket: 262500,\n    topProduct: \"Piercing Oro\",\n    monthly: [320000, 340000, 350000, 360000, 370000, 380000, 390000, 400000, 385000, 370000, 355000, 340000],\n    growth: 1.9,\n    participation: 3.0,\n    coordinates: [11.2408, -74.2099] as [number, number],\n  },\n  {\n    city: \"Manizales\",\n    sales: 3100000,\n    buyers: 12,\n    avgTicket: 258333,\n    topProduct: \"Dije Oro\",\n    monthly: [240000, 250000, 260000, 265000, 270000, 275000, 280000, 285000, 275000, 265000, 255000, 245000],\n    growth: 1.2,\n    participation: 2.2,\n    coordinates: [5.0689, -75.5174] as [number, number],\n  },\n  {\n    city: \"C├║cuta\",\n    sales: 2400000,\n    buyers: 9,\n    avgTicket: 266666,\n    topProduct: \"Anillo Plata\",\n    monthly: [180000, 190000, 200000, 205000, 210000, 215000, 220000, 225000, 215000, 205000, 195000, 185000],\n    growth: 0.8,\n    participation: 1.7,\n    coordinates: [7.8939, -72.5078] as [number, number],\n  },\n]\n\nconst MOCK_ORDERS: Order[] = [\n  {\n    id: \"ORD-2025-001\",\n    date: \"2025-01-15\",\n    city: \"Bogot├í\",\n    product: \"Collar Oro 18k\",\n    amount: 1250000,\n    customerId: \"C001\",\n    payment: \"transferencia\",\n    subpayment: \"nequi\",\n  },\n  {\n    id: \"ORD-2025-002\",\n    date: \"2025-01-16\",\n    city: \"Medell├¡n\",\n    product: \"Anillo Diamante\",\n    amount: 2100000,\n    customerId: \"C002\",\n    payment: \"transferencia\",\n    subpayment: \"bancolombia\",\n  },\n  {\n    id: \"ORD-2025-003\",\n    date: \"2025-01-17\",\n    city: \"Cali\",\n    product: \"Pulsera Plata\",\n    amount: 680000,\n    customerId: \"C003\",\n    payment: \"efectivo\",\n  },\n  {\n    id: \"ORD-2025-004\",\n    date: \"2025-01-18\",\n    city: \"Barranquilla\",\n    product: \"Aretes Oro\",\n    amount: 890000,\n    customerId: \"C004\",\n    payment: \"contraentrega\",\n  },\n  {\n    id: \"ORD-2025-005\",\n    date: \"2025-01-19\",\n    city: \"Cartagena\",\n    product: \"Cadena Oro\",\n    amount: 750000,\n    customerId: \"C005\",\n    payment: \"transferencia\",\n    subpayment: \"daviplata\",\n  },\n]\n\nconst MONTHS = [\"Ene\", \"Feb\", \"Mar\", \"Abr\", \"May\", \"Jun\", \"Jul\", \"Ago\", \"Sep\", \"Oct\", \"Nov\", \"Dic\"]\nconst COLORS = [\"#C8A96A\", \"#F4F1EA\", \"#8B7355\", \"#D4AF37\", \"#B8996A\"]\n\nexport default function GeografiaPage() {\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [realCities, setRealCities] = useState<CityAgg[]>([])\n  const [realOrders, setRealOrders] = useState<Order[]>([])\n\n  const [selectedCity, setSelectedCity] = useState<string | null>(null)\n  const [selectedYear, setSelectedYear] = useState(\"2025\")\n  const [selectedCategory, setSelectedCategory] = useState(\"todas\")\n  const [selectedPayment, setSelectedPayment] = useState(\"todos\")\n  const [searchQuery, setSearchQuery] = useState(\"\")\n\n  useEffect(() => {\n    async function fetchGeoData() {\n      try {\n        setLoading(true)\n        setError(null)\n\n        const response = await fetch(\"/api/metrics/geo\")\n        const data = await response.json()\n\n        if (!data.ok) {\n          throw new Error(data.error || \"Error al cargar datos\")\n        }\n\n        if (!data.ranking || data.ranking.length === 0) {\n          console.log(\"[v0] No hay datos reales, usando datos mock\")\n          setRealCities(MOCK_CITIES)\n          setRealOrders(MOCK_ORDERS)\n        } else {\n          const cities: CityAgg[] = data.ranking.map((city: any, idx: number) => ({\n            city: city.ciudad,\n            sales: city.total,\n            buyers: Math.floor(city.ventas / 3),\n            avgTicket: city.ticket_promedio,\n            topProduct: \"Producto\",\n            monthly: Array(12).fill(city.total / 12),\n            growth: idx === 0 ? 12.5 : 5.0,\n            participation: (city.total / data.ranking.reduce((sum: number, c: any) => sum + c.total, 0)) * 100,\n            coordinates: getCityCoordinates(city.ciudad),\n          }))\n\n          setRealCities(cities)\n          setRealOrders([])\n        }\n      } catch (err: any) {\n        console.error(\"[v0] Error fetching geo data:\", err)\n        setError(err.message)\n        setRealCities(MOCK_CITIES)\n        setRealOrders(MOCK_ORDERS)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchGeoData()\n  }, [])\n\n  const CITIES = realCities.length > 0 ? realCities : MOCK_CITIES\n  const ORDERS = realOrders.length > 0 ? realOrders : MOCK_ORDERS\n\n  const totalSales = useMemo(() => CITIES.reduce((sum, city) => sum + city.sales, 0), [CITIES])\n\n  const topCityBySales = useMemo(() => {\n    return CITIES.reduce((max, city) => (city.sales > max.sales ? city : max), CITIES[0])\n  }, [CITIES])\n\n  const topCityByTicket = useMemo(() => {\n    return CITIES.reduce((max, city) => (city.avgTicket > max.avgTicket ? city : max), CITIES[0])\n  }, [CITIES])\n\n  const topCityByBuyers = useMemo(() => {\n    return CITIES.reduce((max, city) => (city.buyers > max.buyers ? city : max), CITIES[0])\n  }, [CITIES])\n\n  const globalAvgTicket = useMemo(() => {\n    const totalBuyers = CITIES.reduce((sum, city) => sum + city.buyers, 0)\n    return totalSales / totalBuyers\n  }, [totalSales, CITIES])\n\n  const currentMonthLeader = useMemo(() => {\n    const currentMonth = new Date().getMonth()\n    return CITIES.reduce(\n      (max, city) => (city.monthly[currentMonth] > (max.monthly[currentMonth] || 0) ? city : max),\n      CITIES[0],\n    )\n  }, [CITIES])\n\n  const monthlyLeaders = useMemo(() => {\n    return MONTHS.map((month, idx) => {\n      const leader = CITIES.reduce((max, city) => (city.monthly[idx] > (max.monthly[idx] || 0) ? city : max), CITIES[0])\n      return { month, city: leader.city, amount: leader.monthly[idx] }\n    })\n  }, [CITIES])\n\n  const monthlyStackData = useMemo(() => {\n    return MONTHS.map((month, idx) => {\n      const data: any = { month }\n      CITIES.slice(0, 5).forEach((city) => {\n        data[city.city] = city.monthly[idx]\n      })\n      return data\n    })\n  }, [CITIES])\n\n  const filteredCities = useMemo(() => {\n    return CITIES.filter((city) => city.city.toLowerCase().includes(searchQuery.toLowerCase()))\n  }, [searchQuery, CITIES])\n\n  const selectedCityData = useMemo(() => {\n    return CITIES.find((city) => city.city === selectedCity)\n  }, [selectedCity, CITIES])\n\n  const selectedCityOrders = useMemo(() => {\n    return ORDERS.filter((order) => order.city === selectedCity)\n  }, [selectedCity, ORDERS])\n\n  const selectedCityMonthlyData = useMemo(() => {\n    if (!selectedCityData) return []\n    return MONTHS.map((month, idx) => ({\n      month,\n      ventas: selectedCityData.monthly[idx],\n    }))\n  }, [selectedCityData])\n\n  const selectedCityProductData = useMemo(() => {\n    if (!selectedCity) return []\n    const cityOrders = ORDERS.filter((o) => o.city === selectedCity)\n    const productMap = new Map<string, number>()\n    cityOrders.forEach((order) => {\n      productMap.set(order.product, (productMap.get(order.product) || 0) + order.amount)\n    })\n    return Array.from(productMap.entries())\n      .map(([name, value]) => ({ name, value }))\n      .sort((a, b) => b.value - a.value)\n      .slice(0, 5)\n  }, [selectedCity])\n\n  const handleCloseDrawer = useCallback(() => setSelectedCity(null), [])\n\n  const getCityCoordinates = (city: string): [number, number] => {\n    switch (city) {\n      case \"Bogot├í\":\n        return [4.711, -74.0721] as [number, number]\n      case \"Medell├¡n\":\n        return [6.2442, -75.5812] as [number, number]\n      case \"Cali\":\n        return [3.4516, -76.532] as [number, number]\n      case \"Barranquilla\":\n        return [10.9685, -74.7813] as [number, number]\n      case \"Cartagena\":\n        return [10.391, -75.4794] as [number, number]\n      case \"Bucaramanga\":\n        return [7.1254, -73.1198] as [number, number]\n      case \"Pereira\":\n        return [4.8133, -75.6961] as [number, number]\n      case \"Santa Marta\":\n        return [11.2408, -74.2099] as [number, number]\n      case \"Manizales\":\n        return [5.0689, -75.5174] as [number, number]\n      case \"C├║cuta\":\n        return [7.8939, -72.5078] as [number, number]\n      default:\n        return [0, 0] as [number, number]\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-white\">\n        <div className=\"text-center\">\n          <Loader2 className=\"mx-auto h-12 w-12 animate-spin text-[#C8A96A]\" />\n          <p className=\"mt-4 text-gray-600\">Cargando datos geogr├íficos...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error && CITIES.length === 0) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-white p-6\">\n        <div className=\"max-w-md text-center\">\n          <div className=\"mx-auto h-16 w-16 rounded-full bg-red-100 flex items-center justify-center\">\n            <X className=\"h-8 w-8 text-red-600\" />\n          </div>\n          <h2 className=\"mt-4 font-serif text-2xl font-bold text-gray-900\">Error al cargar datos</h2>\n          <p className=\"mt-2 text-gray-600\">{error}</p>\n          <p className=\"mt-4 text-sm text-gray-500\">\n            Aseg├║rate de que la tabla 'sales' existe en Supabase y tiene datos.\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white p-6\">\n      {error && CITIES === MOCK_CITIES && (\n        <div className=\"mb-4 rounded-lg bg-yellow-50 border border-yellow-200 p-4\">\n          <p className=\"text-sm text-yellow-800\">\n            ÔÜá´©Å Mostrando datos de ejemplo. Error al conectar con la base de datos: {error}\n          </p>\n        </div>\n      )}\n\n      <div className=\"mb-8\">\n        <div className=\"flex items-start justify-between\">\n          <div>\n            <h1 className=\"font-serif text-4xl font-bold text-gray-900\">Geograf├¡a de Ventas</h1>\n            <p className=\"mt-2 text-gray-600\">An├ílisis de ventas por ubicaci├│n geogr├ífica</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\" className=\"border-gray-200 bg-white text-gray-900 hover:bg-gray-50\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Exportar\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" className=\"border-gray-200 bg-white text-gray-900 hover:bg-gray-50\">\n              <Printer className=\"mr-2 h-4 w-4\" />\n              Imprimir\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" className=\"border-gray-200 bg-white text-gray-900 hover:bg-gray-50\">\n              <Share2 className=\"mr-2 h-4 w-4\" />\n              Compartir\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"mt-6 flex flex-wrap gap-3\">\n          <Select value={selectedYear} onValueChange={setSelectedYear}>\n            <SelectTrigger className=\"w-32 border-gray-200 bg-white text-gray-900\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"2025\">2025</SelectItem>\n              <SelectItem value=\"2024\">2024</SelectItem>\n              <SelectItem value=\"2023\">2023</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n            <SelectTrigger className=\"w-40 border-gray-200 bg-white text-gray-900\">\n              <SelectValue placeholder=\"Categor├¡a\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"todas\">Todas</SelectItem>\n              <SelectItem value=\"joyeria\">Joyer├¡a</SelectItem>\n              <SelectItem value=\"balineria\">Baliner├¡a</SelectItem>\n              <SelectItem value=\"detal\">Detal</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Select value={selectedPayment} onValueChange={setSelectedPayment}>\n            <SelectTrigger className=\"w-48 border-gray-200 bg-white text-gray-900\">\n              <SelectValue placeholder=\"M├®todo de pago\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"todos\">Todos</SelectItem>\n              <SelectItem value=\"transferencia\">Transferencia</SelectItem>\n              <SelectItem value=\"efectivo\">Efectivo</SelectItem>\n              <SelectItem value=\"contraentrega\">Contraentrega</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Input\n            placeholder=\"Buscar ciudad...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-64 border-gray-200 bg-white text-gray-900 placeholder:text-gray-400\"\n          />\n        </div>\n      </div>\n\n      <div className=\"mb-8 grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"rounded-3xl border border-gray-200 bg-white p-4 shadow-sm\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <Award className=\"h-5 w-5 text-[#C8A96A]\" />\n            <span className=\"text-xs text-green-500\">+{topCityBySales.growth}%</span>\n          </div>\n          <p className=\"mt-2 text-[10px] uppercase tracking-wide text-gray-600\">Ciudad Top Ventas</p>\n          <p className=\"mt-1 font-serif text-xl font-bold tabular-nums text-[#C8A96A]\">{topCityBySales.city}</p>\n          <p className=\"text-xs text-gray-600\">${(topCityBySales.sales / 1000000).toFixed(1)}M</p>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.05 }}\n          className=\"rounded-3xl border border-gray-200 bg-white p-4 shadow-sm\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <TrendingUp className=\"h-5 w-5 text-[#C8A96A]\" />\n            <span className=\"text-xs text-green-500\">+{topCityByTicket.growth}%</span>\n          </div>\n          <p className=\"mt-2 text-[10px] uppercase tracking-wide text-gray-600\">Ticket Promedio Alto</p>\n          <p className=\"mt-1 font-serif text-xl font-bold tabular-nums text-[#C8A96A]\">{topCityByTicket.city}</p>\n          <p className=\"text-xs text-gray-600\">${topCityByTicket.avgTicket.toLocaleString()}</p>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n          className=\"rounded-3xl border border-gray-200 bg-white p-4 shadow-sm\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <Users className=\"h-5 w-5 text-[#C8A96A]\" />\n            <span className=\"text-xs text-green-500\">+{topCityByBuyers.growth}%</span>\n          </div>\n          <p className=\"mt-2 text-[10px] uppercase tracking-wide text-gray-600\"># Compradores</p>\n          <p className=\"mt-1 font-serif text-xl font-bold tabular-nums text-[#C8A96A]\">{topCityByBuyers.city}</p>\n          <p className=\"text-xs text-gray-600\">{topCityByBuyers.buyers} compradores</p>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.15 }}\n          className=\"rounded-3xl border border-gray-200 bg-white p-4 shadow-sm\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <DollarSign className=\"h-5 w-5 text-[#C8A96A]\" />\n            <span className=\"text-xs text-green-500\">+7.2%</span>\n          </div>\n          <p className=\"mt-2 text-[10px] uppercase tracking-wide text-gray-600\">Ventas Totales</p>\n          <p className=\"mt-1 font-serif text-xl font-bold tabular-nums text-[#C8A96A]\">\n            ${(totalSales / 1000000).toFixed(1)}M\n          </p>\n          <p className=\"text-xs text-gray-600\">Periodo actual</p>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n          className=\"rounded-3xl border border-gray-200 bg-white p-4 shadow-sm\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <TrendingUp className=\"h-5 w-5 text-[#C8A96A]\" />\n            <span className=\"text-xs text-green-500\">+5.8%</span>\n          </div>\n          <p className=\"mt-2 text-[10px] uppercase tracking-wide text-gray-600\">Ticket Promedio Global</p>\n          <p className=\"mt-1 font-serif text-xl font-bold tabular-nums text-[#C8A96A]\">\n            ${globalAvgTicket.toLocaleString(\"es-CO\", { maximumFractionDigits: 0 })}\n          </p>\n          <p className=\"text-xs text-gray-600\">Todas las ciudades</p>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.25 }}\n          className=\"rounded-3xl border border-gray-200 bg-white p-4 shadow-sm\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <MapPin className=\"h-5 w-5 text-[#C8A96A]\" />\n            <span className=\"text-xs text-green-500\">+{currentMonthLeader.growth}%</span>\n          </div>\n          <p className=\"mt-2 text-[10px] uppercase tracking-wide text-gray-600\">L├¡der del Mes</p>\n          <p className=\"mt-1 font-serif text-xl font-bold tabular-nums text-[#C8A96A]\">{currentMonthLeader.city}</p>\n          <p className=\"text-xs text-gray-600\">{MONTHS[new Date().getMonth()]}</p>\n        </motion.div>\n      </div>\n\n      <div className=\"mb-8 grid grid-cols-1 gap-6 lg:grid-cols-2\">\n        <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-sm\">\n          <h2 className=\"mb-4 font-serif text-xl font-bold text-gray-900\">Mapa de Ventas</h2>\n          <SalesMap\n            cities={CITIES.map((city) => ({\n              city: city.city,\n              sales: city.sales,\n              buyers: city.buyers,\n              avgTicket: city.avgTicket,\n              coordinates: city.coordinates,\n            }))}\n            onCityClick={(city) => setSelectedCity(city)}\n          />\n        </div>\n\n        <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-sm\">\n          <h2 className=\"mb-4 font-serif text-xl font-bold text-gray-900\">Ranking de Ciudades</h2>\n          <div className=\"max-h-96 overflow-y-auto\">\n            <table className=\"w-full\">\n              <thead className=\"sticky top-0 bg-gray-50\">\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"p-2 text-center text-xs font-semibold uppercase text-gray-600\">#</th>\n                  <th className=\"p-2 text-left text-xs font-semibold uppercase text-gray-600\">Ciudad</th>\n                  <th className=\"p-2 text-center text-xs font-semibold uppercase text-gray-600\">Ventas</th>\n                  <th className=\"p-2 text-center text-xs font-semibold uppercase text-gray-600\">Ticket</th>\n                  <th className=\"p-2 text-center text-xs font-semibold uppercase text-gray-600\">%</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredCities.map((city, idx) => (\n                  <tr\n                    key={city.city}\n                    onClick={() => setSelectedCity(city.city)}\n                    className=\"cursor-pointer border-b border-gray-100 transition-colors hover:bg-gray-50\"\n                  >\n                    <td className=\"p-2 text-center text-sm text-gray-600\">{idx + 1}</td>\n                    <td className=\"p-2 text-left\">\n                      <div className=\"flex items-center gap-2\">\n                        <MapPin className=\"h-4 w-4 text-[#C8A96A]\" />\n                        <span className=\"text-sm font-medium text-gray-900\">{city.city}</span>\n                      </div>\n                    </td>\n                    <td className=\"p-2 text-center text-sm tabular-nums text-[#C8A96A]\">\n                      ${(city.sales / 1000000).toFixed(1)}M\n                    </td>\n                    <td className=\"p-2 text-center text-sm tabular-nums text-gray-900\">\n                      ${city.avgTicket.toLocaleString()}\n                    </td>\n                    <td className=\"p-2 text-center text-sm tabular-nums text-gray-600\">\n                      {city.participation.toFixed(1)}%\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mb-8\">\n        <h2 className=\"mb-4 font-serif text-2xl font-bold text-gray-900\">Ciudad L├¡der por Mes</h2>\n        <div className=\"grid grid-cols-2 gap-3 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-12\">\n          {monthlyLeaders.map((leader, idx) => (\n            <motion.div\n              key={leader.month}\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ delay: idx * 0.03 }}\n              className=\"rounded-2xl border border-gray-200 bg-white p-3 shadow-sm\"\n            >\n              <p className=\"text-xs font-semibold text-[#C8A96A]\">{leader.month}</p>\n              <p className=\"mt-1 text-sm font-bold text-gray-900\">{leader.city}</p>\n              <p className=\"mt-1 text-xs tabular-nums text-gray-600\">${(leader.amount / 1000000).toFixed(1)}M</p>\n              <div className=\"mt-2 h-1 w-full rounded-full bg-gray-200\">\n                <div\n                  className=\"h-full rounded-full bg-[#C8A96A]\"\n                  style={{ width: `${(leader.amount / 5000000) * 100}%` }}\n                />\n              </div>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"mb-8 grid grid-cols-1 gap-6 lg:grid-cols-2\">\n        <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-sm\">\n          <h2 className=\"mb-4 font-serif text-xl font-bold text-gray-900\">Distribuci├│n Mensual por Ciudad</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={monthlyStackData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n              <XAxis dataKey=\"month\" stroke=\"#6b7280\" style={{ fontSize: 12 }} />\n              <YAxis stroke=\"#6b7280\" style={{ fontSize: 12 }} />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: \"white\",\n                  border: \"1px solid #e5e7eb\",\n                  borderRadius: \"12px\",\n                  color: \"#111827\",\n                }}\n              />\n              <Legend wrapperStyle={{ color: \"#111827\" }} />\n              {CITIES.slice(0, 5).map((city, idx) => (\n                <Bar key={city.city} dataKey={city.city} stackId=\"a\" fill={COLORS[idx]} />\n              ))}\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n\n        <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-sm\">\n          <h2 className=\"mb-4 font-serif text-xl font-bold text-gray-900\">Ticket Promedio por Ciudad</h2>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={CITIES.slice(0, 8)} layout=\"vertical\">\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n              <XAxis type=\"number\" stroke=\"#6b7280\" style={{ fontSize: 12 }} />\n              <YAxis dataKey=\"city\" type=\"category\" stroke=\"#6b7280\" style={{ fontSize: 12 }} width={100} />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: \"white\",\n                  border: \"1px solid #e5e7eb\",\n                  borderRadius: \"12px\",\n                  color: \"#111827\",\n                }}\n              />\n              <Bar dataKey=\"avgTicket\" fill=\"#C8A96A\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {selectedCity && selectedCityData && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"fixed inset-0 z-50 bg-black/50 backdrop-blur-sm\"\n          onClick={handleCloseDrawer}\n        >\n          <motion.div\n            initial={{ x: \"100%\" }}\n            animate={{ x: 0 }}\n            exit={{ x: \"100%\" }}\n            transition={{ type: \"spring\", damping: 25 }}\n            className=\"absolute right-0 top-0 h-full w-full max-w-2xl overflow-y-auto bg-white shadow-2xl\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"sticky top-0 z-10 flex items-center justify-between border-b border-gray-200 bg-gray-50 p-6\">\n              <div>\n                <h2 className=\"font-serif text-2xl font-bold text-gray-900\">{selectedCity}</h2>\n                <p className=\"text-sm text-gray-600\">An├ílisis detallado de la ciudad</p>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleCloseDrawer}\n                className=\"text-gray-900 hover:bg-gray-100\"\n              >\n                <X className=\"h-5 w-5\" />\n              </Button>\n            </div>\n\n            <div className=\"p-6\">\n              <div className=\"mb-6 grid grid-cols-2 gap-4\">\n                <div className=\"rounded-2xl border border-gray-200 bg-white p-4\">\n                  <p className=\"text-xs uppercase text-gray-600\">Ventas Totales</p>\n                  <p className=\"mt-1 font-serif text-2xl font-bold tabular-nums text-[#C8A96A]\">\n                    ${(selectedCityData.sales / 1000000).toFixed(1)}M\n                  </p>\n                </div>\n                <div className=\"rounded-2xl border border-gray-200 bg-white p-4\">\n                  <p className=\"text-xs uppercase text-gray-600\">Ticket Promedio</p>\n                  <p className=\"mt-1 font-serif text-2xl font-bold tabular-nums text-[#C8A96A]\">\n                    ${selectedCityData.avgTicket.toLocaleString()}\n                  </p>\n                </div>\n                <div className=\"rounded-2xl border border-gray-200 bg-white p-4\">\n                  <p className=\"text-xs uppercase text-gray-600\">Compradores</p>\n                  <p className=\"mt-1 font-serif text-2xl font-bold tabular-nums text-[#C8A96A]\">\n                    {selectedCityData.buyers}\n                  </p>\n                </div>\n                <div className=\"rounded-2xl border border-gray-200 bg-white p-4\">\n                  <p className=\"text-xs uppercase text-gray-600\">Participaci├│n</p>\n                  <p className=\"mt-1 font-serif text-2xl font-bold tabular-nums text-[#C8A96A]\">\n                    {selectedCityData.participation.toFixed(1)}%\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"mb-6 rounded-2xl border border-gray-200 bg-white p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <ShoppingBag className=\"h-5 w-5 text-[#C8A96A]\" />\n                  <p className=\"text-sm font-semibold text-gray-900\">Producto M├ís Comprado</p>\n                </div>\n                <p className=\"mt-2 font-serif text-xl font-bold text-[#C8A96A]\">{selectedCityData.topProduct}</p>\n              </div>\n\n              <div className=\"mb-6 rounded-2xl border border-gray-200 bg-white p-4\">\n                <h3 className=\"mb-4 text-sm font-semibold text-gray-900\">Evoluci├│n Mensual</h3>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <LineChart data={selectedCityMonthlyData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                    <XAxis dataKey=\"month\" stroke=\"#6b7280\" style={{ fontSize: 12 }} />\n                    <YAxis stroke=\"#6b7280\" style={{ fontSize: 12 }} />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: \"white\",\n                        border: \"1px solid #e5e7eb\",\n                        borderRadius: \"12px\",\n                        color: \"#111827\",\n                      }}\n                    />\n                    <Line type=\"monotone\" dataKey=\"ventas\" stroke=\"#C8A96A\" strokeWidth={2} dot={{ fill: \"#C8A96A\" }} />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n\n              {selectedCityProductData.length > 0 && (\n                <div className=\"mb-6 rounded-2xl border border-gray-200 bg-white p-4\">\n                  <h3 className=\"mb-4 text-sm font-semibold text-gray-900\">Distribuci├│n de Productos</h3>\n                  <ResponsiveContainer width=\"100%\" height={200}>\n                    <PieChart>\n                      <Pie\n                        data={selectedCityProductData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                      >\n                        {selectedCityProductData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip\n                        contentStyle={{\n                          backgroundColor: \"white\",\n                          border: \"1px solid #e5e7eb\",\n                          borderRadius: \"12px\",\n                          color: \"#111827\",\n                        }}\n                      />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n              )}\n\n              <div className=\"rounded-2xl border border-gray-200 bg-white p-4\">\n                <h3 className=\"mb-4 text-sm font-semibold text-gray-900\">Pedidos Recientes</h3>\n                <div className=\"space-y-2\">\n                  {selectedCityOrders.length > 0 ? (\n                    selectedCityOrders.map((order) => (\n                      <div\n                        key={order.id}\n                        className=\"flex items-center justify-between rounded-lg border border-gray-200 bg-gray-50 p-3\"\n                      >\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">{order.product}</p>\n                          <p className=\"text-xs text-gray-600\">\n                            {order.id} ┬À {order.date}\n                          </p>\n                        </div>\n                        <p className=\"font-serif text-sm font-bold tabular-nums text-[#C8A96A]\">\n                          ${order.amount.toLocaleString()}\n                        </p>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-center text-sm text-gray-500\">No hay pedidos recientes</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/(dashboard)/geografia/page.tsx"
      },
      {
        "path": "app/(dashboard)/inventario/page.tsx",
        "content": "\"use client\"\nimport { useEffect, useMemo, useState } from \"react\"\nimport inv from \"@/adapters/inventory\"\nimport type { Product, Variant } from \"@/lib/inventory-types\"\nimport { v4 as uuid } from \"uuid\"\nimport InventoryModals from \"@/components/inventory/modals\"\nimport MovementsDrawer from \"@/components/inventory/movements-drawer\"\nimport ReorderAside from \"@/components/inventory/reorder-aside\"\n\nfunction k(num: number) {\n  return num.toLocaleString()\n}\n\nexport default function InventoryPage() {\n  const [snapshot, setSnapshot] = useState(inv.getSnapshot())\n  const [query, setQuery] = useState(\"\")\n  const [stockFilter, setStockFilter] = useState<\"all\" | \"cantidad\" | \"garantias\">(\"all\")\n  const [category, setCategory] = useState<string>(\"all\")\n  const [openModals, setOpenModals] = useState<{ product?: Product | null; movement?: Variant | null }>({})\n  const [showMov, setShowMov] = useState(false)\n  const [pollAt, setPollAt] = useState(Date.now())\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setSnapshot(inv.getSnapshot())\n      setPollAt(Date.now())\n    }, 60000)\n    return () => clearInterval(id)\n  }, [])\n\n  const warehouses = useMemo(() => inv.listWarehouses(), [])\n  const products = useMemo(() => inv.listProducts(), [pollAt])\n\n  const categories = useMemo(() => {\n    const set = new Set(products.map((p) => p.category || \"Sin categor├¡a\"))\n    return [\"all\", ...Array.from(set)]\n  }, [products])\n\n  const kpis = useMemo(() => inv.valuation(), [pollAt])\n\n  const filtered = useMemo(() => {\n    const q = query.trim().toLowerCase()\n    return products.filter((p) => {\n      const matchQ = !q || p.name.toLowerCase().includes(q) || p.variants.some((v) => v.sku.toLowerCase().includes(q))\n      const matchC = category === \"all\" || (p.category || \"Sin categor├¡a\") === category\n      return matchQ && matchC\n    })\n  }, [products, query, category])\n\n  const totalRows = useMemo(() => {\n    const rows = filtered.flatMap((p) => p.variants.map((v) => ({ p, v })))\n\n    if (stockFilter === \"all\") return rows\n\n    return rows.filter(({ v }) => {\n      if (stockFilter === \"cantidad\") {\n        return (v.cantidadPrincipal ?? 0) > 0\n      } else if (stockFilter === \"garantias\") {\n        return (v.cantidadGarantias ?? 0) > 0\n      }\n      return true\n    })\n  }, [filtered, stockFilter])\n\n  const openNewProduct = () => {\n    setOpenModals({\n      product: {\n        id: uuid(),\n        name: \"\",\n        category: \"Sin categor├¡a\",\n        brand: \"GALLE\",\n        notes: \"\",\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        medidas: \"\",\n        variants: [\n          {\n            id: uuid(),\n            name: \"├Ünica\",\n            sku: \"\",\n            barcode: \"\",\n            stockByWh: Object.fromEntries(warehouses.map((w) => [w.id, 0])),\n            cost: 0,\n            price: 0,\n            precioMayor: 0,\n            reorderLevel: 0,\n            enabled: true,\n            cantidadPrincipal: 0,\n            cantidadGarantias: 0,\n          },\n        ],\n      } as Product,\n    })\n  }\n\n  const onSaveProduct = (p: Product) => {\n    inv.upsertProduct(p)\n    setSnapshot(inv.getSnapshot())\n    setOpenModals({})\n  }\n\n  const onDeleteProduct = (id: string) => {\n    inv.deleteProduct(id)\n    setSnapshot(inv.getSnapshot())\n    setOpenModals({})\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold tracking-tight\">Inventario</h1>\n          <p className=\"text-sm text-neutral-500\">Control de existencias, valoraci├│n y movimientos (AVG/FIFO).</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <button className=\"rounded-xl border px-3 py-2 text-sm hover:shadow\" onClick={openNewProduct}>\n            Nuevo producto\n          </button>\n          <button className=\"rounded-xl border px-3 py-2 text-sm hover:shadow\" onClick={() => setShowMov(true)}>\n            Kardex\n          </button>\n        </div>\n      </div>\n\n      <div className=\"mb-6 grid grid-cols-2 gap-4 lg:grid-cols-4\">\n        <CardKPI title=\"Valor en bodega\" value={`$${k(kpis.valor)}`} />\n        <CardKPI title=\"Unidades\" value={k(kpis.unidades)} />\n        <CardKPI title=\"% agotado/umbral\" value={`${kpis.agotado}`} sub=\"variantes en alerta\" />\n        <CardKPI title=\"Costo promedio\" value={`$${k(kpis.costoProm)}`} />\n      </div>\n\n      <div className=\"mb-4 flex flex-wrap items-center gap-2\">\n        <div className=\"relative\">\n          <input\n            placeholder=\"Buscar por nombre o SKUÔÇª\"\n            className=\"w-[280px] rounded-2xl border px-4 py-2 text-sm outline-none\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n          />\n        </div>\n        <select\n          className=\"rounded-2xl border px-3 py-2 text-sm\"\n          value={category}\n          onChange={(e) => setCategory(e.target.value)}\n        >\n          {categories.map((c) => (\n            <option key={c} value={c}>\n              {c === \"all\" ? \"Todas las categor├¡as\" : c}\n            </option>\n          ))}\n        </select>\n        <select\n          className=\"rounded-2xl border px-3 py-2 text-sm\"\n          value={stockFilter}\n          onChange={(e) => setStockFilter(e.target.value as \"all\" | \"cantidad\" | \"garantias\")}\n        >\n          <option value=\"all\">Todas las bodegas</option>\n          <option value=\"cantidad\">Cantidad</option>\n          <option value=\"garantias\">Garant├¡as</option>\n        </select>\n        <div className=\"ml-auto text-xs text-neutral-400\">Actualizaci├│n autom├ítica cada 60s</div>\n      </div>\n\n      <div className=\"overflow-hidden rounded-2xl border bg-white\">\n        <table className=\"w-full text-sm\">\n          <thead className=\"bg-neutral-50 text-neutral-600\">\n            <tr>\n              <th className=\"px-4 py-3 text-center\">Referencia</th>\n              <th className=\"px-4 py-3 text-center\">Nombre</th>\n              <th className=\"px-4 py-3 text-center\">Categor├¡a</th>\n              <th className=\"px-4 py-3 text-center\">Medidas</th>\n              <th className=\"px-4 py-3 text-center\">Cantidad</th>\n              <th className=\"px-4 py-3 text-center\">Garant├¡as</th>\n              <th className=\"px-4 py-3 text-center\">Total</th>\n              <th className=\"px-4 py-3 text-center\">Costo</th>\n              <th className=\"px-4 py-3 text-center\">Precio Detal</th>\n              <th className=\"px-4 py-3 text-center\">Precio Mayor</th>\n              <th className=\"px-4 py-3 text-center\">Utilidad Detal</th>\n              <th className=\"px-4 py-3 text-center\">Utilidad Mayor</th>\n              <th className=\"px-4 py-3 text-center\">Margen Detal</th>\n              <th className=\"px-4 py-3 text-center\">Margen Mayor</th>\n              <th className=\"px-4 py-3 text-center\">Acci├│n</th>\n            </tr>\n          </thead>\n          <tbody>\n            {totalRows.map(({ p, v }) => {\n              const cantidadPrincipal = v.cantidadPrincipal ?? 0\n              const cantidadGarantias = v.cantidadGarantias ?? 0\n              const totalStock = cantidadPrincipal + cantidadGarantias\n\n              const utilDetal = v.price - v.cost\n              const margenDetal = v.price > 0 ? utilDetal / v.price : 0\n\n              const precioMayor = v.precioMayor ?? 0\n              const utilMayor = precioMayor - v.cost\n              const margenMayor = precioMayor > 0 ? utilMayor / precioMayor : 0\n\n              const low = totalStock <= (v.reorderLevel ?? 0)\n              return (\n                <tr key={v.id} className=\"border-t\">\n                  <td className=\"px-4 py-3 text-center\">\n                    <div className=\"font-medium\">{v.sku || \"ÔÇö\"}</div>\n                    <div className=\"text-xs text-neutral-500\">{v.name}</div>\n                  </td>\n                  <td className=\"px-4 py-3 text-center\">{p.name}</td>\n                  <td className=\"px-4 py-3 text-center\">{p.category || \"Sin categor├¡a\"}</td>\n                  <td className=\"px-4 py-3 text-center text-neutral-600\">{p.medidas || \"ÔÇö\"}</td>\n                  <td className=\"px-4 py-3 text-center\">{k(cantidadPrincipal)}</td>\n                  <td className=\"px-4 py-3 text-center\">{k(cantidadGarantias)}</td>\n                  <td className=\"px-4 py-3 text-center\">{k(totalStock)}</td>\n                  <td className=\"px-4 py-3 text-center\">${k(v.cost)}</td>\n                  <td className=\"px-4 py-3 text-center\">${k(v.price)}</td>\n                  <td className=\"px-4 py-3 text-center\">${k(precioMayor)}</td>\n                  <td className=\"px-4 py-3 text-center\">${k(utilDetal)}</td>\n                  <td className=\"px-4 py-3 text-center\">${k(utilMayor)}</td>\n                  <td className=\"px-4 py-3 text-center\">{(margenDetal * 100).toFixed(1)}%</td>\n                  <td className=\"px-4 py-3 text-center\">{(margenMayor * 100).toFixed(1)}%</td>\n                  <td className=\"px-4 py-3\">\n                    <div className=\"flex justify-center gap-2\">\n                      <button\n                        className=\"rounded-full border px-3 py-1 text-xs hover:shadow-sm\"\n                        onClick={() => setOpenModals({ product: p })}\n                      >\n                        Editar\n                      </button>\n                      <button\n                        className=\"rounded-full border px-3 py-1 text-xs hover:shadow-sm\"\n                        onClick={() => setOpenModals({ movement: v })}\n                      >\n                        Mov.\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              )\n            })}\n            {totalRows.length === 0 && (\n              <tr>\n                <td colSpan={15} className=\"px-6 py-12 text-center text-neutral-400\">\n                  Sin resultados\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"mt-6\">\n        <ReorderAside products={products} />\n      </div>\n\n      <InventoryModals\n        openProduct={!!openModals.product}\n        product={openModals.product || null}\n        warehouses={warehouses}\n        onClose={() => setOpenModals({})}\n        onSave={onSaveProduct}\n        onDelete={onDeleteProduct}\n        openMovement={!!openModals.movement}\n        variant={openModals.movement || null}\n        onRegister={(m) => {\n          console.log(\"[v0] Registrando movimiento:\", m)\n          if (m.type === \"warranty\") {\n            const variant = products.flatMap((p) => p.variants).find((v) => v.id === m.variantId)\n\n            if (variant) {\n              variant.cantidadPrincipal = (variant.cantidadPrincipal ?? 0) - m.qty\n              variant.cantidadGarantias = (variant.cantidadGarantias ?? 0) + m.qty\n              console.log(\n                \"[v0] Movimiento de garant├¡a procesado. Nueva cantidad:\",\n                variant.cantidadPrincipal,\n                \"Nuevas garant├¡as:\",\n                variant.cantidadGarantias,\n              )\n            }\n          }\n\n          inv.registerMovement(m)\n          setSnapshot(inv.getSnapshot())\n          setOpenModals({})\n        }}\n      />\n\n      <MovementsDrawer open={showMov} onClose={() => setShowMov(false)} />\n    </div>\n  )\n}\n\nfunction CardKPI({ title, value, sub }: { title: string; value: string; sub?: string }) {\n  const colors = [\n    { bg: \"bg-blue-50\", border: \"border-l-4 border-l-blue-400\" },\n    { bg: \"bg-purple-50\", border: \"border-l-4 border-l-purple-400\" },\n    { bg: \"bg-amber-50\", border: \"border-l-4 border-l-amber-400\" },\n    { bg: \"bg-emerald-50\", border: \"border-l-4 border-l-emerald-400\" },\n  ]\n\n  const colorIndex = title.charCodeAt(0) % colors.length\n  const { bg, border } = colors[colorIndex]\n\n  return (\n    <div className={`rounded-2xl border ${bg} ${border} p-4 shadow-sm backdrop-blur`}>\n      <div className=\"text-xs text-neutral-600 font-medium\">{title}</div>\n      <div className=\"mt-2 text-2xl font-bold text-neutral-900\">{value}</div>\n      {sub && <div className=\"mt-1 text-xs text-neutral-500\">{sub}</div>}\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/(dashboard)/inventario/page.tsx"
      },
      {
        "path": "app/(dashboard)/layout.tsx",
        "content": "\"use client\"\n\nimport type React from \"react\"\nimport { Sidebar } from \"@/components/sidebar\"\nimport { ThemeProvider } from \"@/lib/theme-context\"\nimport { FiscalYearProvider } from \"@/lib/fiscal-year-context\"\n\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <ThemeProvider>\n      <FiscalYearProvider>\n        <div className=\"flex h-screen overflow-hidden\">\n          <Sidebar />\n          <main className=\"flex-1 overflow-y-auto\">{children}</main>\n        </div>\n      </FiscalYearProvider>\n    </ThemeProvider>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/(dashboard)/layout.tsx"
      },
      {
        "path": "app/(dashboard)/page.tsx",
        "content": "\"use client\"\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  ShoppingCart,\n  Package,\n  Users,\n  MapPin,\n  AlertTriangle,\n  Download,\n} from \"lucide-react\"\nimport {\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\"\n\n// Datos mock\nconst kpiData = {\n  ventasMes: 45680000,\n  ventasMesAnterior: 42300000,\n  margenPromedio: 32.5,\n  tasaConversion: 68.3,\n  ticketPromedio: 1250000,\n  pendienteMiPaquete: 15,\n}\n\nconst ventasDiarias = [\n  { dia: \"1\", ventas: 1200000 },\n  { dia: \"5\", ventas: 1800000 },\n  { dia: \"10\", ventas: 1500000 },\n  { dia: \"15\", ventas: 2100000 },\n  { dia: \"20\", ventas: 1900000 },\n  { dia: \"25\", ventas: 2400000 },\n  { dia: \"30\", ventas: 2200000 },\n]\n\nconst metodosPago = [\n  { name: \"Transferencia\", value: 45, color: \"#C8A96A\" },\n  { name: \"Efectivo\", value: 30, color: \"#8B6914\" },\n  { name: \"Tarjeta\", value: 20, color: \"#D9C99A\" },\n  { name: \"Cr├®dito\", value: 5, color: \"#F3E9BA\" },\n]\n\nconst rankingCiudades = [\n  { ciudad: \"Bogot├í\", ventas: 18500000, pedidos: 145 },\n  { ciudad: \"Medell├¡n\", ventas: 12300000, pedidos: 98 },\n  { ciudad: \"Cali\", ventas: 8900000, pedidos: 72 },\n  { ciudad: \"Barranquilla\", ventas: 5980000, pedidos: 48 },\n]\n\nconst ultimasVentas = [\n  {\n    id: \"V-1234\",\n    cliente: \"Joyer├¡a El Dorado\",\n    monto: 3500000,\n    fecha: \"2025-01-15\",\n    estado: \"Completado\",\n  },\n  {\n    id: \"V-1235\",\n    cliente: \"Baliner├¡a Premium\",\n    monto: 2800000,\n    fecha: \"2025-01-15\",\n    estado: \"Pendiente\",\n  },\n  {\n    id: \"V-1236\",\n    cliente: \"Accesorios Luxury\",\n    monto: 4200000,\n    fecha: \"2025-01-14\",\n    estado: \"Completado\",\n  },\n]\n\nconst mayoristas = {\n  joyeria: { nuevos: 12, recurrentes: 45 },\n  balineria: { nuevos: 8, recurrentes: 32 },\n}\n\nconst riesgoFuga = [\n  { cliente: \"Joyer├¡a Central\", diasSinComprar: 45, ultimaCompra: 2500000 },\n  { cliente: \"Baliner├¡a Express\", diasSinComprar: 38, ultimaCompra: 1800000 },\n  { cliente: \"Accesorios Plus\", diasSinComprar: 32, ultimaCompra: 3200000 },\n]\n\nconst formatCOP = (value: number) => {\n  return new Intl.NumberFormat(\"es-CO\", {\n    style: \"currency\",\n    currency: \"COP\",\n    minimumFractionDigits: 0,\n  }).format(value)\n}\n\nexport default function DashboardPage() {\n  const cambioVentas = ((kpiData.ventasMes - kpiData.ventasMesAnterior) / kpiData.ventasMesAnterior) * 100\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"sticky top-0 z-10 bg-white/80 backdrop-blur-md border-b border-gray-100 px-8 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold text-gray-900 tracking-tight\">Dashboard</h1>\n            <p className=\"text-gray-500 mt-2 text-lg\">Resumen ejecutivo de ventas y m├®tricas clave</p>\n          </div>\n          <Button className=\"bg-[#C8A96A] hover:bg-[#8B6914] text-white shadow-lg hover:shadow-xl transition-all duration-300 px-6 py-6 text-base\">\n            <Download className=\"h-5 w-5 mr-2\" />\n            Exportar Reporte\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"px-8 py-6 space-y-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6\">\n          {/* Ventas del Mes */}\n          <Card className=\"border border-[#C8A96A]/20 shadow-lg hover:shadow-2xl transition-all duration-300 hover:-translate-y-1 bg-gradient-to-br from-white to-[#C8A96A]/5\">\n            <CardHeader className=\"flex flex-row items-center justify-between pb-3\">\n              <CardTitle className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">\n                Ventas del Mes\n              </CardTitle>\n              <div className=\"p-2 bg-[#C8A96A]/10 rounded-lg\">\n                <DollarSign className=\"h-5 w-5 text-[#C8A96A]\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-gray-900 mb-2\">{formatCOP(kpiData.ventasMes)}</div>\n              <div className=\"flex items-center gap-2\">\n                {cambioVentas > 0 ? (\n                  <div className=\"flex items-center gap-1 px-2 py-1 bg-green-50 rounded-full\">\n                    <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                    <span className=\"text-sm font-semibold text-green-600\">+{cambioVentas.toFixed(1)}%</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-1 px-2 py-1 bg-red-50 rounded-full\">\n                    <TrendingDown className=\"h-4 w-4 text-red-600\" />\n                    <span className=\"text-sm font-semibold text-red-600\">{cambioVentas.toFixed(1)}%</span>\n                  </div>\n                )}\n                <span className=\"text-sm text-gray-500\">vs mes anterior</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Margen Promedio */}\n          <Card className=\"border border-[#C8A96A]/20 shadow-lg hover:shadow-2xl transition-all duration-300 hover:-translate-y-1 bg-gradient-to-br from-white to-[#C8A96A]/5\">\n            <CardHeader className=\"flex flex-row items-center justify-between pb-3\">\n              <CardTitle className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">\n                Margen Promedio\n              </CardTitle>\n              <div className=\"p-2 bg-[#C8A96A]/10 rounded-lg\">\n                <TrendingUp className=\"h-5 w-5 text-[#C8A96A]\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-gray-900 mb-2\">{kpiData.margenPromedio}%</div>\n              <p className=\"text-sm text-gray-500\">Utilidad sobre ventas</p>\n            </CardContent>\n          </Card>\n\n          {/* Tasa de Conversi├│n */}\n          <Card className=\"border border-[#C8A96A]/20 shadow-lg hover:shadow-2xl transition-all duration-300 hover:-translate-y-1 bg-gradient-to-br from-white to-[#C8A96A]/5\">\n            <CardHeader className=\"flex flex-row items-center justify-between pb-3\">\n              <CardTitle className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">\n                Tasa de Conversi├│n\n              </CardTitle>\n              <div className=\"p-2 bg-[#C8A96A]/10 rounded-lg\">\n                <ShoppingCart className=\"h-5 w-5 text-[#C8A96A]\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-gray-900 mb-2\">{kpiData.tasaConversion}%</div>\n              <p className=\"text-sm text-gray-500\">Pedidos confirmados</p>\n            </CardContent>\n          </Card>\n\n          {/* Ticket Promedio */}\n          <Card className=\"border border-[#C8A96A]/20 shadow-lg hover:shadow-2xl transition-all duration-300 hover:-translate-y-1 bg-gradient-to-br from-white to-[#C8A96A]/5\">\n            <CardHeader className=\"flex flex-row items-center justify-between pb-3\">\n              <CardTitle className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">\n                Ticket Promedio\n              </CardTitle>\n              <div className=\"p-2 bg-[#C8A96A]/10 rounded-lg\">\n                <DollarSign className=\"h-5 w-5 text-[#C8A96A]\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-gray-900 mb-2\">{formatCOP(kpiData.ticketPromedio)}</div>\n              <p className=\"text-sm text-gray-500\">Por venta</p>\n            </CardContent>\n          </Card>\n\n          {/* Pendiente MiPaquete */}\n          <Card className=\"border border-[#C8A96A]/20 shadow-lg hover:shadow-2xl transition-all duration-300 hover:-translate-y-1 bg-gradient-to-br from-white to-[#C8A96A]/5\">\n            <CardHeader className=\"flex flex-row items-center justify-between pb-3\">\n              <CardTitle className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">\n                Pendiente MiPaquete\n              </CardTitle>\n              <div className=\"p-2 bg-[#C8A96A]/10 rounded-lg\">\n                <Package className=\"h-5 w-5 text-[#C8A96A]\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-gray-900 mb-2\">{kpiData.pendienteMiPaquete}</div>\n              <p className=\"text-sm text-gray-500\">Gu├¡as pendientes</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Card className=\"border border-[#C8A96A]/20 shadow-lg hover:shadow-xl transition-all duration-300\">\n            <CardHeader className=\"bg-gradient-to-r from-[#C8A96A]/5 to-transparent\">\n              <CardTitle className=\"flex items-center gap-3 text-gray-900 text-xl\">\n                <div className=\"p-2 bg-[#C8A96A] rounded-lg\">\n                  <Users className=\"h-6 w-6 text-white\" />\n                </div>\n                Mayoristas Joyer├¡a\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-around\">\n                <div className=\"text-center group cursor-pointer\">\n                  <div className=\"text-5xl font-bold text-[#C8A96A] mb-3 group-hover:scale-110 transition-transform duration-300\">\n                    {mayoristas.joyeria.nuevos}\n                  </div>\n                  <Badge variant=\"outline\" className=\"border-[#C8A96A] text-[#8B6914] px-4 py-1 text-sm font-semibold\">\n                    Nuevos\n                  </Badge>\n                </div>\n                <div className=\"h-24 w-px bg-gradient-to-b from-transparent via-gray-300 to-transparent\" />\n                <div className=\"text-center group cursor-pointer\">\n                  <div className=\"text-5xl font-bold text-gray-900 mb-3 group-hover:scale-110 transition-transform duration-300\">\n                    {mayoristas.joyeria.recurrentes}\n                  </div>\n                  <Badge variant=\"outline\" className=\"px-4 py-1 text-sm font-semibold\">\n                    Recurrentes\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-[#C8A96A]/20 shadow-lg hover:shadow-xl transition-all duration-300\">\n            <CardHeader className=\"bg-gradient-to-r from-[#C8A96A]/5 to-transparent\">\n              <CardTitle className=\"flex items-center gap-3 text-gray-900 text-xl\">\n                <div className=\"p-2 bg-[#C8A96A] rounded-lg\">\n                  <Users className=\"h-6 w-6 text-white\" />\n                </div>\n                Mayoristas Baliner├¡a\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-around\">\n                <div className=\"text-center group cursor-pointer\">\n                  <div className=\"text-5xl font-bold text-[#C8A96A] mb-3 group-hover:scale-110 transition-transform duration-300\">\n                    {mayoristas.balineria.nuevos}\n                  </div>\n                  <Badge variant=\"outline\" className=\"border-[#C8A96A] text-[#8B6914] px-4 py-1 text-sm font-semibold\">\n                    Nuevos\n                  </Badge>\n                </div>\n                <div className=\"h-24 w-px bg-gradient-to-b from-transparent via-gray-300 to-transparent\" />\n                <div className=\"text-center group cursor-pointer\">\n                  <div className=\"text-5xl font-bold text-gray-900 mb-3 group-hover:scale-110 transition-transform duration-300\">\n                    {mayoristas.balineria.recurrentes}\n                  </div>\n                  <Badge variant=\"outline\" className=\"px-4 py-1 text-sm font-semibold\">\n                    Recurrentes\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Ventas Diarias */}\n          <Card className=\"border border-[#C8A96A]/20 shadow-lg\">\n            <CardHeader className=\"bg-gradient-to-r from-[#C8A96A]/5 to-transparent\">\n              <CardTitle className=\"text-gray-900 text-xl font-bold\">Ventas Diarias</CardTitle>\n              <p className=\"text-sm text-gray-500 mt-1\">Evoluci├│n de ventas durante el mes</p>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              <ResponsiveContainer width=\"100%\" height={320}>\n                <LineChart data={ventasDiarias}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                  <XAxis\n                    dataKey=\"dia\"\n                    stroke=\"#666\"\n                    tick={{ fill: \"#666\", fontSize: 12 }}\n                    label={{ value: \"D├¡a del mes\", position: \"insideBottom\", offset: -5, fill: \"#666\" }}\n                  />\n                  <YAxis\n                    stroke=\"#666\"\n                    tick={{ fill: \"#666\", fontSize: 12 }}\n                    tickFormatter={(value) => `${(value / 1000000).toFixed(1)}M`}\n                  />\n                  <Tooltip\n                    formatter={(value: number) => formatCOP(value)}\n                    contentStyle={{\n                      backgroundColor: \"white\",\n                      border: \"2px solid #C8A96A\",\n                      borderRadius: \"12px\",\n                      boxShadow: \"0 4px 12px rgba(0,0,0,0.1)\",\n                    }}\n                  />\n                  <Legend wrapperStyle={{ paddingTop: \"20px\" }} />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"ventas\"\n                    stroke=\"#C8A96A\"\n                    strokeWidth={3}\n                    dot={{ fill: \"#8B6914\", r: 6, strokeWidth: 2, stroke: \"#fff\" }}\n                    activeDot={{ r: 8, strokeWidth: 2 }}\n                    name=\"Ventas\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n\n          {/* M├®todos de Pago */}\n          <Card className=\"border border-[#C8A96A]/20 shadow-lg\">\n            <CardHeader className=\"bg-gradient-to-r from-[#C8A96A]/5 to-transparent\">\n              <CardTitle className=\"text-gray-900 text-xl font-bold\">M├®todos de Pago</CardTitle>\n              <p className=\"text-sm text-gray-500 mt-1\">Distribuci├│n por tipo de pago</p>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              <ResponsiveContainer width=\"100%\" height={320}>\n                <PieChart>\n                  <Pie\n                    data={metodosPago}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                    outerRadius={110}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                    strokeWidth={2}\n                    stroke=\"#fff\"\n                  >\n                    {metodosPago.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: \"white\",\n                      border: \"2px solid #C8A96A\",\n                      borderRadius: \"12px\",\n                      boxShadow: \"0 4px 12px rgba(0,0,0,0.1)\",\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Ranking de Ciudades */}\n          <Card className=\"border border-[#C8A96A]/20 shadow-lg\">\n            <CardHeader className=\"bg-gradient-to-r from-[#C8A96A]/5 to-transparent\">\n              <CardTitle className=\"flex items-center gap-3 text-gray-900 text-xl\">\n                <div className=\"p-2 bg-[#C8A96A] rounded-lg\">\n                  <MapPin className=\"h-5 w-5 text-white\" />\n                </div>\n                Ranking de Ciudades\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              <div className=\"space-y-3\">\n                {rankingCiudades.map((ciudad, index) => (\n                  <div\n                    key={ciudad.ciudad}\n                    className=\"flex items-center justify-between p-4 rounded-xl bg-gradient-to-r from-gray-50 to-white hover:from-[#C8A96A]/5 hover:to-white transition-all duration-300 border border-gray-100 hover:border-[#C8A96A]/30 hover:shadow-md\"\n                  >\n                    <div className=\"flex items-center gap-4 flex-1\">\n                      <div className=\"flex items-center justify-center w-10 h-10 rounded-full bg-gradient-to-br from-[#C8A96A] to-[#8B6914] text-white font-bold text-lg shadow-lg\">\n                        {index + 1}\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <MapPin className=\"h-4 w-4 text-[#C8A96A]\" />\n                        <div>\n                          <div className=\"font-bold text-gray-900 text-lg\">{ciudad.ciudad}</div>\n                          <div className=\"text-sm text-gray-500\">{ciudad.pedidos} pedidos</div>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-center flex-1\">\n                      <div className=\"font-bold text-gray-900 text-lg\">{formatCOP(ciudad.ventas)}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* ├Ültimas Ventas */}\n          <Card className=\"border border-[#C8A96A]/20 shadow-lg\">\n            <CardHeader className=\"bg-gradient-to-r from-[#C8A96A]/5 to-transparent\">\n              <CardTitle className=\"flex items-center gap-3 text-gray-900 text-xl\">\n                <div className=\"p-2 bg-[#C8A96A] rounded-lg\">\n                  <ShoppingCart className=\"h-5 w-5 text-white\" />\n                </div>\n                ├Ültimas Ventas\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              <div className=\"space-y-3\">\n                {ultimasVentas.map((venta) => (\n                  <div\n                    key={venta.id}\n                    className=\"flex items-center justify-between p-4 rounded-xl bg-gradient-to-r from-gray-50 to-white hover:from-[#C8A96A]/5 hover:to-white transition-all duration-300 border border-gray-100 hover:border-[#C8A96A]/30 hover:shadow-md\"\n                  >\n                    <div>\n                      <div className=\"font-bold text-gray-900\">{venta.cliente}</div>\n                      <div className=\"text-sm text-gray-500 mt-1\">\n                        {venta.id} ÔÇó {venta.fecha}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-bold text-gray-900 mb-2\">{formatCOP(venta.monto)}</div>\n                      <Badge\n                        variant={venta.estado === \"Completado\" ? \"default\" : \"outline\"}\n                        className={\n                          venta.estado === \"Completado\"\n                            ? \"bg-green-100 text-green-800 border-green-200 font-semibold\"\n                            : \"border-yellow-300 text-yellow-800 font-semibold\"\n                        }\n                      >\n                        {venta.estado}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className=\"border-2 border-red-200 shadow-xl bg-gradient-to-br from-white to-red-50/30\">\n          <CardHeader className=\"bg-gradient-to-r from-red-50 to-transparent border-b border-red-100\">\n            <CardTitle className=\"flex items-center gap-3 text-gray-900 text-xl\">\n              <div className=\"p-2 bg-red-500 rounded-lg animate-pulse\">\n                <AlertTriangle className=\"h-6 w-6 text-white\" />\n              </div>\n              Riesgo de Fuga\n              <Badge variant=\"destructive\" className=\"ml-2 px-3 py-1 text-sm font-bold shadow-lg\">\n                {riesgoFuga.length} clientes\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-6\">\n            <div className=\"space-y-4\">\n              {riesgoFuga.map((cliente) => (\n                <div\n                  key={cliente.cliente}\n                  className=\"flex items-center justify-between p-5 rounded-xl bg-white border-2 border-red-200 hover:border-red-300 hover:shadow-lg transition-all duration-300\"\n                >\n                  <div>\n                    <div className=\"font-bold text-gray-900 text-lg\">{cliente.cliente}</div>\n                    <div className=\"text-sm text-gray-600 mt-1\">├Ültima compra: {formatCOP(cliente.ultimaCompra)}</div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-4xl font-bold text-red-600 mb-1\">{cliente.diasSinComprar}</div>\n                    <div className=\"text-sm text-gray-600 font-semibold\">d├¡as sin comprar</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/(dashboard)/page.tsx"
      },
      {
        "path": "app/(dashboard)/pagos/loading.tsx",
        "content": "export default function Loading() {\n  return (\n    <div className=\"flex h-screen items-center justify-center bg-white\">\n      <div className=\"text-center\">\n        <div className=\"mb-4 h-12 w-12 animate-spin rounded-full border-4 border-gray-200 border-t-[#C8A96A]\" />\n        <p className=\"text-sm text-gray-600\">Cargando pagos...</p>\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:block",
        "target": "~/app/(dashboard)/pagos/loading.tsx"
      },
      {
        "path": "app/(dashboard)/pagos/page.tsx",
        "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useMemo, useCallback } from \"react\"\nimport {\n  Search,\n  Download,\n  Printer,\n  Share2,\n  Plus,\n  Check,\n  X,\n  TrendingUp,\n  DollarSign,\n  CreditCard,\n  Banknote,\n  Package,\n} from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Badge } from \"@/components/ui/badge\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n\ntype Payment = {\n  id: string\n  date: string\n  order: string\n  client: string\n  method: \"transferencia\" | \"efectivo\" | \"contraentrega\"\n  submethod?: \"nequi\" | \"bancolombia\" | \"daviplata\" | \"davivienda\"\n  status: \"pagado\" | \"pendiente\" | \"observacion\"\n  amount: number\n  note?: string\n}\n\ntype MonthData = {\n  month: number\n  year: number\n  open: boolean\n  payments: Payment[]\n}\n\nconst MESES = [\"Ene\", \"Feb\", \"Mar\", \"Abr\", \"May\", \"Jun\", \"Jul\", \"Ago\", \"Sep\", \"Oct\", \"Nov\", \"Dic\"]\n\nconst generateMockData = (year: number): MonthData[] => {\n  const currentDate = new Date()\n  const currentMonth = currentDate.getMonth()\n  const currentYear = currentDate.getFullYear()\n\n  return Array.from({ length: 12 }, (_, i) => ({\n    month: i,\n    year,\n    open: year === currentYear ? i <= currentMonth : year < currentYear,\n    payments: [\n      {\n        id: `${year}-${i}-1`,\n        date: `${year}-${String(i + 1).padStart(2, \"0\")}-05`,\n        order: `ORD-${year}-${String(i + 1).padStart(2, \"0\")}-001`,\n        client: \"Mar├¡a Gonz├ílez\",\n        method: \"transferencia\" as const,\n        submethod: \"nequi\" as const,\n        status: \"pagado\" as const,\n        amount: 1250000,\n      },\n      {\n        id: `${year}-${i}-2`,\n        date: `${year}-${String(i + 1).padStart(2, \"0\")}-08`,\n        order: `ORD-${year}-${String(i + 1).padStart(2, \"0\")}-002`,\n        client: \"Carlos Ram├¡rez\",\n        method: \"efectivo\" as const,\n        status: \"pagado\" as const,\n        amount: 850000,\n      },\n      {\n        id: `${year}-${i}-3`,\n        date: `${year}-${String(i + 1).padStart(2, \"0\")}-12`,\n        order: `ORD-${year}-${String(i + 1).padStart(2, \"0\")}-003`,\n        client: \"Ana Mart├¡nez\",\n        method: \"contraentrega\" as const,\n        status: i % 2 === 0 ? (\"pendiente\" as const) : (\"pagado\" as const),\n        amount: 450000,\n      },\n      {\n        id: `${year}-${i}-4`,\n        date: `${year}-${String(i + 1).padStart(2, \"0\")}-15`,\n        order: `ORD-${year}-${String(i + 1).padStart(2, \"0\")}-004`,\n        client: \"Luis Hern├índez\",\n        method: \"transferencia\" as const,\n        submethod: \"bancolombia\" as const,\n        status: \"pagado\" as const,\n        amount: 2100000,\n      },\n      {\n        id: `${year}-${i}-5`,\n        date: `${year}-${String(i + 1).padStart(2, \"0\")}-20`,\n        order: `ORD-${year}-${String(i + 1).padStart(2, \"0\")}-005`,\n        client: \"Patricia Silva\",\n        method: \"transferencia\" as const,\n        submethod: \"daviplata\" as const,\n        status: \"pagado\" as const,\n        amount: 680000,\n      },\n    ],\n  }))\n}\n\nexport default function PagosPage() {\n  const currentDate = new Date()\n  const [selectedMonth, setSelectedMonth] = useState(currentDate.getMonth())\n  const [selectedYear, setSelectedYear] = useState(currentDate.getFullYear())\n  const [searchQuery, setSearchQuery] = useState(\"\")\n  const [filterMethod, setFilterMethod] = useState<string>(\"todos\")\n  const [filterSubmethod, setFilterSubmethod] = useState<string>(\"todos\")\n  const [showAddDialog, setShowAddDialog] = useState(false)\n  const [showMarkPaidDialog, setShowMarkPaidDialog] = useState(false)\n  const [selectedPayment, setSelectedPayment] = useState<Payment | null>(null)\n\n  const availableYears = useMemo(() => {\n    const years = []\n    for (let i = 0; i < 6; i++) {\n      years.push(currentDate.getFullYear() + i)\n    }\n    return years\n  }, [currentDate])\n\n  const allMonthsData = useMemo(() => {\n    return generateMockData(selectedYear)\n  }, [selectedYear])\n\n  const selectedMonthData = useMemo(() => {\n    return allMonthsData.find((m) => m.month === selectedMonth)\n  }, [allMonthsData, selectedMonth])\n\n  const filteredPayments = useMemo(() => {\n    if (!selectedMonthData) return []\n\n    return selectedMonthData.payments.filter((payment) => {\n      const matchesSearch =\n        searchQuery === \"\" ||\n        payment.client.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        payment.order.toLowerCase().includes(searchQuery.toLowerCase())\n\n      const matchesMethod = filterMethod === \"todos\" || payment.method === filterMethod\n\n      const matchesSubmethod =\n        filterSubmethod === \"todos\" || (payment.method === \"transferencia\" && payment.submethod === filterSubmethod)\n\n      return matchesSearch && matchesMethod && matchesSubmethod\n    })\n  }, [selectedMonthData, searchQuery, filterMethod, filterSubmethod])\n\n  const totalFiltered = useMemo(() => {\n    return filteredPayments.reduce((sum, payment) => sum + payment.amount, 0)\n  }, [filteredPayments])\n\n  const kpis = useMemo(() => {\n    if (!selectedMonthData) return null\n\n    const totalPagos = selectedMonthData.payments.reduce((sum, p) => sum + p.amount, 0)\n    const totalTransacciones = selectedMonthData.payments.length\n    const contraentregaPendiente = selectedMonthData.payments.filter(\n      (p) => p.method === \"contraentrega\" && p.status === \"pendiente\",\n    ).length\n    const porcentajeContraentrega = (contraentregaPendiente / totalTransacciones) * 100\n    const transferencias = selectedMonthData.payments.filter((p) => p.method === \"transferencia\").length\n    const efectivo = selectedMonthData.payments.filter((p) => p.method === \"efectivo\").length\n    const ticketPromedio = totalPagos / totalTransacciones\n\n    return {\n      totalPagos,\n      totalTransacciones,\n      porcentajeContraentrega,\n      transferencias,\n      efectivo,\n      ticketPromedio,\n    }\n  }, [selectedMonthData])\n\n  const handleMonthChange = useCallback((month: number) => {\n    setSelectedMonth(month)\n  }, [])\n\n  const handleYearChange = useCallback((year: string) => {\n    setSelectedYear(Number.parseInt(year))\n  }, [])\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(e.target.value)\n  }, [])\n\n  const handleMarkPaid = useCallback((payment: Payment) => {\n    setSelectedPayment(payment)\n    setShowMarkPaidDialog(true)\n  }, [])\n\n  if (!selectedMonthData || !kpis) {\n    return <div className=\"flex h-screen items-center justify-center\">Cargando...</div>\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header */}\n      <div className=\"border-b border-gray-200 bg-white px-8 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"font-serif text-3xl font-bold text-gray-900\">Gesti├│n de Pagos</h1>\n            <p className=\"mt-1 text-sm text-gray-600\">Control financiero por m├®todo y subm├®todo de pago</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Exportar\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Printer className=\"mr-2 h-4 w-4\" />\n              Imprimir\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Share2 className=\"mr-2 h-4 w-4\" />\n              Compartir\n            </Button>\n            <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n              <DialogTrigger asChild>\n                <Button size=\"sm\" className=\"bg-[#C8A96A] hover:bg-[#B8996A]\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Agregar Pago\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle className=\"font-serif\">Agregar Nuevo Pago</DialogTitle>\n                  <DialogDescription>Registra un nuevo pago en el sistema</DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Cliente</Label>\n                    <Input placeholder=\"Nombre del cliente\" />\n                  </div>\n                  <div>\n                    <Label>Monto</Label>\n                    <Input type=\"number\" placeholder=\"0\" />\n                  </div>\n                  <div>\n                    <Label>M├®todo de Pago</Label>\n                    <Select>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Seleccionar m├®todo\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"transferencia\">Transferencia</SelectItem>\n                        <SelectItem value=\"efectivo\">Efectivo</SelectItem>\n                        <SelectItem value=\"contraentrega\">Contraentrega</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <Button className=\"w-full bg-[#C8A96A] hover:bg-[#B8996A]\">Guardar Pago</Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n      </div>\n\n      {/* Selector de Mes y A├▒o */}\n      <div className=\"border-b border-gray-200 bg-gray-50 px-8 py-4\">\n        <div className=\"mb-4 flex items-center gap-4\">\n          <Label className=\"text-sm font-medium text-gray-700\">A├▒o:</Label>\n          <Select value={selectedYear.toString()} onValueChange={handleYearChange}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {availableYears.map((year) => (\n                <SelectItem key={year} value={year.toString()}>\n                  {year}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex gap-2\">\n          {MESES.map((mes, idx) => {\n            const monthData = allMonthsData[idx]\n            return (\n              <button\n                key={idx}\n                onClick={() => handleMonthChange(idx)}\n                disabled={!monthData.open}\n                className={`rounded-full px-4 py-2 text-sm font-medium transition-all ${\n                  selectedMonth === idx\n                    ? \"bg-[#C8A96A] text-white shadow-md\"\n                    : monthData.open\n                      ? \"bg-white text-gray-700 hover:bg-gray-100\"\n                      : \"cursor-not-allowed bg-gray-200 text-gray-400\"\n                }`}\n              >\n                {mes}\n              </button>\n            )\n          })}\n        </div>\n      </div>\n\n      {/* KPIs */}\n      <div className=\"px-8 py-6\">\n        <div className=\"mb-6 grid grid-cols-6 gap-4\">\n          <div className=\"rounded-xl border border-gray-200 bg-white p-4 shadow-sm\">\n            <div className=\"mb-1 flex items-center justify-between\">\n              <span className=\"text-xs font-medium uppercase tracking-wider text-gray-600\">Total Pagos</span>\n              <DollarSign className=\"h-4 w-4 text-[#C8A96A]\" />\n            </div>\n            <div className=\"font-serif text-2xl font-bold tabular-nums text-gray-900\">\n              ${(kpis.totalPagos / 1000000).toFixed(1)}M\n            </div>\n          </div>\n          <div className=\"rounded-xl border border-gray-200 bg-white p-4 shadow-sm\">\n            <div className=\"mb-1 flex items-center justify-between\">\n              <span className=\"text-xs font-medium uppercase tracking-wider text-gray-600\">Transacciones</span>\n              <TrendingUp className=\"h-4 w-4 text-blue-500\" />\n            </div>\n            <div className=\"font-serif text-2xl font-bold tabular-nums text-gray-900\">{kpis.totalTransacciones}</div>\n          </div>\n          <div className=\"rounded-xl border border-gray-200 bg-white p-4 shadow-sm\">\n            <div className=\"mb-1 flex items-center justify-between\">\n              <span className=\"text-xs font-medium uppercase tracking-wider text-gray-600\">% Contraentrega</span>\n              <Package className=\"h-4 w-4 text-orange-500\" />\n            </div>\n            <div className=\"font-serif text-2xl font-bold tabular-nums text-gray-900\">\n              {kpis.porcentajeContraentrega.toFixed(1)}%\n            </div>\n          </div>\n          <div className=\"rounded-xl border border-gray-200 bg-white p-4 shadow-sm\">\n            <div className=\"mb-1 flex items-center justify-between\">\n              <span className=\"text-xs font-medium uppercase tracking-wider text-gray-600\">Transferencia</span>\n              <CreditCard className=\"h-4 w-4 text-green-500\" />\n            </div>\n            <div className=\"font-serif text-2xl font-bold tabular-nums text-gray-900\">{kpis.transferencias}</div>\n          </div>\n          <div className=\"rounded-xl border border-gray-200 bg-white p-4 shadow-sm\">\n            <div className=\"mb-1 flex items-center justify-between\">\n              <span className=\"text-xs font-medium uppercase tracking-wider text-gray-600\">Efectivo</span>\n              <Banknote className=\"h-4 w-4 text-purple-500\" />\n            </div>\n            <div className=\"font-serif text-2xl font-bold tabular-nums text-gray-900\">{kpis.efectivo}</div>\n          </div>\n          <div className=\"rounded-xl border border-gray-200 bg-white p-4 shadow-sm\">\n            <div className=\"mb-1 flex items-center justify-between\">\n              <span className=\"text-xs font-medium uppercase tracking-wider text-gray-600\">Ticket Promedio</span>\n              <DollarSign className=\"h-4 w-4 text-amber-500\" />\n            </div>\n            <div className=\"font-serif text-2xl font-bold tabular-nums text-gray-900\">\n              ${(kpis.ticketPromedio / 1000).toFixed(0)}K\n            </div>\n          </div>\n        </div>\n\n        {/* Filtros y B├║squeda */}\n        <div className=\"mb-6 flex items-center gap-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Buscar por cliente o pedido...\"\n              value={searchQuery}\n              onChange={handleSearchChange}\n              className=\"pl-10\"\n            />\n          </div>\n          <Select value={filterMethod} onValueChange={setFilterMethod}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"M├®todo de pago\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"todos\">Todos los m├®todos</SelectItem>\n              <SelectItem value=\"transferencia\">Transferencia</SelectItem>\n              <SelectItem value=\"efectivo\">Efectivo</SelectItem>\n              <SelectItem value=\"contraentrega\">Contraentrega</SelectItem>\n            </SelectContent>\n          </Select>\n          {filterMethod === \"transferencia\" && (\n            <Select value={filterSubmethod} onValueChange={setFilterSubmethod}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Subm├®todo\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"todos\">Todos</SelectItem>\n                <SelectItem value=\"nequi\">Nequi</SelectItem>\n                <SelectItem value=\"bancolombia\">Bancolombia</SelectItem>\n                <SelectItem value=\"daviplata\">Daviplata</SelectItem>\n                <SelectItem value=\"davivienda\">Davivienda</SelectItem>\n              </SelectContent>\n            </Select>\n          )}\n        </div>\n\n        {/* Total Prominente de los Pagos Filtrados */}\n        <div className=\"mb-6 rounded-xl border-2 border-[#C8A96A] bg-gradient-to-br from-amber-50 to-yellow-50 p-2 shadow-md\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-[10px] font-medium uppercase tracking-wider text-gray-600\">\n                Total{\" \"}\n                {filterMethod === \"todos\"\n                  ? \"Todos los M├®todos\"\n                  : filterMethod === \"transferencia\"\n                    ? \"Transferencia\"\n                    : filterMethod === \"efectivo\"\n                      ? \"Efectivo\"\n                      : \"Contraentrega\"}\n                {filterMethod === \"transferencia\" &&\n                  filterSubmethod !== \"todos\" &&\n                  ` - ${filterSubmethod.charAt(0).toUpperCase() + filterSubmethod.slice(1)}`}\n              </p>\n              <p className=\"mt-0.5 font-serif text-lg font-bold tabular-nums text-[#C8A96A]\">\n                ${totalFiltered.toLocaleString(\"es-CO\")}\n              </p>\n              <p className=\"mt-0.5 text-[10px] text-gray-600\">\n                {filteredPayments.length} {filteredPayments.length === 1 ? \"transacci├│n\" : \"transacciones\"}\n              </p>\n            </div>\n            <div className=\"rounded-full bg-[#C8A96A] p-2\">\n              <DollarSign className=\"h-5 w-5 text-white\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Tabla de Pagos */}\n        <div className=\"overflow-hidden rounded-2xl border border-gray-200 bg-white shadow-sm\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-center text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  Fecha\n                </th>\n                <th className=\"px-6 py-3 text-center text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  Pedido\n                </th>\n                <th className=\"px-6 py-3 text-center text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  Cliente\n                </th>\n                <th className=\"px-6 py-3 text-center text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  M├®todo\n                </th>\n                <th className=\"px-6 py-3 text-center text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  Estado\n                </th>\n                <th className=\"px-6 py-3 text-center text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  Monto\n                </th>\n                <th className=\"px-6 py-3 text-center text-xs font-semibold uppercase tracking-wider text-gray-700\">\n                  Acciones\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200\">\n              {filteredPayments.map((payment) => (\n                <tr key={payment.id} className=\"transition-colors hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 text-center text-sm text-gray-900\">{payment.date}</td>\n                  <td className=\"px-6 py-4 text-center text-sm font-medium text-gray-900\">{payment.order}</td>\n                  <td className=\"px-6 py-4 text-center text-sm text-gray-900\">{payment.client}</td>\n                  <td className=\"px-6 py-4\">\n                    <div className=\"flex flex-col items-center gap-1\">\n                      <Badge\n                        variant=\"secondary\"\n                        className={\n                          payment.method === \"transferencia\"\n                            ? \"bg-green-100 text-green-700\"\n                            : payment.method === \"efectivo\"\n                              ? \"bg-purple-100 text-purple-700\"\n                              : \"bg-orange-100 text-orange-700\"\n                        }\n                      >\n                        {payment.method === \"transferencia\"\n                          ? \"Transferencia\"\n                          : payment.method === \"efectivo\"\n                            ? \"Efectivo\"\n                            : \"Contraentrega\"}\n                      </Badge>\n                      {payment.submethod && (\n                        <span className=\"text-xs text-gray-500 capitalize\">{payment.submethod}</span>\n                      )}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <div className=\"flex justify-center\">\n                      <Badge\n                        variant=\"secondary\"\n                        className={\n                          payment.status === \"pagado\"\n                            ? \"bg-green-100 text-green-700\"\n                            : payment.status === \"pendiente\"\n                              ? \"bg-yellow-100 text-yellow-700\"\n                              : \"bg-red-100 text-red-700\"\n                        }\n                      >\n                        {payment.status === \"pagado\"\n                          ? \"Pagado\"\n                          : payment.status === \"pendiente\"\n                            ? \"Pendiente\"\n                            : \"Observaci├│n\"}\n                      </Badge>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 text-center text-sm font-semibold tabular-nums text-[#C8A96A]\">\n                    ${payment.amount.toLocaleString()}\n                  </td>\n                  <td className=\"px-6 py-4 text-center\">\n                    {payment.method === \"contraentrega\" && payment.status === \"pendiente\" && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleMarkPaid(payment)}\n                        className=\"text-green-600 hover:bg-green-50\"\n                      >\n                        <Check className=\"mr-1 h-3 w-3\" />\n                        Marcar Pagado\n                      </Button>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Dialog Marcar como Pagado */}\n      <Dialog open={showMarkPaidDialog} onOpenChange={setShowMarkPaidDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"font-serif\">Marcar como Pagado</DialogTitle>\n            <DialogDescription>┬┐Est├ís seguro de que quieres marcar este pago como pagado?</DialogDescription>\n          </DialogHeader>\n          {selectedPayment && (\n            <div className=\"space-y-4\">\n              <div className=\"rounded-lg border border-gray-200 bg-gray-50 p-4\">\n                <div className=\"mb-2 text-sm font-medium text-gray-700\">Pedido: {selectedPayment.order}</div>\n                <div className=\"mb-2 text-sm text-gray-600\">Cliente: {selectedPayment.client}</div>\n                <div className=\"text-lg font-bold text-[#C8A96A]\">${selectedPayment.amount.toLocaleString()}</div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Button\n                  className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                  onClick={() => {\n                    // Aqu├¡ ir├¡a la l├│gica para marcar como pagado\n                    setShowMarkPaidDialog(false)\n                    setSelectedPayment(null)\n                  }}\n                >\n                  <Check className=\"mr-2 h-4 w-4\" />\n                  Confirmar\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"flex-1 bg-transparent\"\n                  onClick={() => {\n                    setShowMarkPaidDialog(false)\n                    setSelectedPayment(null)\n                  }}\n                >\n                  <X className=\"mr-2 h-4 w-4\" />\n                  Cancelar\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/(dashboard)/pagos/page.tsx"
      },
      {
        "path": "app/(dashboard)/publicidad/page.tsx",
        "content": "\"use client\"\n\nimport * as React from \"react\"\nimport useSWR from \"swr\"\nimport { fetcher } from \"@/lib/ads-fetch\"\nimport { GoldRing, Kpi, LiveBadge } from \"@/components/ads/ui\"\nimport { Toolbar } from \"@/components/ads/Toolbar\"\nimport { AdsTable } from \"@/components/ads/Table\"\n\ntype Campaign = {\n  id: string\n  name: string\n  status: \"active\" | \"paused\"\n}\n\nexport default function Advertising() {\n  const [range, setRange] = React.useState(\"├Ültimos 30 d├¡as\")\n  const [tab, setTab] = React.useState<\"camps\" | \"sets\" | \"ads\">(\"camps\")\n  const [q, setQ] = React.useState(\"\")\n  const [selectedFilter, setSelectedFilter] = React.useState(\"Todas\")\n  const [selectedCampaigns, setSelectedCampaigns] = React.useState<string[]>([])\n\n  const { data: kpiRes } = useSWR(`/api/ads/summary?range=${encodeURIComponent(range)}`, fetcher, {\n    refreshInterval: 5000,\n  })\n  const kpis = kpiRes?.data || {\n    spend: 0,\n    conv: 0,\n    sales: 0,\n    roas: 0,\n    ctr: 0,\n    deltaSpend: \"+0%\",\n  }\n\n  const { data: campRes, mutate } = useSWR(\n    `/api/ads/campaigns?q=${encodeURIComponent(q)}&range=${encodeURIComponent(range)}&state=${encodeURIComponent(selectedFilter)}`,\n    fetcher,\n    { refreshInterval: 5000 },\n  )\n  const campaigns: Campaign[] = campRes?.campaigns || []\n\n  const rows = (campRes?.rows || []).map((r: any) => ({\n    id: r.id,\n    name: r.name,\n    status: r.status as \"active\" | \"paused\",\n    delivery: r.delivery as \"Activa\" | \"Pausada\",\n    receive: r.receive ?? \"ÔÇö\",\n    budget: r.budget ?? 0,\n    spend: r.spend ?? 0,\n    conv: r.conversions ?? 0,\n    cpa: r.cpa ?? null,\n    sales: r.sales ?? 0,\n    revenue: r.revenue ?? 0,\n    roas: r.roas ?? 0,\n    ctr: r.ctr ?? 0,\n  }))\n\n  const handleToggleSelection = (campaignId: string) => {\n    setSelectedCampaigns((prev) =>\n      prev.includes(campaignId) ? prev.filter((id) => id !== campaignId) : [...prev, campaignId],\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"sticky top-0 z-10 bg-white/85 backdrop-blur border-b\">\n        <div className=\"mx-auto max-w-7xl px-6 py-4\">\n          <div className=\"flex items-center gap-3\">\n            <h1 className=\"text-2xl font-bold tracking-tight\">Administrador de anuncios</h1>\n            <LiveBadge />\n          </div>\n          <p className=\"text-sm text-neutral-500\">Gestiona tus campa├▒as publicitarias</p>\n\n          <div className=\"mt-4\">\n            <Toolbar\n              range={range}\n              setRange={setRange}\n              onExport={() => {\n                // Exportar CSV\n                const csv = [\n                  [\"ID\", \"Campa├▒a\", \"Estado\", \"Gastado\", \"Conv\", \"Ventas\", \"Ingresos\", \"ROAS\", \"CTR\"].join(\",\"),\n                  ...rows.map((r: any) =>\n                    [\n                      r.id,\n                      `\"${r.name.replace(/\"/g, '\"\"')}\"`,\n                      r.status,\n                      r.spend,\n                      r.conv,\n                      r.sales,\n                      r.revenue,\n                      r.roas.toFixed(2),\n                      (r.ctr * 100).toFixed(2),\n                    ].join(\",\"),\n                  ),\n                ].join(\"\\n\")\n\n                const blob = new Blob([csv], { type: \"text/csv;charset=utf-8\" })\n                const url = URL.createObjectURL(blob)\n                const a = document.createElement(\"a\")\n                a.href = url\n                a.download = `publicidad_${new Date().toISOString().slice(0, 10)}.csv`\n                document.body.appendChild(a)\n                a.click()\n                document.body.removeChild(a)\n              }}\n              onCharts={() => {\n                // Navegar a gr├íficos o abrir panel\n                alert(\"Funci├│n de gr├íficos - implementar seg├║n necesites\")\n              }}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mx-auto max-w-7xl px-6 py-6\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4\">\n          <Kpi\n            title=\"GASTO TOTAL\"\n            value={`$${kpis.spend.toLocaleString()}`}\n            sub={<span className=\"text-emerald-600\">{kpis.deltaSpend} vs anterior</span>}\n            tone=\"blue\"\n          />\n          <Kpi\n            title=\"CONVERSIONES\"\n            value={kpis.conv?.toLocaleString?.() ?? 0}\n            sub={`$${(kpis.cpa ?? 0).toLocaleString()} por conv.`}\n            tone=\"violet\"\n          />\n          <Kpi\n            title=\"VENTAS\"\n            value={kpis.sales?.toLocaleString?.() ?? 0}\n            sub={<span className=\"text-emerald-600\">{((kpis.convRate ?? 0) * 100).toFixed(2)}% tasa conversi├│n</span>}\n            tone=\"gold\"\n          />\n          <Kpi\n            title=\"ROAS\"\n            value={`${(kpis.roas ?? 0).toFixed(2)}x`}\n            sub={`$${(kpis.revenue ?? 0).toLocaleString()} ingresos`}\n            tone=\"amber\"\n          />\n          <Kpi\n            title=\"CTR PROMEDIO\"\n            value={`${((kpis.ctr ?? 0) * 100).toFixed(2)}%`}\n            sub={`${(kpis.impr ?? 0).toLocaleString()} impresiones`}\n            tone=\"gold\"\n          />\n        </div>\n      </div>\n\n      <div className=\"mx-auto max-w-7xl px-6\">\n        <div className=\"flex flex-wrap items-center gap-2\">\n          <div className=\"flex rounded-xl border border-neutral-200 overflow-hidden\">\n            <TabButton label=\"Campa├▒as\" active={tab === \"camps\"} onClick={() => setTab(\"camps\")} />\n            <TabButton label=\"Conjuntos de anuncios\" active={tab === \"sets\"} onClick={() => setTab(\"sets\")} />\n            <TabButton label=\"Anuncios\" active={tab === \"ads\"} onClick={() => setTab(\"ads\")} />\n          </div>\n\n          <div className=\"flex items-center gap-2 ml-4\">\n            <div className=\"relative\">\n              <input\n                value={q}\n                onChange={(e) => setQ(e.target.value)}\n                placeholder=\"Buscar por nombre, identificador o m├®tricas\"\n                className=\"h-10 w-[380px] rounded-xl border border-neutral-200 bg-white px-4 text-sm outline-none\"\n              />\n              <GoldRing className=\"rounded-xl\" />\n            </div>\n            <select\n              value={selectedFilter}\n              onChange={(e) => setSelectedFilter(e.target.value)}\n              className=\"h-10 rounded-xl border border-neutral-200 bg-white px-3 text-sm\"\n            >\n              <option>Todas</option>\n              <option>Activas</option>\n              <option>Pausadas</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mx-auto max-w-7xl px-6 py-6\">\n        {tab === \"camps\" && (\n          <AdsTable rows={rows} selectedCampaigns={selectedCampaigns} onToggleSelection={handleToggleSelection} />\n        )}\n        {tab === \"sets\" && (\n          <div className=\"rounded-2xl border border-neutral-200 p-8 bg-white text-neutral-500\">\n            Vista \"Conjuntos de anuncios\" (con├®ctala a /api/ads/adsets ÔÇª)\n          </div>\n        )}\n        {tab === \"ads\" && (\n          <div className=\"rounded-2xl border border-neutral-200 p-8 bg-white text-neutral-500\">\n            Vista \"Anuncios\" (con├®ctala a /api/ads/ads ÔÇª)\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nfunction TabButton({ label, active, onClick }: { label: string; active?: boolean; onClick?: () => void }) {\n  return (\n    <button\n      onClick={onClick}\n      className={`px-4 h-10 text-sm ${active ? \"bg-black text-white\" : \"bg-white text-black hover:bg-neutral-50\"} border-r border-neutral-200 first:rounded-l-xl last:rounded-r-xl last:border-r-0`}\n    >\n      {label}\n    </button>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/(dashboard)/publicidad/page.tsx"
      },
      {
        "path": "app/(dashboard)/ventas/page.tsx",
        "content": "\"use client\"\nimport type React from \"react\"\nimport { useMemo, useRef, useState } from \"react\"\nimport useSWR from \"swr\"\nimport { Eye, Upload, FileText } from \"lucide-react\"\n\ntype MetodoPago = \"Efectivo\" | \"Transferencia\" | \"Contraentrega\"\ntype EstadoPago = \"Pagado\" | \"Pendiente Pago\"\n\ntype Venta = {\n  id: string\n  cliente: string\n  fecha: string\n  producto: string\n  total: number\n  estado: EstadoPago\n  metodo: MetodoPago\n  transportadora: string\n  guia: string\n  evidenciaUrl?: string\n  vendedor: string\n  factura?: string\n}\n\nconst fetcher = (url: string) => fetch(url).then((r) => r.json())\n\nconst GOLD = \"rgba(216,189,128,.3)\" // Cambiado de 45% a 30% para gradiente m├ís sutil\nconst goldBtn = \"border-[rgba(216,189,128,.6)] hover:bg-[rgba(216,189,128,.08)]\"\n\nfunction BadgeEstado({ estado, metodo }: { estado: EstadoPago; metodo: MetodoPago }) {\n  const map: Record<EstadoPago, string> = {\n    Pagado: \"bg-emerald-100 text-emerald-900\",\n    \"Pendiente Pago\": \"bg-amber-100 text-amber-900\",\n  }\n  const label = `${metodo} ${estado}`\n  return <span className={`px-3 py-1 rounded-full text-xs ${map[estado]}`}>{label}</span>\n}\n\nexport default function VentasPage() {\n  const { data, mutate, isLoading } = useSWR<{ ok: boolean; data: Venta[] }>(\"/api/ventas/list\", fetcher)\n  const ventas = data?.data ?? []\n\n  // KPIs\n  const resumen = useMemo(() => {\n    const total = ventas.reduce((s, v) => s + v.total, 0)\n    const tTransfer = ventas.filter((v) => v.metodo === \"Transferencia\").reduce((s, v) => s + v.total, 0)\n    const tEfectivo = ventas.filter((v) => v.metodo === \"Efectivo\").reduce((s, v) => s + v.total, 0)\n    const devols = 0\n    const ticket = ventas.length ? Math.round(total / ventas.length) : 0\n    const pagadoMipaquete = 0\n    const pendienteMipaquete = 0\n    return { total, tTransfer, tEfectivo, devols, ticket, pagadoMipaquete, pendienteMipaquete }\n  }, [ventas])\n\n  // Reemplazar evidencia\n  const fileRef = useRef<HTMLInputElement>(null)\n  const [ventaParaEvid, setVentaParaEvid] = useState<Venta | null>(null)\n  function triggerUpload(v: Venta) {\n    setVentaParaEvid(v)\n    fileRef.current?.click()\n  }\n  async function onPickFile(e: React.ChangeEvent<HTMLInputElement>) {\n    const file = e.target.files?.[0]\n    if (!file || !ventaParaEvid) return\n    // Solo simulaci├│n: usamos un ObjectURL como \"evidencia\"\n    const url = URL.createObjectURL(file)\n    await fetch(\"/api/ventas/evidencia\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ ventaId: ventaParaEvid.id, evidenciaUrl: url }),\n    })\n    await mutate()\n    setVentaParaEvid(null)\n  }\n\n  // Ver evidencia (abre en nueva pesta├▒a)\n  function verEvidencia(v: Venta) {\n    if (v.evidenciaUrl) window.open(v.evidenciaUrl, \"_blank\")\n    else alert(\"Sin evidencia cargada a├║n.\")\n  }\n\n  // Ver factura (enlaza a /facturacion/[factura])\n  function verFactura(v: Venta) {\n    if (!v.factura) return alert(\"Sin factura.\")\n    window.open(`/facturacion/${v.factura}`, \"_blank\")\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white text-[#0B0B0C]\">\n      {/* Header */}\n      <section className=\"px-6 lg:px-10 pt-10\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-[40px] font-semibold tracking-tight\">\n              <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-[#111] via-[#111] to-[rgba(216,189,128,0.9)]\">\n                Ventas\n              </span>\n            </h1>\n            <p className=\"text-sm text-neutral-500 mt-1\">Gestiona y visualiza todas las ventas</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <button onClick={() => mutate()} className={`rounded-full h-9 px-4 border ${goldBtn}`}>\n              Actualizar\n            </button>\n            <button className={`rounded-full h-9 px-4 border ${goldBtn}`}>Exportar CSV</button>\n            <button className={`rounded-full h-9 px-4 border ${goldBtn}`}>Exportar Excel</button>\n          </div>\n        </div>\n      </section>\n\n      {/* KPIs */}\n      <section className=\"px-6 lg:px-10 mt-6 grid grid-cols-1 md:grid-cols-3 xl:grid-cols-7 gap-4\">\n        {[\n          { label: \"VENTA TOTAL\", value: `$ ${resumen.total.toLocaleString(\"es-CO\")}` },\n          { label: \"TRANSFERENCIA\", value: `$ ${resumen.tTransfer.toLocaleString(\"es-CO\")}` },\n          { label: \"EFECTIVO\", value: `$ ${resumen.tEfectivo.toLocaleString(\"es-CO\")}` },\n          { label: \"DEVOLUCIONES\", value: `$ ${resumen.devols.toLocaleString(\"es-CO\")}` },\n          { label: \"TICKET PROMEDIO\", value: `$ ${resumen.ticket.toLocaleString(\"es-CO\")}` },\n          { label: \"PAGADO MIPAQUETE\", value: `$ ${resumen.pagadoMipaquete.toLocaleString(\"es-CO\")}` },\n          { label: \"PENDIENTE MIPAQUETE\", value: `$ ${resumen.pendienteMipaquete.toLocaleString(\"es-CO\")}` },\n        ].map((k, i) => (\n          <div\n            key={i}\n            className=\"rounded-2xl border border-white/70 bg-white/95 backdrop-blur-md shadow-[0_12px_36px_rgba(0,0,0,.06)] p-4\"\n            style={{\n              backgroundImage: `linear-gradient(to bottom, #fff, ${GOLD}, #fff)`,\n              backgroundSize: \"100% 600%\",\n              backgroundPosition: \"50% 100%\",\n            }}\n          >\n            <div className=\"text-xs text-neutral-500\">{k.label}</div>\n            <div className=\"text-2xl font-semibold mt-1\">{k.value}</div>\n          </div>\n        ))}\n      </section>\n\n      {/* Filtros */}\n      <section className=\"px-6 lg:px-10 mt-6\">\n        <div className=\"rounded-2xl border border-white/70 bg-white/95 backdrop-blur-md shadow-[0_10px_28px_rgba(0,0,0,.05)] p-3 flex items-center gap-3\">\n          <div className=\"flex-1\">\n            <input\n              className=\"w-full h-10 rounded-full px-4 border border-neutral-200 outline-none\"\n              placeholder=\"Buscar por nombre, factura o fecha (ej: octubre, oct, 15/oct)ÔÇª\"\n            />\n          </div>\n        </div>\n      </section>\n\n      {/* Tabla */}\n      <section className=\"px-6 lg:px-10 mt-4 pb-14\">\n        <div className=\"rounded-2xl border border-white/70 bg-white/95 backdrop-blur-md shadow-[0_10px_28px_rgba(0,0,0,.05)] overflow-hidden\">\n          <table className=\"w-full text-sm\">\n            <thead className=\"bg-neutral-50\">\n              <tr>\n                <th className=\"text-left px-4 py-3\">ID</th>\n                <th className=\"text-left px-4 py-3\">CLIENTE</th>\n                <th className=\"text-left px-4 py-3\">FECHA</th>\n                <th className=\"text-left px-4 py-3\">PRODUCTOS</th>\n                <th className=\"text-left px-4 py-3\">TOTAL</th>\n                <th className=\"text-left px-4 py-3\">ESTADO</th>\n                <th className=\"text-left px-4 py-3\">M├ëTODO PAGO</th>\n                <th className=\"text-left px-4 py-3\">TRANSPORTADORA</th>\n                <th className=\"text-left px-4 py-3\">GU├ìA</th>\n                <th className=\"text-left px-4 py-3\">EVIDENCIA</th>\n                <th className=\"text-left px-4 py-3\">VENDEDOR</th>\n                <th className=\"text-left px-4 py-3\">FACTURA</th>\n              </tr>\n            </thead>\n            <tbody>\n              {(isLoading ? [] : ventas).map((v, idx) => (\n                <tr key={v.id} className={idx % 2 ? \"bg-neutral-50/60\" : \"bg-white\"}>\n                  <td className=\"px-4 py-3 font-medium\">{v.id}</td>\n                  <td className=\"px-4 py-3\">{v.cliente}</td>\n                  <td className=\"px-4 py-3\">\n                    {new Date(v.fecha).toLocaleDateString(\"es-CO\", { day: \"2-digit\", month: \"short\", year: \"numeric\" })}\n                  </td>\n                  <td className=\"px-4 py-3\">{v.producto}</td>\n                  <td className=\"px-4 py-3 tabular-nums\">$ {v.total.toLocaleString(\"es-CO\")}</td>\n                  <td className=\"px-4 py-3\">\n                    <BadgeEstado estado={v.estado} metodo={v.metodo} />\n                  </td>\n                  <td className=\"px-4 py-3\">{v.metodo}</td>\n                  <td className=\"px-4 py-3\">{v.transportadora}</td>\n                  <td className=\"px-4 py-3\">{v.guia}</td>\n\n                  {/* EVIDENCIA: Ver / Reemplazar */}\n                  <td className=\"px-4 py-3\">\n                    <div className=\"flex gap-2\">\n                      <button\n                        onClick={() => verEvidencia(v)}\n                        className={`inline-flex items-center gap-1 rounded-full h-8 px-3 border ${goldBtn}`}\n                        title=\"Ver evidencia\"\n                      >\n                        <Eye className=\"w-4 h-4\" /> Ver\n                      </button>\n                      <button\n                        onClick={() => triggerUpload(v)}\n                        className={`inline-flex items-center gap-1 rounded-full h-8 px-3 border ${goldBtn}`}\n                        title=\"Reemplazar evidencia\"\n                      >\n                        <Upload className=\"w-4 h-4\" /> Reemplazar\n                      </button>\n                    </div>\n                  </td>\n\n                  <td className=\"px-4 py-3\">{v.vendedor}</td>\n\n                  {/* FACTURA: Ver */}\n                  <td className=\"px-4 py-3\">\n                    {v.factura ? (\n                      <button\n                        onClick={() => verFactura(v)}\n                        className={`inline-flex items-center gap-1 rounded-full h-8 px-3 border ${goldBtn}`}\n                        title=\"Ver factura\"\n                      >\n                        <FileText className=\"w-4 h-4\" /> Ver {v.factura}\n                      </button>\n                    ) : (\n                      <span className=\"text-neutral-400\">Sin factura</span>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n\n          <div className=\"flex items-center justify-between px-4 py-4 border-t border-neutral-100 text-sm text-neutral-500\">\n            <span>Mostrando {ventas.length} ventas</span>\n            <div className=\"inline-flex gap-2\">\n              <button className={`rounded-full h-8 px-3 border ${goldBtn}`}>Anterior</button>\n              <button className={`rounded-full h-8 px-3 border ${goldBtn}`}>Siguiente</button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* input oculto para reemplazar evidencia */}\n      <input ref={fileRef} type=\"file\" hidden onChange={onPickFile} />\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/(dashboard)/ventas/page.tsx"
      },
      {
        "path": "app/(dashboard)/ventastotales/loading.tsx",
        "content": "export default function Loading() {\n  return (\n    <div className=\"min-h-screen bg-white p-8\">\n      <div className=\"animate-pulse space-y-8\">\n        <div className=\"h-32 bg-gray-200 rounded-3xl\" />\n        <div className=\"grid grid-cols-4 gap-6\">\n          {[...Array(8)].map((_, i) => (\n            <div key={i} className=\"h-40 bg-gray-200 rounded-3xl\" />\n          ))}\n        </div>\n        <div className=\"h-96 bg-gray-200 rounded-3xl\" />\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:block",
        "target": "~/app/(dashboard)/ventastotales/loading.tsx"
      },
      {
        "path": "app/(dashboard)/ventastotales/page.tsx",
        "content": "\"use client\"\n\nimport { useState, useMemo, useCallback } from \"react\"\nimport { Card } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\nimport { Download, Printer, Share2, Plus, TrendingUp, TrendingDown, FileText, Edit, Eye, Upload } from \"lucide-react\"\nimport { BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\"\n\ntype TransferSub = \"bancolombia\" | \"nequi\" | \"daviplata\" | \"davivienda\"\ntype PayMethod = \"transferencia\" | \"efectivo\" | \"mipaquete\"\ntype PayStatus = \"pagado\" | \"pendiente\"\ntype ExpenseCat = \"oficina\" | \"nomina\" | \"servicios\" | \"logistica\" | \"marketing\" | \"devoluciones\" | \"otros\"\n\ntype Payment = {\n  id: string\n  date: string\n  order: string\n  client: string\n  method: PayMethod\n  submethod?: TransferSub\n  status: PayStatus\n  amount: number\n  note?: string\n  receiptUrl?: string\n}\n\ntype Expense = {\n  id: string\n  date: string\n  vendor: string\n  category: ExpenseCat\n  method: \"efectivo\" | \"transferencia\" | \"tarjeta\" | \"credito\"\n  status: \"pagado\" | \"pendiente\"\n  amount: number\n  note?: string\n  receiptUrl?: string\n  createdBy: string // Agregado campo obligatorio \"createdBy\"\n}\n\ntype MonthFinance = {\n  month: number\n  year: number\n  cogs: number\n  payments: Payment[]\n  expenses: Expense[]\n  isOpen: boolean\n}\n\nconst MOCK_DATA: MonthFinance[] = [\n  {\n    month: 1,\n    year: 2025,\n    cogs: 11000000,\n    isOpen: false,\n    payments: [\n      {\n        id: \"p1\",\n        date: \"2025-01-05\",\n        order: \"ORD-2025-01-001\",\n        client: \"Mar├¡a Gonz├ílez\",\n        method: \"transferencia\",\n        submethod: \"nequi\",\n        status: \"pagado\",\n        amount: 1250000,\n        receiptUrl: \"https://example.com/receipt1.jpg\",\n      },\n      {\n        id: \"p2\",\n        date: \"2025-01-10\",\n        order: \"ORD-2025-01-002\",\n        client: \"Carlos Ram├¡rez\",\n        method: \"efectivo\",\n        status: \"pagado\",\n        amount: 800000,\n      },\n    ],\n    expenses: [\n      {\n        id: \"e1\",\n        date: \"2025-01-03\",\n        vendor: \"Papeler├¡a Central\",\n        category: \"oficina\",\n        method: \"transferencia\",\n        status: \"pagado\",\n        amount: 450000,\n        receiptUrl: \"https://example.com/expense1.jpg\",\n        createdBy: \"Juan P├®rez\", // Added for mock data consistency\n      },\n      {\n        id: \"e2\",\n        date: \"2025-01-15\",\n        vendor: \"N├│mina Enero\",\n        category: \"nomina\",\n        method: \"transferencia\",\n        status: \"pagado\",\n        amount: 18500000,\n        createdBy: \"Ana L├│pez\", // Added for mock data consistency\n      },\n    ],\n  },\n  // ... m├ís meses con datos variados\n]\n\nconst MONTHS = [\"ENE\", \"FEB\", \"MAR\", \"ABR\", \"MAY\", \"JUN\", \"JUL\", \"AGO\", \"SEP\", \"OCT\", \"NOV\", \"DIC\"]\n\nconst COLORS = {\n  transferencia: \"#10b981\",\n  efectivo: \"#3b82f6\",\n  mipaquete: \"#f59e0b\",\n  bancolombia: \"#FFDD00\",\n  nequi: \"#A020F0\",\n  daviplata: \"#FF0000\",\n  davivienda: \"#ED1C24\",\n}\n\nexport default function VentasGastosPage() {\n  const currentDate = new Date()\n  const [selectedMonth, setSelectedMonth] = useState(currentDate.getMonth())\n  const [selectedYear, setSelectedYear] = useState(currentDate.getFullYear())\n  const [searchQuery, setSearchQuery] = useState(\"\")\n\n  const [isAddPaymentOpen, setIsAddPaymentOpen] = useState(false)\n  const [isAddExpenseOpen, setIsAddExpenseOpen] = useState(false)\n  const [isEditCOGSOpen, setIsEditCOGSOpen] = useState(false)\n\n  const [paymentForm, setPaymentForm] = useState({\n    date: \"\",\n    order: \"\",\n    client: \"\",\n    method: \"\" as PayMethod | \"\",\n    submethod: \"\" as TransferSub | \"\",\n    amount: \"\",\n    status: \"pagado\" as PayStatus,\n    note: \"\",\n  })\n  const [paymentFile, setPaymentFile] = useState<File | null>(null)\n\n  const [expenseForm, setExpenseForm] = useState({\n    date: \"\",\n    vendor: \"\",\n    category: \"\" as ExpenseCat | \"\",\n    method: \"\" as \"efectivo\" | \"transferencia\" | \"tarjeta\" | \"credito\" | \"\",\n    amount: \"\",\n    status: \"pagado\" as \"pagado\" | \"pendiente\",\n    note: \"\",\n    createdBy: \"\", // Agregado campo obligatorio \"createdBy\"\n  })\n  const [expenseFile, setExpenseFile] = useState<File | null>(null)\n\n  const [cogsAmount, setCogsAmount] = useState(\"\")\n\n  const monthData = useMemo(() => {\n    return (\n      MOCK_DATA.find((m) => m.month === selectedMonth + 1 && m.year === selectedYear) || {\n        month: selectedMonth + 1,\n        year: selectedYear,\n        cogs: 0,\n        payments: [],\n        expenses: [],\n        isOpen: true,\n      }\n    )\n  }, [selectedMonth, selectedYear])\n\n  const kpis = useMemo(() => {\n    const totalVentas = monthData.payments.reduce((sum, p) => sum + p.amount, 0)\n    const transferencia = monthData.payments\n      .filter((p) => p.method === \"transferencia\")\n      .reduce((sum, p) => sum + p.amount, 0)\n    const efectivo = monthData.payments.filter((p) => p.method === \"efectivo\").reduce((sum, p) => sum + p.amount, 0)\n    const mipaquetePagado = monthData.payments\n      .filter((p) => p.method === \"mipaquete\" && p.status === \"pagado\")\n      .reduce((sum, p) => sum + p.amount, 0)\n    const mipaquetePendiente = monthData.payments\n      .filter((p) => p.method === \"mipaquete\" && p.status === \"pendiente\")\n      .reduce((sum, p) => sum + p.amount, 0)\n    const totalGastos = monthData.expenses.reduce((sum, e) => sum + e.amount, 0)\n    const utilidadNeta = totalVentas - monthData.cogs - totalGastos\n    const margen = totalVentas > 0 ? (utilidadNeta / totalVentas) * 100 : 0\n\n    return {\n      totalVentas,\n      transferencia,\n      efectivo,\n      mipaquetePagado,\n      mipaquetePendiente,\n      totalGastos,\n      cogs: monthData.cogs,\n      utilidadNeta,\n      margen,\n    }\n  }, [monthData])\n\n  const formatCOP = useCallback((amount: number) => {\n    return new Intl.NumberFormat(\"es-CO\", {\n      style: \"currency\",\n      currency: \"COP\",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount)\n  }, [])\n\n  const waterfallData = useMemo(() => {\n    return [\n      { name: \"Ventas\", value: kpis.totalVentas / 1000000, fill: \"#10b981\" },\n      { name: \"COGS\", value: -kpis.cogs / 1000000, fill: \"#f59e0b\" },\n      { name: \"Gastos\", value: -kpis.totalGastos / 1000000, fill: \"#ef4444\" },\n      { name: \"Utilidad\", value: kpis.utilidadNeta / 1000000, fill: \"#3b82f6\" },\n    ]\n  }, [kpis])\n\n  const paymentMethodsData = useMemo(() => {\n    return [\n      { name: \"Transferencia\", value: kpis.transferencia, color: COLORS.transferencia },\n      { name: \"Efectivo\", value: kpis.efectivo, color: COLORS.efectivo },\n      { name: \"MiPaquete\", value: kpis.mipaquetePagado + kpis.mipaquetePendiente, color: COLORS.mipaquete },\n    ].filter((item) => item.value > 0)\n  }, [kpis])\n\n  const transferSubData = useMemo(() => {\n    const subs = monthData.payments\n      .filter((p) => p.method === \"transferencia\" && p.submethod)\n      .reduce(\n        (acc, p) => {\n          const sub = p.submethod!\n          acc[sub] = (acc[sub] || 0) + p.amount\n          return acc\n        },\n        {} as Record<TransferSub, number>,\n      )\n\n    return Object.entries(subs).map(([name, value]) => ({\n      name: name.charAt(0).toUpperCase() + name.slice(1),\n      value,\n      color: COLORS[name as TransferSub],\n    }))\n  }, [monthData.payments])\n\n  const expensesCategoryData = useMemo(() => {\n    const categories = monthData.expenses.reduce(\n      (acc, e) => {\n        acc[e.category] = (acc[e.category] || 0) + e.amount\n        return acc\n      },\n      {} as Record<ExpenseCat, number>,\n    )\n\n    const categoryNames: Record<ExpenseCat, string> = {\n      oficina: \"Oficina\",\n      nomina: \"N├│mina\",\n      servicios: \"Servicios\",\n      logistica: \"Log├¡stica\",\n      marketing: \"Marketing\",\n      devoluciones: \"Devoluciones\",\n      otros: \"Otros\",\n    }\n\n    return Object.entries(categories).map(([cat, value]) => ({\n      name: categoryNames[cat as ExpenseCat],\n      value: value / 1000000,\n    }))\n  }, [monthData.expenses])\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"bg-white border-b border-gray-200 px-8 py-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"font-serif text-4xl font-bold text-gray-900\">Ventas & Gastos</h1>\n            <p className=\"text-sm text-gray-600 mt-1\">Control financiero por m├®todo y subm├®todo de pago</p>\n          </div>\n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\" className=\"gap-2 bg-transparent\">\n              <Download className=\"h-4 w-4\" />\n              Exportar\n            </Button>\n            <Button variant=\"outline\" className=\"gap-2 bg-transparent\">\n              <Printer className=\"h-4 w-4\" />\n              Imprimir\n            </Button>\n            <Button variant=\"outline\" className=\"gap-2 bg-transparent\">\n              <Share2 className=\"h-4 w-4\" />\n              Compartir\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex gap-1\">\n            {MONTHS.map((month, idx) => (\n              <button\n                key={month}\n                onClick={() => setSelectedMonth(idx)}\n                className={`px-4 py-2 text-sm font-semibold rounded-lg transition-all ${\n                  selectedMonth === idx\n                    ? \"bg-[#C8A96A] text-white shadow-md\"\n                    : \"bg-gray-100 text-gray-600 hover:bg-gray-200\"\n                }`}\n              >\n                {month}\n              </button>\n            ))}\n          </div>\n          <Select value={selectedYear.toString()} onValueChange={(v) => setSelectedYear(Number.parseInt(v))}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {[2024, 2025, 2026].map((year) => (\n                <SelectItem key={year} value={year.toString()}>\n                  {year}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div className=\"p-8 space-y-8\">\n        <div className=\"grid grid-cols-4 gap-6\">\n          <Card className=\"p-6 rounded-3xl border border-gray-200 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <p className=\"text-xs font-semibold text-gray-600 uppercase\">Ventas Totales</p>\n              <TrendingUp className=\"h-4 w-4 text-emerald-600\" />\n            </div>\n            <p className=\"text-3xl font-serif font-bold text-gray-900 tabular-nums\">{formatCOP(kpis.totalVentas)}</p>\n            <p className=\"text-xs text-emerald-600 font-semibold mt-2\">+12% vs mes anterior</p>\n          </Card>\n\n          <Card className=\"p-6 rounded-3xl border border-gray-200 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <p className=\"text-xs font-semibold text-gray-600 uppercase\">Transferencia</p>\n              <TrendingUp className=\"h-4 w-4 text-emerald-600\" />\n            </div>\n            <p className=\"text-3xl font-serif font-bold text-gray-900 tabular-nums\">{formatCOP(kpis.transferencia)}</p>\n            <p className=\"text-xs text-emerald-600 font-semibold mt-2\">+8% vs mes anterior</p>\n          </Card>\n\n          <Card className=\"p-6 rounded-3xl border border-gray-200 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <p className=\"text-xs font-semibold text-gray-600 uppercase\">Efectivo</p>\n              <TrendingDown className=\"h-4 w-4 text-red-600\" />\n            </div>\n            <p className=\"text-3xl font-serif font-bold text-gray-900 tabular-nums\">{formatCOP(kpis.efectivo)}</p>\n            <p className=\"text-xs text-red-600 font-semibold mt-2\">-5% vs mes anterior</p>\n          </Card>\n\n          <Card className=\"p-6 rounded-3xl border border-gray-200 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <p className=\"text-xs font-semibold text-gray-600 uppercase\">MiPaquete</p>\n              <TrendingUp className=\"h-4 w-4 text-emerald-600\" />\n            </div>\n            <p className=\"text-2xl font-serif font-bold text-gray-900 tabular-nums\">\n              {formatCOP(kpis.mipaquetePagado)}\n            </p>\n            <p className=\"text-xs text-amber-600 font-semibold mt-2\">Pendiente: {formatCOP(kpis.mipaquetePendiente)}</p>\n          </Card>\n\n          <Card className=\"p-6 rounded-3xl border border-gray-200 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <p className=\"text-xs font-semibold text-gray-600 uppercase\">Gastos Totales</p>\n              <TrendingUp className=\"h-4 w-4 text-red-600\" />\n            </div>\n            <p className=\"text-3xl font-serif font-bold text-gray-900 tabular-nums\">{formatCOP(kpis.totalGastos)}</p>\n            <p className=\"text-xs text-red-600 font-semibold mt-2\">+3% vs mes anterior</p>\n          </Card>\n\n          <Card className=\"p-6 rounded-3xl border border-gray-200 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <p className=\"text-xs font-semibold text-gray-600 uppercase\">COGS</p>\n              <Edit className=\"h-4 w-4 text-[#C8A96A] cursor-pointer\" onClick={() => setIsEditCOGSOpen(true)} />\n            </div>\n            <p className=\"text-3xl font-serif font-bold text-gray-900 tabular-nums\">{formatCOP(kpis.cogs)}</p>\n            <p className=\"text-xs text-gray-600 font-semibold mt-2\">\n              {((kpis.cogs / kpis.totalVentas) * 100).toFixed(1)}% de ventas\n            </p>\n          </Card>\n\n          <Card className=\"p-6 rounded-3xl border-2 border-[#C8A96A] shadow-[0_20px_60px_rgba(0,0,0,.15)] bg-gradient-to-br from-amber-50 to-yellow-50\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <p className=\"text-xs font-semibold text-gray-600 uppercase\">Utilidad Neta</p>\n              {kpis.utilidadNeta >= 0 ? (\n                <TrendingUp className=\"h-4 w-4 text-emerald-600\" />\n              ) : (\n                <TrendingDown className=\"h-4 w-4 text-red-600\" />\n              )}\n            </div>\n            <p\n              className={`text-3xl font-serif font-bold tabular-nums ${\n                kpis.utilidadNeta >= 0 ? \"text-emerald-600\" : \"text-red-600\"\n              }`}\n            >\n              {formatCOP(kpis.utilidadNeta)}\n            </p>\n            <p className=\"text-xs text-gray-600 font-semibold mt-2\">Ventas - COGS - Gastos</p>\n          </Card>\n\n          <Card className=\"p-6 rounded-3xl border-2 border-[#C8A96A] shadow-[0_20px_60px_rgba(0,0,0,.15)] bg-gradient-to-br from-amber-50 to-yellow-50\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <p className=\"text-xs font-semibold text-gray-600 uppercase\">Margen %</p>\n              {kpis.margen >= 0 ? (\n                <TrendingUp className=\"h-4 w-4 text-emerald-600\" />\n              ) : (\n                <TrendingDown className=\"h-4 w-4 text-red-600\" />\n              )}\n            </div>\n            <p\n              className={`text-3xl font-serif font-bold tabular-nums ${\n                kpis.margen >= 0 ? \"text-emerald-600\" : \"text-red-600\"\n              }`}\n            >\n              {kpis.margen.toFixed(1)}%\n            </p>\n            <p className=\"text-xs text-gray-600 font-semibold mt-2\">Utilidad / Ventas</p>\n          </Card>\n        </div>\n\n        <Card className=\"p-6 rounded-3xl border border-gray-200 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n          <h3 className=\"font-serif text-xl font-bold text-gray-900 mb-4\">Bridge de Utilidad</h3>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={waterfallData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis label={{ value: \"Millones COP\", angle: -90, position: \"insideLeft\" }} />\n              <Tooltip formatter={(value: number) => `$${value.toFixed(1)}M`} />\n              <Bar dataKey=\"value\" radius={[8, 8, 0, 0]}>\n                {waterfallData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.fill} />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </Card>\n\n        <div className=\"grid grid-cols-2 gap-6\">\n          <Card className=\"p-6 rounded-3xl border border-gray-200 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n            <h3 className=\"font-serif text-xl font-bold text-gray-900 mb-4\">Participaci├│n por M├®todo</h3>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={paymentMethodsData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={(entry) => `${entry.name}: ${((entry.value / kpis.totalVentas) * 100).toFixed(1)}%`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {paymentMethodsData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip formatter={(value: number) => formatCOP(value)} />\n              </PieChart>\n            </ResponsiveContainer>\n          </Card>\n\n          {transferSubData.length > 0 && (\n            <Card className=\"p-6 rounded-3xl border border-gray-200 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n              <h3 className=\"font-serif text-xl font-bold text-gray-900 mb-4\">Desglose de Transferencias</h3>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={transferSubData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={(entry) => `${entry.name}: ${((entry.value / kpis.transferencia) * 100).toFixed(1)}%`}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                  >\n                    {transferSubData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip formatter={(value: number) => formatCOP(value)} />\n                </PieChart>\n              </ResponsiveContainer>\n            </Card>\n          )}\n        </div>\n\n        <Card className=\"p-6 rounded-3xl border border-gray-200 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-serif text-xl font-bold text-gray-900\">Pagos del Mes</h3>\n            <Button onClick={() => setIsAddPaymentOpen(true)} className=\"bg-[#C8A96A] hover:bg-[#B8996A] gap-2\">\n              <Plus className=\"h-4 w-4\" />\n              Agregar Pago\n            </Button>\n          </div>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead className=\"bg-gray-50 border-b border-gray-200\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700\">Fecha</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700\">N┬║ Pedido</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700\">Cliente</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700\">M├®todo</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700\">Subm├®todo</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700\">Comprobante</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700\">Estado</th>\n                  <th className=\"px-4 py-3 text-right text-xs font-bold text-gray-700\">Importe</th>\n                  <th className=\"px-4 py-3 text-center text-xs font-bold text-gray-700\">Acciones</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-100\">\n                {monthData.payments.length > 0 ? (\n                  monthData.payments.map((payment) => (\n                    <tr key={payment.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-4 py-3 text-sm text-gray-900\">{payment.date}</td>\n                      <td className=\"px-4 py-3 text-sm font-semibold text-gray-900\">{payment.order}</td>\n                      <td className=\"px-4 py-3 text-sm text-gray-900\">{payment.client}</td>\n                      <td className=\"px-4 py-3 text-sm\">\n                        <span className=\"px-2 py-1 rounded-full text-xs font-semibold bg-emerald-100 text-emerald-700\">\n                          {payment.method}\n                        </span>\n                      </td>\n                      <td className=\"px-4 py-3 text-sm text-gray-600\">\n                        {payment.submethod\n                          ? payment.submethod.charAt(0).toUpperCase() + payment.submethod.slice(1)\n                          : \"-\"}\n                      </td>\n                      <td className=\"px-4 py-3 text-sm\">\n                        {payment.receiptUrl ? (\n                          <span className=\"px-2 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700 flex items-center gap-1 w-fit\">\n                            <FileText className=\"h-3 w-3\" />\n                            Adjunto\n                          </span>\n                        ) : (\n                          <span className=\"text-gray-400\">-</span>\n                        )}\n                      </td>\n                      <td className=\"px-4 py-3 text-sm\">\n                        <span\n                          className={`px-2 py-1 rounded-full text-xs font-semibold ${\n                            payment.status === \"pagado\"\n                              ? \"bg-emerald-100 text-emerald-700\"\n                              : \"bg-amber-100 text-amber-700\"\n                          }`}\n                        >\n                          {payment.status}\n                        </span>\n                      </td>\n                      <td className=\"px-4 py-3 text-sm font-semibold text-gray-900 text-right tabular-nums\">\n                        {formatCOP(payment.amount)}\n                      </td>\n                      <td className=\"px-4 py-3 text-sm text-center\">\n                        <div className=\"flex items-center justify-center gap-2\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))\n                ) : (\n                  <tr>\n                    <td colSpan={9} className=\"px-4 py-8 text-center text-sm text-gray-500\">\n                      No hay pagos registrados para este mes\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n\n        {expensesCategoryData.length > 0 && (\n          <Card className=\"p-6 rounded-3xl border border-gray-200 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n            <h3 className=\"font-serif text-xl font-bold text-gray-900 mb-4\">Gastos por Categor├¡a</h3>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={expensesCategoryData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis label={{ value: \"Millones COP\", angle: -90, position: \"insideLeft\" }} />\n                <Tooltip formatter={(value: number) => `$${value.toFixed(1)}M`} />\n                <Bar dataKey=\"value\" fill=\"#ef4444\" radius={[8, 8, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </Card>\n        )}\n\n        <Card className=\"p-6 rounded-3xl border border-gray-200 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-serif text-xl font-bold text-gray-900\">Gastos del Mes</h3>\n            <Button onClick={() => setIsAddExpenseOpen(true)} className=\"bg-[#C8A96A] hover:bg-[#B8996A] gap-2\">\n              <Plus className=\"h-4 w-4\" />\n              Agregar Gasto\n            </Button>\n          </div>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead className=\"bg-gray-50 border-b border-gray-200\">\n                <tr>\n                  <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700\">Fecha</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700\">Proveedor</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700\">Categor├¡a</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700\">M├®todo</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700\">Soporte</th>\n                  <th className=\"px-4 py-3 text-left text-xs font-bold text-gray-700\">Estado</th>\n                  <th className=\"px-4 py-3 text-right text-xs font-bold text-gray-700\">Monto</th>\n                  <th className=\"px-4 py-3 text-center text-xs font-bold text-gray-700\">Acciones</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-100\">\n                {monthData.expenses.length > 0 ? (\n                  monthData.expenses.map((expense) => (\n                    <tr key={expense.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-4 py-3 text-sm text-gray-900\">{expense.date}</td>\n                      <td className=\"px-4 py-3 text-sm text-gray-900\">{expense.vendor}</td>\n                      <td className=\"px-4 py-3 text-sm\">\n                        <span className=\"px-2 py-1 rounded-full text-xs font-semibold bg-red-100 text-red-700\">\n                          {expense.category}\n                        </span>\n                      </td>\n                      <td className=\"px-4 py-3 text-sm text-gray-600\">{expense.method}</td>\n                      <td className=\"px-4 py-3 text-sm\">\n                        {expense.receiptUrl ? (\n                          <span className=\"px-2 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-700 flex items-center gap-1 w-fit\">\n                            <FileText className=\"h-3 w-3\" />\n                            Adjunto\n                          </span>\n                        ) : (\n                          <span className=\"text-gray-400\">-</span>\n                        )}\n                      </td>\n                      <td className=\"px-4 py-3 text-sm\">\n                        <span\n                          className={`px-2 py-1 rounded-full text-xs font-semibold ${\n                            expense.status === \"pagado\"\n                              ? \"bg-emerald-100 text-emerald-700\"\n                              : \"bg-amber-100 text-amber-700\"\n                          }`}\n                        >\n                          {expense.status}\n                        </span>\n                      </td>\n                      <td className=\"px-4 py-3 text-sm font-semibold text-gray-900 text-right tabular-nums\">\n                        {formatCOP(expense.amount)}\n                      </td>\n                      <td className=\"px-4 py-3 text-sm text-center\">\n                        <div className=\"flex items-center justify-center gap-2\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))\n                ) : (\n                  <tr>\n                    <td colSpan={8} className=\"px-4 py-8 text-center text-sm text-gray-500\">\n                      No hay gastos registrados para este mes\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n\n        <Card className=\"p-6 rounded-3xl border-2 border-[#C8A96A] shadow-[0_20px_60px_rgba(0,0,0,.15)] bg-gradient-to-br from-amber-50 to-yellow-50\">\n          <div className=\"grid grid-cols-4 gap-6\">\n            <div>\n              <p className=\"text-xs font-semibold text-gray-600 uppercase mb-2\">Ventas Totales</p>\n              <p className=\"text-2xl font-serif font-bold text-emerald-600 tabular-nums\">\n                {formatCOP(kpis.totalVentas)}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-xs font-semibold text-gray-600 uppercase mb-2\">Gastos Totales</p>\n              <p className=\"text-2xl font-serif font-bold text-red-600 tabular-nums\">{formatCOP(kpis.totalGastos)}</p>\n            </div>\n            <div>\n              <p className=\"text-xs font-semibold text-gray-600 uppercase mb-2\">COGS</p>\n              <p className=\"text-2xl font-serif font-bold text-amber-600 tabular-nums\">{formatCOP(kpis.cogs)}</p>\n            </div>\n            <div>\n              <p className=\"text-xs font-semibold text-gray-600 uppercase mb-2\">Utilidad Neta</p>\n              <p\n                className={`text-2xl font-serif font-bold tabular-nums ${\n                  kpis.utilidadNeta >= 0 ? \"text-emerald-600\" : \"text-red-600\"\n                }`}\n              >\n                {formatCOP(kpis.utilidadNeta)}\n              </p>\n              <p className=\"text-xs text-gray-600 font-semibold mt-1\">Margen: {kpis.margen.toFixed(1)}%</p>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      <Dialog open={isAddPaymentOpen} onOpenChange={setIsAddPaymentOpen}>\n        <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"font-serif text-2xl\">Agregar Nuevo Pago</DialogTitle>\n            <DialogDescription>Registra un nuevo pago recibido</DialogDescription>\n          </DialogHeader>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault()\n              if (paymentForm.method === \"transferencia\" && !paymentFile) {\n                alert(\"Debes adjuntar el comprobante de transferencia\")\n                return\n              }\n              alert(\"Pago agregado exitosamente\")\n              setIsAddPaymentOpen(false)\n            }}\n          >\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"paymentDate\">Fecha *</Label>\n                  <Input\n                    id=\"paymentDate\"\n                    type=\"date\"\n                    value={paymentForm.date}\n                    onChange={(e) => setPaymentForm({ ...paymentForm, date: e.target.value })}\n                    required\n                  />\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"paymentOrder\">N┬║ Pedido *</Label>\n                  <Input\n                    id=\"paymentOrder\"\n                    value={paymentForm.order}\n                    onChange={(e) => setPaymentForm({ ...paymentForm, order: e.target.value })}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"paymentClient\">Cliente *</Label>\n                <Input\n                  id=\"paymentClient\"\n                  value={paymentForm.client}\n                  onChange={(e) => setPaymentForm({ ...paymentForm, client: e.target.value })}\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"paymentMethod\">M├®todo *</Label>\n                  <Select\n                    value={paymentForm.method}\n                    onValueChange={(value) => setPaymentForm({ ...paymentForm, method: value as PayMethod })}\n                    required\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecciona m├®todo\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"transferencia\">Transferencia</SelectItem>\n                      <SelectItem value=\"efectivo\">Efectivo</SelectItem>\n                      <SelectItem value=\"mipaquete\">MiPaquete</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {paymentForm.method === \"transferencia\" && (\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"paymentSubmethod\">Subm├®todo *</Label>\n                    <Select\n                      value={paymentForm.submethod}\n                      onValueChange={(value) => setPaymentForm({ ...paymentForm, submethod: value as TransferSub })}\n                      required\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Selecciona banco\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"bancolombia\">Bancolombia</SelectItem>\n                        <SelectItem value=\"nequi\">Nequi</SelectItem>\n                        <SelectItem value=\"daviplata\">Daviplata</SelectItem>\n                        <SelectItem value=\"davivienda\">Davivienda</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"paymentAmount\">Importe (COP) *</Label>\n                  <Input\n                    id=\"paymentAmount\"\n                    type=\"number\"\n                    value={paymentForm.amount}\n                    onChange={(e) => setPaymentForm({ ...paymentForm, amount: e.target.value })}\n                    required\n                  />\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"paymentStatus\">Estado *</Label>\n                  <Select\n                    value={paymentForm.status}\n                    onValueChange={(value) => setPaymentForm({ ...paymentForm, status: value as PayStatus })}\n                    required\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pagado\">Pagado</SelectItem>\n                      <SelectItem value=\"pendiente\">Pendiente</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"paymentFile\">Comprobante {paymentForm.method === \"transferencia\" && \"*\"}</Label>\n                <div className=\"flex items-center gap-2\">\n                  <Input\n                    id=\"paymentFile\"\n                    type=\"file\"\n                    accept=\"image/*,.pdf\"\n                    onChange={(e) => setPaymentFile(e.target.files?.[0] || null)}\n                    required={paymentForm.method === \"transferencia\"}\n                    className=\"cursor-pointer\"\n                  />\n                  {paymentFile && (\n                    <span className=\"text-xs text-emerald-600 font-semibold flex items-center gap-1\">\n                      <Upload className=\"h-3 w-3\" />\n                      {paymentFile.name}\n                    </span>\n                  )}\n                </div>\n                {paymentForm.method === \"transferencia\" && (\n                  <p className=\"text-xs text-amber-600 font-semibold\">* Obligatorio para transferencias</p>\n                )}\n              </div>\n\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"paymentNote\">Nota (opcional)</Label>\n                <Textarea\n                  id=\"paymentNote\"\n                  value={paymentForm.note}\n                  onChange={(e) => setPaymentForm({ ...paymentForm, note: e.target.value })}\n                  rows={3}\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={() => setIsAddPaymentOpen(false)}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\" className=\"bg-[#C8A96A] hover:bg-[#B8996A]\">\n                Guardar Pago\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isAddExpenseOpen} onOpenChange={setIsAddExpenseOpen}>\n        <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"font-serif text-2xl\">Agregar Nuevo Gasto</DialogTitle>\n            <DialogDescription>Registra un nuevo gasto del negocio</DialogDescription>\n          </DialogHeader>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault()\n              if (!expenseForm.createdBy.trim()) {\n                alert(\"Debes ingresar el nombre de quien realiza el gasto\")\n                return\n              }\n              alert(\"Gasto agregado exitosamente\")\n              setIsAddExpenseOpen(false)\n            }}\n          >\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"expenseDate\">Fecha *</Label>\n                  <Input\n                    id=\"expenseDate\"\n                    type=\"date\"\n                    value={expenseForm.date}\n                    onChange={(e) => setExpenseForm({ ...expenseForm, date: e.target.value })}\n                    required\n                  />\n                </div>\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"expenseVendor\">Proveedor *</Label>\n                  <Input\n                    id=\"expenseVendor\"\n                    value={expenseForm.vendor}\n                    onChange={(e) => setExpenseForm({ ...expenseForm, vendor: e.target.value })}\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"expenseCreatedBy\">Realizado por *</Label>\n                <Input\n                  id=\"expenseCreatedBy\"\n                  value={expenseForm.createdBy}\n                  onChange={(e) => setExpenseForm({ ...expenseForm, createdBy: e.target.value })}\n                  placeholder=\"Nombre de quien realiza el gasto\"\n                  required\n                />\n                <p className=\"text-xs text-amber-600 font-semibold\">* Campo obligatorio</p>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"expenseCategory\">Categor├¡a *</Label>\n                  <Select\n                    value={expenseForm.category}\n                    onValueChange={(value) => setExpenseForm({ ...expenseForm, category: value as ExpenseCat })}\n                    required\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecciona categor├¡a\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"oficina\">Oficina</SelectItem>\n                      <SelectItem value=\"nomina\">N├│mina</SelectItem>\n                      <SelectItem value=\"servicios\">Servicios P├║blicos</SelectItem>\n                      <SelectItem value=\"logistica\">Log├¡stica/Env├¡os</SelectItem>\n                      <SelectItem value=\"marketing\">Marketing/Ads</SelectItem>\n                      <SelectItem value=\"devoluciones\">Devoluciones</SelectItem>\n                      <SelectItem value=\"otros\">Otros</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"expenseMethod\">M├®todo *</Label>\n                  <Select\n                    value={expenseForm.method}\n                    onValueChange={(value) =>\n                      setExpenseForm({\n                        ...expenseForm,\n                        method: value as \"efectivo\" | \"transferencia\" | \"tarjeta\" | \"credito\",\n                      })\n                    }\n                    required\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecciona m├®todo\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"efectivo\">Efectivo</SelectItem>\n                      <SelectItem value=\"transferencia\">Transferencia</SelectItem>\n                      <SelectItem value=\"tarjeta\">Tarjeta</SelectItem>\n                      <SelectItem value=\"credito\">Cr├®dito</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"expenseAmount\">Monto (COP) *</Label>\n                  <Input\n                    id=\"expenseAmount\"\n                    type=\"number\"\n                    value={expenseForm.amount}\n                    onChange={(e) => setExpenseForm({ ...expenseForm, amount: e.target.value })}\n                    required\n                  />\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"expenseStatus\">Estado *</Label>\n                  <Select\n                    value={expenseForm.status}\n                    onValueChange={(value) =>\n                      setExpenseForm({ ...expenseForm, status: value as \"pagado\" | \"pendiente\" })\n                    }\n                    required\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pagado\">Pagado</SelectItem>\n                      <SelectItem value=\"pendiente\">Pendiente</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"expenseFile\">Soporte (opcional)</Label>\n                <div className=\"flex items-center gap-2\">\n                  <Input\n                    id=\"expenseFile\"\n                    type=\"file\"\n                    accept=\"image/*,.pdf\"\n                    onChange={(e) => setExpenseFile(e.target.files?.[0] || null)}\n                    className=\"cursor-pointer\"\n                  />\n                  {expenseFile && (\n                    <span className=\"text-xs text-emerald-600 font-semibold flex items-center gap-1\">\n                      <Upload className=\"h-3 w-3\" />\n                      {expenseFile.name}\n                    </span>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"expenseNote\">Nota (opcional)</Label>\n                <Textarea\n                  id=\"expenseNote\"\n                  value={expenseForm.note}\n                  onChange={(e) => setExpenseForm({ ...expenseForm, note: e.target.value })}\n                  rows={3}\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={() => setIsAddExpenseOpen(false)}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\" className=\"bg-[#C8A96A] hover:bg-[#B8996A]\">\n                Guardar Gasto\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isEditCOGSOpen} onOpenChange={setIsEditCOGSOpen}>\n        <DialogContent className=\"sm:max-w-[400px]\">\n          <DialogHeader>\n            <DialogTitle className=\"font-serif text-2xl\">Editar COGS</DialogTitle>\n            <DialogDescription>Costo de la mercanc├¡a vendida del mes</DialogDescription>\n          </DialogHeader>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault()\n              alert(\"COGS actualizado exitosamente\")\n              setIsEditCOGSOpen(false)\n            }}\n          >\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid gap-2\">\n                <Label htmlFor=\"cogsAmount\">COGS del Mes (COP) *</Label>\n                <Input\n                  id=\"cogsAmount\"\n                  type=\"number\"\n                  value={cogsAmount}\n                  onChange={(e) => setCogsAmount(e.target.value)}\n                  placeholder={monthData.cogs.toString()}\n                  required\n                />\n                <p className=\"text-xs text-gray-600\">Se usa para calcular la utilidad real</p>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditCOGSOpen(false)}>\n                Cancelar\n              </Button>\n              <Button type=\"submit\" className=\"bg-[#C8A96A] hover:bg-[#B8996A]\">\n                Guardar COGS\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/(dashboard)/ventastotales/page.tsx"
      },
      {
        "path": "app/ClientLayout.tsx",
        "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { Suspense } from \"react\"\nimport { useSearchParams } from \"next/navigation\"\nimport DatabaseInitializer from \"@/components/DatabaseInitializer\"\n\nexport default function ClientLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const searchParams = useSearchParams()\n\n  return (\n    <>\n      <DatabaseInitializer />\n      <Suspense fallback={<div>Loading...</div>}>{children}</Suspense>\n    </>\n  )\n}\n",
        "type": "registry:block",
        "target": "~/app/ClientLayout.tsx"
      },
      {
        "path": "app/actions/upload-logo.ts",
        "content": "\"use server\"\n\nimport { put } from \"@vercel/blob\"\n\nexport async function uploadLogo(formData: FormData) {\n  try {\n    const file = formData.get(\"file\") as File\n\n    if (!file) {\n      throw new Error(\"No se proporcion├│ ning├║n archivo\")\n    }\n\n    // Validar tipo de archivo\n    const validTypes = [\"image/png\", \"image/jpeg\", \"image/jpg\", \"image/svg+xml\"]\n    if (!validTypes.includes(file.type)) {\n      throw new Error(\"Tipo de archivo no v├ílido. Solo se permiten PNG, JPG y SVG\")\n    }\n\n    // Validar tama├▒o (m├íx 5MB)\n    const maxSize = 5 * 1024 * 1024 // 5MB\n    if (file.size > maxSize) {\n      throw new Error(\"El archivo es demasiado grande. M├íximo 5MB\")\n    }\n\n    // Subir a Vercel Blob\n    const blob = await put(file.name, file, {\n      access: \"public\",\n    })\n\n    return { success: true, url: blob.url }\n  } catch (error) {\n    console.error(\"[v0] Error al subir logo:\", error)\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : \"Error desconocido al subir el logo\",\n    }\n  }\n}\n",
        "type": "registry:block",
        "target": "~/app/actions/upload-logo.ts"
      },
      {
        "path": "app/api/ads/ai/route.tsx",
        "content": "import { NextResponse } from \"next/server\"\n\n// Fallback por si no existe la variable (usa el que nos diste)\nconst FALLBACK_XAI = \"7d9ef5c7-deca-4fcb-b06c-353f98ff9f0a\"\n\nexport async function POST(req: Request) {\n  const { prompt } = await req.json()\n  const apiKey = process.env.XAI_API_KEY || FALLBACK_XAI\n\n  try {\n    const r = await fetch(\"https://api.x.ai/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({\n        model: \"grok-beta\",\n        stream: false,\n        temperature: 0.4,\n        messages: [\n          {\n            role: \"system\",\n            content:\n              \"Eres un experto en marketing digital, traffiker y community manager con CI 145. Responde en espa├▒ol, muy espec├¡fico y accionable.\",\n          },\n          { role: \"user\", content: prompt },\n        ],\n      }),\n    })\n\n    const j = await r.json()\n    const text = j?.choices?.[0]?.message?.content || \"\"\n    return NextResponse.json({\n      text: `<pre style=\"white-space:pre-wrap\">${text}</pre>`,\n    })\n  } catch (e) {\n    return NextResponse.json({\n      text: \"<b>Error IA:</b> No fue posible generar el plan en este momento.\",\n    })\n  }\n}\n",
        "type": "registry:block",
        "target": "~/app/api/ads/ai/route.tsx"
      },
      {
        "path": "app/api/ads/campaigns/[id]/adsets/route.ts",
        "content": "import { NextResponse } from \"next/server\"\n\n// Mock de adsets por campa├▒a\nconst adsetsByCampaign: Record<string, any[]> = {\n  camp_1: [\n    { id: \"as_1\", name: \"Anillos 18k\", impressions: 45000, spend: 850000, conversions: 23 },\n    { id: \"as_2\", name: \"Collares Premium\", impressions: 38000, spend: 720000, conversions: 19 },\n    { id: \"as_3\", name: \"Aretes Diamante\", impressions: 52000, spend: 980000, conversions: 28 },\n  ],\n  camp_2: [\n    { id: \"as_4\", name: \"Balines Oro 14k\", impressions: 62000, spend: 1200000, conversions: 35 },\n    { id: \"as_5\", name: \"Balines Plata\", impressions: 48000, spend: 890000, conversions: 27 },\n  ],\n  camp_3: [{ id: \"as_6\", name: \"Ofertas BF\", impressions: 120000, spend: 2500000, conversions: 68 }],\n}\n\nexport async function GET(req: Request, { params }: { params: { id: string } }) {\n  const adsets = adsetsByCampaign[params.id] || []\n  return NextResponse.json({ adsets })\n}\n",
        "type": "registry:page",
        "target": "app/api/ads/campaigns/[id]/adsets/route.ts"
      },
      {
        "path": "app/api/ads/campaigns/[id]/insights/route.ts",
        "content": "import { NextResponse } from \"next/server\"\n\n// Mock de insights por campa├▒a\nconst insightsByCampaign: Record<string, any> = {\n  camp_1: {\n    roas: 3.2,\n    spend: 2550000,\n    revenue: 8160000,\n    cpa: 36428,\n    ctr: 0.042,\n    positivePct: 68,\n    negativePct: 18,\n  },\n  camp_2: {\n    roas: 2.8,\n    spend: 2090000,\n    revenue: 5852000,\n    cpa: 33709,\n    ctr: 0.038,\n    positivePct: 62,\n    negativePct: 22,\n  },\n  camp_3: {\n    roas: 4.1,\n    spend: 2500000,\n    revenue: 10250000,\n    cpa: 36764,\n    ctr: 0.051,\n    positivePct: 75,\n    negativePct: 12,\n  },\n}\n\nexport async function GET(req: Request, { params }: { params: { id: string } }) {\n  const insights = insightsByCampaign[params.id] || null\n  return NextResponse.json({ insights })\n}\n",
        "type": "registry:page",
        "target": "app/api/ads/campaigns/[id]/insights/route.ts"
      },
      {
        "path": "app/api/ads/campaigns/route.ts",
        "content": "import { NextResponse } from \"next/server\"\n\nexport async function GET(req: Request) {\n  const url = new URL(req.url)\n  const q = url.searchParams.get(\"q\")?.toLowerCase() ?? \"\"\n  const state = url.searchParams.get(\"state\") ?? \"Todas\"\n\n  const base = [\n    { id: \"120233445687010113\", name: \"Mensajes a WhatsApp del Mayor\", status: \"active\" },\n    { id: \"120232220411150113\", name: \"Campa├▒a Balines ÔÇô Mensajes\", status: \"paused\" },\n    { id: \"120230275307150113\", name: \"C├ÜCUTA ÔÇô AGOSTO\", status: \"paused\" },\n    { id: \"1202312355180113\", name: \"AGOSTO ÔÇô JOYER├ìA ÔÇô WHATSAPP\", status: \"paused\" },\n  ] as const\n\n  const campaigns = base\n    .filter((c) => (state === \"Todas\" ? true : state === \"Activas\" ? c.status === \"active\" : c.status === \"paused\"))\n    .filter((c) => (q ? c.name.toLowerCase().includes(q) || c.id.includes(q) : true))\n\n  const rows = campaigns.map((c, i) => ({\n    id: c.id,\n    name: c.name,\n    status: c.status,\n    delivery: c.status === \"active\" ? \"Activa\" : \"Pausada\",\n    receive: \"ÔÇö\",\n    budget: 0,\n    spend: i === 0 ? 548428 : i === 1 ? 12880 : 0,\n    conversions: i === 0 ? 3666 : i === 1 ? 54 : 0,\n    cpa: i === 0 ? 149598 : 238519,\n    sales: i === 0 ? 807 : i === 1 ? 12 : 0,\n    revenue: i === 0 ? 23000000 : 342000,\n    roas: i === 0 ? 41.94 : 26.55,\n    ctr: i === 0 ? 0.0294 : 0.0275,\n  }))\n\n  return NextResponse.json({ campaigns, rows })\n}\n",
        "type": "registry:page",
        "target": "app/api/ads/campaigns/route.ts"
      },
      {
        "path": "app/api/ads/summary/route.ts",
        "content": "import { NextResponse } from \"next/server\"\n\nexport async function GET() {\n  return NextResponse.json({\n    data: {\n      spend: 561308,\n      conv: 3720,\n      sales: 819,\n      roas: 41.58,\n      ctr: 0.0294,\n      revenue: 23341500,\n      cpa: 150.89,\n      convRate: 0.22,\n      impr: 126463,\n      deltaSpend: \"+12.3%\",\n    },\n  })\n}\n",
        "type": "registry:page",
        "target": "app/api/ads/summary/route.ts"
      },
      {
        "path": "app/api/clientes/list/route.ts",
        "content": "import { NextResponse } from \"next/server\"\nimport { DB } from \"@/lib/store\"\n\nexport async function GET() {\n  return NextResponse.json({ ok: true, data: DB.getClientes() })\n}\n",
        "type": "registry:page",
        "target": "app/api/clientes/list/route.ts"
      },
      {
        "path": "app/api/crm/customer/[phone]/route.ts",
        "content": "import { NextResponse } from \"next/server\"\nimport { DB } from \"@/lib/store\"\n\nexport async function GET(_: Request, { params }: { params: { phone: string } }) {\n  const c = DB.getCRMByPhone(params.phone)\n  if (!c) return NextResponse.json({ ok: false, error: \"No encontrado\" }, { status: 404 })\n  return NextResponse.json({ ok: true, data: c })\n}\n",
        "type": "registry:page",
        "target": "app/api/crm/customer/[phone]/route.ts"
      },
      {
        "path": "app/api/facturacion/create/route.ts",
        "content": "import { NextResponse } from \"next/server\"\nimport { createFactura, type Factura } from \"@/lib/store\"\n\nexport async function POST(req: Request) {\n  const payload = (await req.json()) as Omit<Factura, \"createdAt\">\n  if (!payload?.numero || !payload?.cliente?.nombre || !payload?.guia || !payload?.transportadora) {\n    return NextResponse.json({ ok: false, error: \"Campos obligatorios faltantes\" }, { status: 400 })\n  }\n  const data = createFactura(payload)\n  return NextResponse.json({ ok: true, data })\n}\n",
        "type": "registry:page",
        "target": "app/api/facturacion/create/route.ts"
      },
      {
        "path": "app/api/facturacion/list/route.ts",
        "content": "import { NextResponse } from \"next/server\"\nimport { DB } from \"@/lib/store\"\n\nexport async function GET() {\n  const s = DB.get()\n  return NextResponse.json({\n    ok: true,\n    facturas: s.facturas,\n    devoluciones: s.devoluciones,\n  })\n}\n",
        "type": "registry:page",
        "target": "app/api/facturacion/list/route.ts"
      },
      {
        "path": "app/api/facturacion/sync/route.ts",
        "content": "import { NextResponse } from \"next/server\"\nimport { applyFacturaUpdate } from \"@/lib/ventasStore\"\n\nexport async function POST(req: Request) {\n  const body = await req.json()\n  const { factura, estadoPago, metodo, evidenciaUrl } = body || {}\n  if (!factura || !estadoPago) {\n    return NextResponse.json({ ok: false, error: \"factura y estadoPago son requeridos\" }, { status: 400 })\n  }\n  const data = applyFacturaUpdate({ factura, estadoPago, metodo, evidenciaUrl })\n  return NextResponse.json({ ok: true, data })\n}\n",
        "type": "registry:page",
        "target": "app/api/facturacion/sync/route.ts"
      },
      {
        "path": "app/api/finance/ai-insights/route.ts",
        "content": "import { type NextRequest, NextResponse } from \"next/server\"\n\nconst GEMINI_API_KEY = \"AIzaSyDf9n-nERTfTC3G4WRf7msqQP1gjZkZST0\"\nconst GEMINI_API_URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent\"\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { month, year, kpis, salesData, expensesData } = await request.json()\n\n    const MONTHS = [\n      \"Enero\",\n      \"Febrero\",\n      \"Marzo\",\n      \"Abril\",\n      \"Mayo\",\n      \"Junio\",\n      \"Julio\",\n      \"Agosto\",\n      \"Septiembre\",\n      \"Octubre\",\n      \"Noviembre\",\n      \"Diciembre\",\n    ]\n\n    const prompt = `Eres un analista financiero experto. Analiza los siguientes datos financieros de ${MONTHS[month]} ${year} y proporciona insights accionables en espa├▒ol:\n\n**KPIs:**\n- Ventas totales: $${kpis.totalSales?.toLocaleString()}\n- Gastos totales: $${kpis.totalExpenses?.toLocaleString()}\n- Utilidad neta: $${kpis.netProfit?.toLocaleString()}\n- Margen: ${kpis.margin}%\n- Tickets: ${kpis.tickets}\n- Promedio por venta: $${kpis.avgSale?.toLocaleString()}\n\n**Variaciones vs mes anterior:**\n- Ventas: ${kpis.salesDelta}%\n- Gastos: ${kpis.expensesDelta}%\n- Utilidad: ${kpis.profitDelta}%\n- Margen: ${kpis.marginDelta}%\n\n**Distribuci├│n de ventas por m├®todo de pago:**\n${kpis.paymentMethods?.map((m: any) => `- ${m.name}: ${m.value}%`).join(\"\\n\")}\n\n**Distribuci├│n de gastos por categor├¡a:**\n${kpis.expenseCategories?.map((c: any) => `- ${c.name}: ${c.value}%`).join(\"\\n\")}\n\nProporciona un an├ílisis estructurado en formato JSON con las siguientes claves:\n{\n  \"summary\": \"Resumen breve de c├│mo fue el mes (2-3 oraciones)\",\n  \"variations\": \"An├ílisis de las variaciones clave vs mes anterior (2-3 oraciones)\",\n  \"alerts\": \"Alertas sobre costos o gastos preocupantes (2-3 oraciones)\",\n  \"recommendations\": \"Recomendaciones accionables para mejorar (2-3 oraciones)\",\n  \"projection\": \"Proyecci├│n para el pr├│ximo mes basada en tendencias (2-3 oraciones)\",\n  \"sentiment\": \"good, neutral, o risk\"\n}\n\nS├® conciso, espec├¡fico y enf├│cate en insights accionables.`\n\n    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        contents: [\n          {\n            parts: [\n              {\n                text: prompt,\n              },\n            ],\n          },\n        ],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 1024,\n        },\n      }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`Gemini API error: ${response.statusText}`)\n    }\n\n    const data = await response.json()\n    const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text || \"\"\n\n    let insights\n    try {\n      // Intentar extraer JSON de la respuesta (puede venir con markdown)\n      const jsonMatch = aiResponse.match(/\\{[\\s\\S]*\\}/)\n      if (jsonMatch) {\n        insights = JSON.parse(jsonMatch[0])\n      } else {\n        // Si no hay JSON, crear estructura por defecto\n        insights = {\n          summary: aiResponse.substring(0, 200),\n          variations: \"No se pudo analizar las variaciones.\",\n          alerts: \"No se detectaron alertas.\",\n          recommendations: \"Contin├║a monitoreando tus m├®tricas.\",\n          projection: \"Se espera un comportamiento similar al mes actual.\",\n          sentiment: \"neutral\",\n        }\n      }\n    } catch (parseError) {\n      console.error(\"[v0] Error parsing AI response:\", parseError)\n      insights = {\n        summary: \"El an├ílisis est├í en proceso. Por favor, intenta nuevamente.\",\n        variations: \"No disponible\",\n        alerts: \"No disponible\",\n        recommendations: \"No disponible\",\n        projection: \"No disponible\",\n        sentiment: \"neutral\",\n      }\n    }\n\n    return NextResponse.json(insights)\n  } catch (error) {\n    console.error(\"[v0] Error fetching AI insights:\", error)\n    return NextResponse.json(\n      {\n        summary: \"Error al obtener insights de IA. Por favor, intenta nuevamente.\",\n        variations: \"No disponible\",\n        alerts: \"No disponible\",\n        recommendations: \"No disponible\",\n        projection: \"No disponible\",\n        sentiment: \"neutral\",\n      },\n      { status: 500 },\n    )\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/finance/ai-insights/route.ts"
      },
      {
        "path": "app/api/finance/expenses/route.ts",
        "content": "import { type NextRequest, NextResponse } from \"next/server\"\nimport { createClient } from \"@/lib/supabase/server\"\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log(\"[v0] Fetching expenses data...\")\n    const supabase = await createClient()\n    const searchParams = request.nextUrl.searchParams\n    const month = Number.parseInt(searchParams.get(\"month\") || \"0\")\n    const year = Number.parseInt(searchParams.get(\"year\") || new Date().getFullYear().toString())\n\n    const startOfMonth = new Date(year, month, 1)\n    const endOfMonth = new Date(year, month + 1, 0, 23, 59, 59)\n\n    const { data, error } = await supabase\n      .from(\"expenses\")\n      .select(\"*\")\n      .gte(\"expense_date\", startOfMonth.toISOString())\n      .lte(\"expense_date\", endOfMonth.toISOString())\n      .order(\"expense_date\", { ascending: false })\n\n    if (error) {\n      console.error(\"[v0] Error fetching expenses:\", error)\n      return NextResponse.json([])\n    }\n\n    console.log(\"[v0] Expenses data fetched successfully:\", data?.length || 0, \"records\")\n    return NextResponse.json(Array.isArray(data) ? data : [])\n  } catch (error) {\n    console.error(\"[v0] Error fetching expenses:\", error)\n    return NextResponse.json([])\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const supabase = await createClient()\n    const body = await request.json()\n\n    const { data, error } = await supabase\n      .from(\"expenses\")\n      .insert([\n        {\n          expense_date: body.expense_date,\n          receipt_number: body.receipt_number,\n          provider: body.provider,\n          category: body.category,\n          payment_method: body.payment_method,\n          status: body.status,\n          amount: body.amount,\n          notes: body.notes,\n        },\n      ])\n      .select()\n\n    if (error) {\n      console.error(\"[v0] Error creating expense:\", error)\n      return NextResponse.json({ error: error.message }, { status: 500 })\n    }\n\n    return NextResponse.json(data[0], { status: 201 })\n  } catch (error) {\n    console.error(\"[v0] Error creating expense:\", error)\n    return NextResponse.json({ error: \"Error al crear el gasto\" }, { status: 500 })\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/finance/expenses/route.ts"
      },
      {
        "path": "app/api/finance/kpis/route.ts",
        "content": "import { type NextRequest, NextResponse } from \"next/server\"\nimport { createClient } from \"@/lib/supabase/server\"\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log(\"[v0] Fetching KPIs...\")\n    const supabase = await createClient()\n    const searchParams = request.nextUrl.searchParams\n    const month = searchParams.get(\"month\")\n    const year = Number.parseInt(searchParams.get(\"year\") || new Date().getFullYear().toString())\n\n    if (!month || month === \"null\") {\n      const startOfYear = new Date(year, 0, 1).toISOString()\n      const endOfYear = new Date(year, 11, 31, 23, 59, 59).toISOString()\n      const startOfPrevYear = new Date(year - 1, 0, 1).toISOString()\n      const endOfPrevYear = new Date(year - 1, 11, 31, 23, 59, 59).toISOString()\n\n      const { data: currentSales, error: salesError } = await supabase\n        .from(\"sales\")\n        .select(\"total, payment_method, sale_date\")\n        .gte(\"sale_date\", startOfYear)\n        .lte(\"sale_date\", endOfYear)\n        .eq(\"status\", \"PAGADO\")\n\n      if (salesError) {\n        console.error(\"[v0] Error fetching sales:\", salesError)\n      }\n\n      const { data: prevSales } = await supabase\n        .from(\"sales\")\n        .select(\"total\")\n        .gte(\"sale_date\", startOfPrevYear)\n        .lte(\"sale_date\", endOfPrevYear)\n        .eq(\"status\", \"PAGADO\")\n\n      const { data: currentExpenses, error: expensesError } = await supabase\n        .from(\"expenses\")\n        .select(\"amount, category, expense_date\")\n        .gte(\"expense_date\", startOfYear)\n        .lte(\"expense_date\", endOfYear)\n        .eq(\"status\", \"PAGADO\")\n\n      if (expensesError) {\n        console.error(\"[v0] Error fetching expenses:\", expensesError)\n      }\n\n      const { data: prevExpenses } = await supabase\n        .from(\"expenses\")\n        .select(\"amount\")\n        .gte(\"expense_date\", startOfPrevYear)\n        .lte(\"expense_date\", endOfPrevYear)\n        .eq(\"status\", \"PAGADO\")\n\n      const totalSales = currentSales?.reduce((sum, s) => sum + (s.total || 0), 0) || 0\n      const totalExpenses = currentExpenses?.reduce((sum, e) => sum + (e.amount || 0), 0) || 0\n      const netProfit = totalSales - totalExpenses\n      const margin = totalSales > 0 ? ((netProfit / totalSales) * 100).toFixed(1) : \"0\"\n      const tickets = currentSales?.length || 0\n      const avgSale = tickets > 0 ? totalSales / tickets : 0\n\n      const prevTotalSales = prevSales?.reduce((sum, s) => sum + (s.total || 0), 0) || 0\n      const prevTotalExpenses = prevExpenses?.reduce((sum, e) => sum + (e.amount || 0), 0) || 0\n      const prevNetProfit = prevTotalSales - prevTotalExpenses\n      const prevMargin = prevTotalSales > 0 ? (prevNetProfit / prevTotalSales) * 100 : 0\n      const prevTickets = prevSales?.length || 0\n      const prevAvgSale = prevTickets > 0 ? prevTotalSales / prevTickets : 0\n\n      const salesDelta = prevTotalSales > 0 ? (((totalSales - prevTotalSales) / prevTotalSales) * 100).toFixed(1) : \"0\"\n      const expensesDelta =\n        prevTotalExpenses > 0 ? (((totalExpenses - prevTotalExpenses) / prevTotalExpenses) * 100).toFixed(1) : \"0\"\n      const profitDelta = prevNetProfit > 0 ? (((netProfit - prevNetProfit) / prevNetProfit) * 100).toFixed(1) : \"0\"\n      const marginDelta =\n        prevMargin > 0 ? (((Number.parseFloat(margin.toString()) - prevMargin) / prevMargin) * 100).toFixed(1) : \"0\"\n      const ticketsDelta = prevTickets > 0 ? (((tickets - prevTickets) / prevTickets) * 100).toFixed(1) : \"0\"\n      const avgSaleDelta = prevAvgSale > 0 ? (((avgSale - prevAvgSale) / prevAvgSale) * 100).toFixed(1) : \"0\"\n\n      console.log(\"[v0] KPIs calculated successfully\")\n      return NextResponse.json({\n        totalSales,\n        totalExpenses,\n        netProfit,\n        margin,\n        tickets,\n        avgSale,\n        salesDelta,\n        expensesDelta,\n        profitDelta,\n        marginDelta,\n        ticketsDelta,\n        avgSaleDelta,\n        weeklyData: [],\n        paymentMethods: [],\n        expenseCategories: [],\n      })\n    }\n\n    // Calculate date ranges\n    const startOfMonth = new Date(year, Number.parseInt(month) - 1, 1)\n    const endOfMonth = new Date(year, Number.parseInt(month), 0, 23, 59, 59)\n    const startOfPrevMonth = new Date(year, Number.parseInt(month) - 2, 1)\n    const endOfPrevMonth = new Date(year, Number.parseInt(month) - 1, 0, 23, 59, 59)\n\n    // Fetch current month sales\n    const { data: currentSales } = await supabase\n      .from(\"sales\")\n      .select(\"total, payment_method, sale_date\")\n      .gte(\"sale_date\", startOfMonth.toISOString())\n      .lte(\"sale_date\", endOfMonth.toISOString())\n      .eq(\"status\", \"PAGADO\")\n\n    // Fetch previous month sales\n    const { data: prevSales } = await supabase\n      .from(\"sales\")\n      .select(\"total\")\n      .gte(\"sale_date\", startOfPrevMonth.toISOString())\n      .lte(\"sale_date\", endOfPrevMonth.toISOString())\n      .eq(\"status\", \"PAGADO\")\n\n    // Fetch current month expenses\n    const { data: currentExpenses } = await supabase\n      .from(\"expenses\")\n      .select(\"amount, category, expense_date\")\n      .gte(\"expense_date\", startOfMonth.toISOString())\n      .lte(\"expense_date\", endOfMonth.toISOString())\n      .eq(\"status\", \"PAGADO\")\n\n    // Fetch previous month expenses\n    const { data: prevExpenses } = await supabase\n      .from(\"expenses\")\n      .select(\"amount\")\n      .gte(\"expense_date\", startOfPrevMonth.toISOString())\n      .lte(\"expense_date\", endOfPrevMonth.toISOString())\n      .eq(\"status\", \"PAGADO\")\n\n    // Calculate KPIs\n    const totalSales = currentSales?.reduce((sum, s) => sum + (s.total || 0), 0) || 0\n    const totalExpenses = currentExpenses?.reduce((sum, e) => sum + (e.amount || 0), 0) || 0\n    const netProfit = totalSales - totalExpenses\n    const margin = totalSales > 0 ? ((netProfit / totalSales) * 100).toFixed(1) : \"0\"\n    const tickets = currentSales?.length || 0\n    const avgSale = tickets > 0 ? totalSales / tickets : 0\n\n    const prevTotalSales = prevSales?.reduce((sum, s) => sum + (s.total || 0), 0) || 0\n    const prevTotalExpenses = prevExpenses?.reduce((sum, e) => sum + (e.amount || 0), 0) || 0\n    const prevNetProfit = prevTotalSales - prevTotalExpenses\n    const prevMargin = prevTotalSales > 0 ? (prevNetProfit / prevTotalSales) * 100 : 0\n    const prevTickets = prevSales?.length || 0\n    const prevAvgSale = prevTickets > 0 ? prevTotalSales / prevTickets : 0\n\n    // Calculate deltas\n    const salesDelta = prevTotalSales > 0 ? (((totalSales - prevTotalSales) / prevTotalSales) * 100).toFixed(1) : \"0\"\n    const expensesDelta =\n      prevTotalExpenses > 0 ? (((totalExpenses - prevTotalExpenses) / prevTotalExpenses) * 100).toFixed(1) : \"0\"\n    const profitDelta = prevNetProfit > 0 ? (((netProfit - prevNetProfit) / prevNetProfit) * 100).toFixed(1) : \"0\"\n    const marginDelta =\n      prevMargin > 0 ? (((Number.parseFloat(margin.toString()) - prevMargin) / prevMargin) * 100).toFixed(1) : \"0\"\n    const ticketsDelta = prevTickets > 0 ? (((tickets - prevTickets) / prevTickets) * 100).toFixed(1) : \"0\"\n    const avgSaleDelta = prevAvgSale > 0 ? (((avgSale - prevAvgSale) / prevAvgSale) * 100).toFixed(1) : \"0\"\n\n    // Weekly data\n    const weeklyData = []\n    for (let week = 1; week <= 4; week++) {\n      const weekStart = new Date(year, Number.parseInt(month) - 1, (week - 1) * 7 + 1)\n      const weekEnd = new Date(year, Number.parseInt(month) - 1, week * 7, 23, 59, 59)\n\n      const weekSales =\n        currentSales\n          ?.filter((s) => {\n            const date = new Date(s.sale_date)\n            return date >= weekStart && date <= weekEnd\n          })\n          .reduce((sum, s) => sum + (s.total || 0), 0) || 0\n\n      const weekExpenses =\n        currentExpenses\n          ?.filter((e) => {\n            const date = new Date(e.expense_date)\n            return date >= weekStart && date <= weekEnd\n          })\n          .reduce((sum, e) => sum + (e.amount || 0), 0) || 0\n\n      weeklyData.push({\n        week: `Sem ${week}`,\n        ventas: weekSales,\n        gastos: weekExpenses,\n      })\n    }\n\n    // Payment methods distribution\n    const paymentMethods = [\n      { name: \"Efectivo\", value: 0 },\n      { name: \"Transferencia\", value: 0 },\n      { name: \"Contraentrega\", value: 0 },\n    ]\n    currentSales?.forEach((s) => {\n      const method = paymentMethods.find((m) => m.name.toLowerCase() === s.payment_method?.toLowerCase())\n      if (method) method.value += s.total || 0\n    })\n    const totalPayments = paymentMethods.reduce((sum, m) => sum + m.value, 0)\n    paymentMethods.forEach((m) => {\n      m.value = totalPayments > 0 ? Number.parseFloat(((m.value / totalPayments) * 100).toFixed(1)) : 0\n    })\n\n    // Expense categories distribution\n    const expenseCategories = [\n      { name: \"Fijos\", value: 0 },\n      { name: \"Variables\", value: 0 },\n      { name: \"Marketing\", value: 0 },\n      { name: \"Logistica\", value: 0 },\n      { name: \"Otros\", value: 0 },\n    ]\n    currentExpenses?.forEach((e) => {\n      const category = expenseCategories.find((c) => c.name.toLowerCase() === e.category?.toLowerCase())\n      if (category) category.value += e.amount || 0\n    })\n    const totalExpensesCategories = expenseCategories.reduce((sum, c) => sum + c.value, 0)\n    expenseCategories.forEach((c) => {\n      c.value =\n        totalExpensesCategories > 0 ? Number.parseFloat(((c.value / totalExpensesCategories) * 100).toFixed(1)) : 0\n    })\n\n    return NextResponse.json({\n      totalSales,\n      totalExpenses,\n      netProfit,\n      margin,\n      tickets,\n      avgSale,\n      salesDelta,\n      expensesDelta,\n      profitDelta,\n      marginDelta,\n      ticketsDelta,\n      avgSaleDelta,\n      weeklyData,\n      paymentMethods,\n      expenseCategories,\n    })\n  } catch (error) {\n    console.error(\"[v0] Error fetching KPIs:\", error)\n    return NextResponse.json({ error: \"Error fetching KPIs\" }, { status: 500 })\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/finance/kpis/route.ts"
      },
      {
        "path": "app/api/finance/monthly/route.ts",
        "content": "import { type NextRequest, NextResponse } from \"next/server\"\nimport { createClient } from \"@/lib/supabase/server\"\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log(\"[v0] Fetching monthly data...\")\n    const supabase = await createClient()\n    const searchParams = request.nextUrl.searchParams\n    const year = Number.parseInt(searchParams.get(\"year\") || new Date().getFullYear().toString())\n\n    const { data: salesData, error: salesError } = await supabase\n      .from(\"sales\")\n      .select(\"total, sale_date\")\n      .gte(\"sale_date\", new Date(year, 0, 1).toISOString())\n      .lte(\"sale_date\", new Date(year, 11, 31, 23, 59, 59).toISOString())\n      .eq(\"status\", \"PAGADO\")\n\n    if (salesError) {\n      console.error(\"[v0] Error fetching sales:\", salesError)\n    }\n\n    const { data: expensesData, error: expensesError } = await supabase\n      .from(\"expenses\")\n      .select(\"amount, expense_date\")\n      .gte(\"expense_date\", new Date(year, 0, 1).toISOString())\n      .lte(\"expense_date\", new Date(year, 11, 31, 23, 59, 59).toISOString())\n      .eq(\"status\", \"PAGADO\")\n\n    if (expensesError) {\n      console.error(\"[v0] Error fetching expenses:\", expensesError)\n    }\n\n    const monthlyData = []\n    const monthNames = [\n      \"Enero\",\n      \"Febrero\",\n      \"Marzo\",\n      \"Abril\",\n      \"Mayo\",\n      \"Junio\",\n      \"Julio\",\n      \"Agosto\",\n      \"Septiembre\",\n      \"Octubre\",\n      \"Noviembre\",\n      \"Diciembre\",\n    ]\n\n    for (let month = 0; month < 12; month++) {\n      const monthSales =\n        salesData\n          ?.filter((s) => new Date(s.sale_date).getMonth() === month)\n          .reduce((sum, s) => sum + (s.total || 0), 0) || 0\n\n      const monthExpenses =\n        expensesData\n          ?.filter((e) => new Date(e.expense_date).getMonth() === month)\n          .reduce((sum, e) => sum + (e.amount || 0), 0) || 0\n\n      const utilidad = monthSales - monthExpenses\n      const margen = monthSales > 0 ? ((utilidad / monthSales) * 100).toFixed(1) : \"0\"\n\n      monthlyData.push({\n        month: monthNames[month],\n        ventas: monthSales,\n        gastos: monthExpenses,\n        utilidad,\n        margen,\n      })\n    }\n\n    console.log(\"[v0] Monthly data fetched successfully\")\n    return NextResponse.json(monthlyData)\n  } catch (error) {\n    console.error(\"[v0] Error fetching monthly data:\", error)\n    return NextResponse.json([])\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/finance/monthly/route.ts"
      },
      {
        "path": "app/api/finance/sales/route.ts",
        "content": "import { type NextRequest, NextResponse } from \"next/server\"\nimport { createClient } from \"@/lib/supabase/server\"\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log(\"[v0] Fetching sales data...\")\n    const supabase = await createClient()\n    const searchParams = request.nextUrl.searchParams\n    const month = Number.parseInt(searchParams.get(\"month\") || \"0\")\n    const year = Number.parseInt(searchParams.get(\"year\") || new Date().getFullYear().toString())\n\n    const startOfMonth = new Date(year, month, 1)\n    const endOfMonth = new Date(year, month + 1, 0, 23, 59, 59)\n\n    const { data, error } = await supabase\n      .from(\"sales\")\n      .select(\"*\")\n      .gte(\"sale_date\", startOfMonth.toISOString())\n      .lte(\"sale_date\", endOfMonth.toISOString())\n      .order(\"sale_date\", { ascending: false })\n\n    if (error) {\n      console.error(\"[v0] Error fetching sales:\", error)\n      return NextResponse.json([])\n    }\n\n    console.log(\"[v0] Sales data fetched successfully:\", data?.length || 0, \"records\")\n    return NextResponse.json(Array.isArray(data) ? data : [])\n  } catch (error) {\n    console.error(\"[v0] Error fetching sales:\", error)\n    return NextResponse.json([])\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/finance/sales/route.ts"
      },
      {
        "path": "app/api/init-db/route.ts",
        "content": "import { NextResponse } from \"next/server\"\nimport { createClient } from \"@supabase/supabase-js\"\n\nexport async function POST() {\n  try {\n    const supabaseUrl = process.env.SUPABASE_SUPABASE_URL\n    const supabaseKey = process.env.SUPABASE_SUPABASE_SERVICE_ROLE_KEY\n\n    if (!supabaseUrl || !supabaseKey) {\n      return NextResponse.json({ error: \"Missing Supabase credentials\" }, { status: 500 })\n    }\n\n    const supabase = createClient(supabaseUrl, supabaseKey)\n\n    const createTableSQL = `\n      -- Limpiar versiones anteriores\n      DROP VIEW IF EXISTS public.sales CASCADE;\n      DROP TABLE IF EXISTS public.sales CASCADE;\n\n      -- Crear tabla sales con estructura completa\n      CREATE TABLE public.sales (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        created_at TIMESTAMPTZ NOT NULL DEFAULT now(),\n        \n        -- Informaci├│n del cliente\n        client_name TEXT,\n        client_phone TEXT,\n        client_address TEXT,\n        city TEXT,\n        \n        -- Informaci├│n de productos\n        products JSONB DEFAULT '[]'::jsonb,\n        \n        -- Informaci├│n financiera\n        payment_method TEXT,\n        total_amount NUMERIC(12,2) NOT NULL DEFAULT 0,\n        shipping_amount NUMERIC(12,2) NOT NULL DEFAULT 0,\n        revenue_no_shipping NUMERIC(12,2) GENERATED ALWAYS AS \n          (COALESCE(total_amount, 0) - COALESCE(shipping_amount, 0)) STORED,\n        \n        -- Estado de la venta\n        status TEXT DEFAULT 'pendiente',\n        is_return BOOLEAN NOT NULL DEFAULT false,\n        \n        -- Informaci├│n de env├¡o (MiPaquete)\n        mipaquete_code TEXT,\n        mipaquete_status TEXT,\n        paid_by_mipaquete BOOLEAN DEFAULT false,\n        carrier TEXT,\n        \n        -- Facturaci├│n\n        invoice_number TEXT,\n        \n        -- Marketing y atribuci├│n\n        campaign_id TEXT,\n        utm_source TEXT,\n        utm_medium TEXT,\n        utm_campaign TEXT,\n        \n        -- Evidencia\n        evidence_url TEXT,\n        \n        -- Auditor├¡a\n        updated_at TIMESTAMPTZ DEFAULT now()\n      );\n\n      -- Crear ├¡ndices\n      CREATE INDEX idx_sales_created_at ON public.sales(created_at DESC);\n      CREATE INDEX idx_sales_city ON public.sales(city);\n      CREATE INDEX idx_sales_status ON public.sales(status);\n      CREATE INDEX idx_sales_payment_method ON public.sales(payment_method);\n      CREATE INDEX idx_sales_mipaquete_code ON public.sales(mipaquete_code);\n      CREATE INDEX idx_sales_is_return ON public.sales(is_return);\n\n      -- Habilitar RLS\n      ALTER TABLE public.sales ENABLE ROW LEVEL SECURITY;\n\n      -- Crear pol├¡ticas permisivas\n      CREATE POLICY \"Permitir todo\" ON public.sales FOR ALL USING (true) WITH CHECK (true);\n\n      -- Insertar datos de ejemplo\n      INSERT INTO public.sales (\n        client_name, client_phone, city, payment_method, \n        total_amount, shipping_amount, status, products\n      ) VALUES\n        ('Juan P├®rez', '3001234567', 'Bogot├í', 'contraentrega', 150000, 15000, 'entregado', '[{\"name\":\"Producto A\",\"quantity\":2,\"price\":67500}]'::jsonb),\n        ('Mar├¡a Garc├¡a', '3009876543', 'Medell├¡n', 'transferencia', 200000, 20000, 'pendiente', '[{\"name\":\"Producto B\",\"quantity\":1,\"price\":200000}]'::jsonb),\n        ('Carlos L├│pez', '3005551234', 'Cali', 'contraentrega', 180000, 18000, 'en_transito', '[{\"name\":\"Producto C\",\"quantity\":3,\"price\":60000}]'::jsonb);\n    `\n\n    // Intentar ejecutar el SQL directamente\n    const { error: execError } = await supabase.rpc(\"exec_sql\", {\n      sql: createTableSQL,\n    })\n\n    if (execError) {\n      console.error(\"[v0] Error con exec_sql:\", execError)\n\n      // Verificar si la tabla existe\n      const { error: checkError } = await supabase.from(\"sales\").select(\"id\").limit(1)\n\n      if (checkError && checkError.code === \"42P01\") {\n        return NextResponse.json(\n          {\n            error: \"Database needs manual initialization\",\n            message: \"Por favor ejecuta el script 023_create_sales_table_final_fix.sql desde la interfaz de v0\",\n            hint: \"Busca el archivo en la carpeta /scripts y haz clic en el bot├│n de ejecutar\",\n          },\n          { status: 500 },\n        )\n      }\n    }\n\n    return NextResponse.json({ success: true, message: \"Base de datos inicializada correctamente\" })\n  } catch (error: any) {\n    console.error(\"[v0] Error inicializando base de datos:\", error)\n    return NextResponse.json({ error: error.message }, { status: 500 })\n  }\n}\n\nexport async function GET() {\n  try {\n    const supabaseUrl = process.env.SUPABASE_SUPABASE_URL\n    const supabaseKey = process.env.SUPABASE_SUPABASE_SERVICE_ROLE_KEY\n\n    if (!supabaseUrl || !supabaseKey) {\n      return NextResponse.json({ initialized: false, error: \"Missing credentials\" })\n    }\n\n    const supabase = createClient(supabaseUrl, supabaseKey)\n\n    // Verificar si la tabla existe\n    const { error } = await supabase.from(\"sales\").select(\"id\").limit(1)\n\n    if (error && error.code === \"42P01\") {\n      return NextResponse.json({ initialized: false, error: \"Table does not exist\" })\n    }\n\n    return NextResponse.json({ initialized: true })\n  } catch (error: any) {\n    return NextResponse.json({ initialized: false, error: error.message })\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/init-db/route.ts"
      },
      {
        "path": "app/api/invoices/[id]/route.ts",
        "content": "import { type NextRequest, NextResponse } from \"next/server\"\nimport { createServerClient } from \"@/lib/supabase/server\"\n\nexport async function GET(request: NextRequest, { params }: { params: { id: string } }) {\n  try {\n    const supabase = await createServerClient()\n    const { id } = params\n\n    console.log(\"[v0] Fetching invoice:\", id)\n\n    const { data, error } = await supabase\n      .from(\"invoices\")\n      .select(`\n        *,\n        invoice_items (*)\n      `)\n      .eq(\"invoice_number\", id)\n      .maybeSingle()\n\n    if (error) {\n      console.error(\"[v0] Error fetching invoice:\", error)\n      return NextResponse.json({ error: error.message }, { status: 500 })\n    }\n\n    if (!data) {\n      console.log(\"[v0] Invoice not found:\", id)\n      return NextResponse.json({ error: \"Factura no encontrada\" }, { status: 404 })\n    }\n\n    console.log(\"[v0] Invoice found:\", data.invoice_number, \"Items:\", data.invoice_items?.length || 0)\n\n    // Retornar directamente el objeto de factura para consistencia\n    return NextResponse.json(data)\n  } catch (error: any) {\n    console.error(\"[v0] Error in invoice GET API:\", error)\n    return NextResponse.json({ error: error.message }, { status: 500 })\n  }\n}\n\nexport async function PATCH(request: NextRequest, { params }: { params: { id: string } }) {\n  try {\n    const supabase = await createServerClient()\n    const { id } = params\n    const body = await request.json()\n\n    const { data, error } = await supabase.from(\"invoices\").update(body).eq(\"invoice_number\", id).select().maybeSingle()\n\n    if (error) {\n      console.error(\"[v0] Error updating invoice:\", error)\n      return NextResponse.json({ error: error.message }, { status: 500 })\n    }\n\n    if (!data) {\n      return NextResponse.json({ error: \"Factura no encontrada\" }, { status: 404 })\n    }\n\n    console.log(\"[v0] Invoice updated, status synced to sale:\", data.invoice_number, data.status)\n\n    return NextResponse.json({ data })\n  } catch (error: any) {\n    console.error(\"[v0] Error in invoice PATCH API:\", error)\n    return NextResponse.json({ error: error.message }, { status: 500 })\n  }\n}\n\nexport async function DELETE(request: NextRequest, { params }: { params: { id: string } }) {\n  try {\n    const supabase = await createServerClient()\n    const { id } = params\n\n    const { error } = await supabase.from(\"invoices\").delete().eq(\"invoice_number\", id)\n\n    if (error) {\n      console.error(\"[v0] Error deleting invoice:\", error)\n      return NextResponse.json({ error: error.message }, { status: 500 })\n    }\n\n    return NextResponse.json({ success: true })\n  } catch (error: any) {\n    console.error(\"[v0] Error in invoice DELETE API:\", error)\n    return NextResponse.json({ error: error.message }, { status: 500 })\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/invoices/[id]/route.ts"
      },
      {
        "path": "app/api/invoices/generate-pdf/route.tsx",
        "content": "import { put } from \"@vercel/blob\"\nimport { type NextRequest, NextResponse } from \"next/server\"\nimport { createServerClient } from \"@/lib/supabase/server\"\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { invoiceNumber } = await request.json()\n\n    if (!invoiceNumber) {\n      return NextResponse.json({ error: \"N├║mero de factura requerido\" }, { status: 400 })\n    }\n\n    const supabase = await createServerClient()\n\n    // Obtener datos de la factura con items\n    const { data: invoice, error: invoiceError } = await supabase\n      .from(\"invoices\")\n      .select(\"*, invoice_items(*)\")\n      .eq(\"invoice_number\", invoiceNumber)\n      .single()\n\n    if (invoiceError || !invoice) {\n      console.error(\"[v0] Error obteniendo factura:\", invoiceError)\n      return NextResponse.json({ error: \"Factura no encontrada\" }, { status: 404 })\n    }\n\n    // Generar HTML de la factura\n    const html = generateInvoiceHTML(invoice)\n\n    // Convertir HTML a PDF usando una librer├¡a (por ahora guardamos el HTML)\n    // En producci├│n, usar├¡as una librer├¡a como puppeteer o jsPDF\n    const pdfBlob = new Blob([html], { type: \"text/html\" })\n    const file = new File([pdfBlob], `${invoiceNumber}.html`, {\n      type: \"text/html\",\n    })\n\n    // Subir a Vercel Blob\n    const blob = await put(`facturas/${invoiceNumber}.html`, file, {\n      access: \"public\",\n    })\n\n    // Actualizar la factura con la URL del PDF\n    const { error: updateError } = await supabase\n      .from(\"invoices\")\n      .update({ pdf_url: blob.url })\n      .eq(\"invoice_number\", invoiceNumber)\n\n    if (updateError) {\n      console.error(\"[v0] Error actualizando factura con PDF URL:\", updateError)\n    }\n\n    return NextResponse.json({\n      success: true,\n      url: blob.url,\n      invoiceNumber,\n    })\n  } catch (error) {\n    console.error(\"[v0] Error generando PDF:\", error)\n    return NextResponse.json({ error: \"Error generando PDF de factura\" }, { status: 500 })\n  }\n}\n\nfunction generateInvoiceHTML(invoice: any): string {\n  const items = invoice.invoice_items || []\n\n  return `\n<!DOCTYPE html>\n<html lang=\"es\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Factura ${invoice.invoice_number}</title>\n  <style>\n    * { margin: 0; padding: 0; box-sizing: border-box; }\n    body { font-family: Arial, sans-serif; padding: 40px; max-width: 800px; margin: 0 auto; }\n    .header { display: flex; justify-content: space-between; margin-bottom: 30px; border-bottom: 2px solid #000; padding-bottom: 20px; }\n    .logo { font-size: 48px; font-weight: bold; }\n    .order-info { text-align: right; }\n    .company-info { margin-bottom: 20px; line-height: 1.6; }\n    .company-info strong { font-weight: bold; }\n    .guarantee { border: 1px solid #000; padding: 10px; margin: 20px 0; font-size: 11px; }\n    .client-info { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 20px 0; }\n    .client-field { display: flex; gap: 10px; }\n    .client-field strong { min-width: 100px; }\n    table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n    th, td { border: 1px solid #000; padding: 8px; text-align: left; }\n    th { background-color: #f0f0f0; font-weight: bold; }\n    .totals { margin-top: 20px; }\n    .totals-row { display: flex; justify-content: space-between; padding: 5px 0; }\n    .totals-row.total { font-weight: bold; font-size: 18px; border-top: 2px solid #000; padding-top: 10px; margin-top: 10px; }\n    .footer { margin-top: 40px; }\n    .signatures { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; margin-top: 30px; }\n    .signature-line { border-top: 1px solid #000; padding-top: 5px; text-align: center; }\n    .legal { font-size: 10px; margin-top: 20px; line-height: 1.4; }\n    .social { text-align: center; margin: 20px 0; font-weight: bold; }\n  </style>\n</head>\n<body>\n  <div class=\"header\">\n    <div class=\"logo\">GALLE</div>\n    <div class=\"order-info\">\n      <div style=\"font-weight: bold;\">ORDEN DE VENTA</div>\n      <div>No. ${invoice.invoice_number || \"\"}</div>\n      <div>${new Date(invoice.issue_date).toLocaleDateString(\"es-CO\")}</div>\n    </div>\n  </div>\n\n  <div class=\"company-info\">\n    <div><strong>COMERCIALIZADORA GALLE18K ORO LAMINADO Y ACCESORIOS SAS</strong></div>\n    <div><strong>NIT:</strong> 901357041-4 RESPONSABLE DE IVA</div>\n    <div>VILLA DEL ROSARIO - NORTE DE SANTANDER</div>\n    <div><strong>TEL├ëFONOS:</strong> LINEA DETAL: 300 5551856 LINEA MAYOR: 304 3676388</div>\n  </div>\n\n  <div class=\"guarantee\">\n    GARANT├ìA 2 A├æOS POR CAMBIO DE COLOR O DEFECTO DE FABRICA. NO APLICA A MODIFICACIONES O DA├æOS A LA PRENDA POR USO\n  </div>\n\n  <div class=\"client-info\">\n    <div class=\"client-field\"><strong>NOMBRE:</strong> <span>${invoice.client_name || \"\"}</span></div>\n    <div class=\"client-field\"><strong>CELULAR:</strong> <span>${invoice.client_phone || \"\"}</span></div>\n    <div class=\"client-field\"><strong>DIRECCI├ôN:</strong> <span>${invoice.client_address || \"\"}</span></div>\n    <div class=\"client-field\"><strong>C├ëDULA:</strong> <span>${invoice.client_nit || \"\"}</span></div>\n  </div>\n\n  <table>\n    <thead>\n      <tr>\n        <th>REF</th>\n        <th>DESCRIPCI├ôN</th>\n        <th>UND</th>\n        <th>IVA ${invoice.tax_rate || 13}%</th>\n        <th>PRECIO BASE</th>\n        <th>PRECIO NETO</th>\n      </tr>\n    </thead>\n    <tbody>\n      ${items\n        .map(\n          (item: any, index: number) => `\n        <tr>\n          <td>${index + 1}</td>\n          <td>${item.description || \"\"}</td>\n          <td>${item.quantity || 0}</td>\n          <td>$${(item.unit_price * item.quantity * (invoice.tax_rate / 100) || 0).toLocaleString(\"es-CO\")}</td>\n          <td>$${(item.unit_price || 0).toLocaleString(\"es-CO\")}</td>\n          <td>$${(item.total || 0).toLocaleString(\"es-CO\")}</td>\n        </tr>\n      `,\n        )\n        .join(\"\")}\n    </tbody>\n  </table>\n\n  <div class=\"totals\">\n    <div class=\"totals-row\">\n      <span>FORMA DE PAGO: ${invoice.payment_method || \"CONTRA_ENTREGA\"}</span>\n      <span><strong>SUBTOTAL:</strong> $${(invoice.subtotal || 0).toLocaleString(\"es-CO\")}</span>\n    </div>\n    <div class=\"totals-row\">\n      <span></span>\n      <span><strong>IMPUESTOS:</strong> $${(invoice.tax_amount || 0).toLocaleString(\"es-CO\")}</span>\n    </div>\n    <div class=\"totals-row total\">\n      <span></span>\n      <span>TOTAL NETO: $${(invoice.total || 0).toLocaleString(\"es-CO\")}</span>\n    </div>\n  </div>\n\n  <div class=\"social\">\n    S├¡guenos en Instagram @galleorolaminado18k\n  </div>\n\n  <div class=\"signatures\">\n    <div>\n      <div class=\"signature-line\">FIRMA ASESORA</div>\n    </div>\n    <div>\n      <div class=\"signature-line\">FIRMA AUDITOR</div>\n    </div>\n    <div>\n      <div class=\"signature-line\">FIRMA SUPERVISOR</div>\n    </div>\n  </div>\n\n  <div class=\"legal\">\n    <p>SI DESEAS NO APLICAR RETENCI├ôN EN LA FUENTE YA QUE SOMOS BENEFICIARIOS SEZE</p>\n    <p>APARTIR DEL 1 DE ENERO DEL A├æO 2020</p>\n    <p>SI DESEAS APLICAR RETENCI├ôN EN LA FUENTE COMUN├ìCATE CON TU ASESORA</p>\n  </div>\n</body>\n</html>\n  `\n}\n",
        "type": "registry:block",
        "target": "~/app/api/invoices/generate-pdf/route.tsx"
      },
      {
        "path": "app/api/invoices/route.ts",
        "content": "import { type NextRequest, NextResponse } from \"next/server\"\nimport { createServerClient } from \"@/lib/supabase/server\"\n\nexport async function GET(request: NextRequest) {\n  try {\n    const supabase = await createServerClient()\n    const searchParams = request.nextUrl.searchParams\n    const status = searchParams.get(\"status\")\n\n    let query = supabase\n      .from(\"invoices\")\n      .select(`\n        *,\n        invoice_items (*)\n      `)\n      .order(\"issue_date\", { ascending: false })\n\n    if (status && status !== \"all\") {\n      query = query.eq(\"status\", status)\n    }\n\n    const { data, error } = await query\n\n    if (error) {\n      console.error(\"[v0] Error fetching invoices:\", error)\n      return NextResponse.json({ error: error.message }, { status: 500 })\n    }\n\n    return NextResponse.json({ data })\n  } catch (error: any) {\n    console.error(\"[v0] Error in invoices API:\", error)\n    return NextResponse.json({ error: error.message }, { status: 500 })\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const supabase = await createServerClient()\n    const body = await request.json()\n\n    if (!body.guia || !body.transportadora) {\n      return NextResponse.json({ error: \"Los campos gu├¡a y transportadora son obligatorios\" }, { status: 400 })\n    }\n\n    if (!body.ciudad || !body.barrio) {\n      return NextResponse.json({ error: \"Los campos ciudad y barrio son obligatorios\" }, { status: 400 })\n    }\n\n    const { data: invoiceNumberData, error: invoiceNumberError } = await supabase.rpc(\"generate_invoice_number\")\n\n    if (invoiceNumberError) {\n      console.error(\"[v0] Error generating invoice number:\", invoiceNumberError)\n      return NextResponse.json({ error: invoiceNumberError.message }, { status: 500 })\n    }\n\n    const invoiceNumber = invoiceNumberData\n\n    // Calcular totales\n    const subtotal = body.items.reduce((sum: number, item: any) => sum + item.quantity * item.unit_price, 0)\n    const taxRate = body.tax_rate || 19\n    const taxAmount = (subtotal * taxRate) / 100\n    const total = subtotal + taxAmount\n\n    const { data: invoice, error: invoiceError } = await supabase\n      .from(\"invoices\")\n      .insert({\n        invoice_number: invoiceNumber,\n        client_name: body.client_name,\n        client_nit: body.client_nit,\n        client_email: body.client_email,\n        client_phone: body.client_phone,\n        client_address: body.client_address,\n        ciudad: body.ciudad,\n        barrio: body.barrio,\n        issue_date: body.issue_date || new Date().toISOString(),\n        due_date: body.due_date,\n        subtotal,\n        tax_rate: taxRate,\n        tax_amount: taxAmount,\n        total,\n        status: body.status || \"PENDIENTE PAGO\",\n        payment_method: body.payment_method,\n        notes: body.notes,\n        guia: body.guia,\n        transportadora: body.transportadora,\n      })\n      .select()\n      .single()\n\n    if (invoiceError) {\n      console.error(\"[v0] Error creating invoice:\", invoiceError)\n      return NextResponse.json({ error: invoiceError.message }, { status: 500 })\n    }\n\n    const items = body.items.map((item: any) => ({\n      invoice_id: invoice.invoice_number,\n      description: item.description,\n      quantity: item.quantity,\n      unit_price: item.unit_price,\n      total: item.quantity * item.unit_price,\n    }))\n\n    const { error: itemsError } = await supabase.from(\"invoice_items\").insert(items)\n\n    if (itemsError) {\n      console.error(\"[v0] Error creating invoice items:\", itemsError)\n      await supabase.from(\"invoices\").delete().eq(\"invoice_number\", invoice.invoice_number)\n      return NextResponse.json({ error: itemsError.message }, { status: 500 })\n    }\n\n    return NextResponse.json({ data: invoice }, { status: 201 })\n  } catch (error: any) {\n    console.error(\"[v0] Error in invoices POST API:\", error)\n    return NextResponse.json({ error: error.message }, { status: 500 })\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/invoices/route.ts"
      },
      {
        "path": "app/api/invoices/stats/route.ts",
        "content": "import { NextResponse } from \"next/server\"\nimport { createServerClient } from \"@/lib/supabase/server\"\n\nexport async function GET() {\n  try {\n    const supabase = await createServerClient()\n\n    const now = new Date()\n    const currentYear = now.getFullYear()\n    const currentMonth = now.getMonth() + 1\n\n    // Total de facturas\n    const { count: totalInvoices } = await supabase.from(\"invoices\").select(\"*\", { count: \"exact\", head: true })\n\n    // Facturas del mes actual\n    const { count: currentMonthCount } = await supabase\n      .from(\"invoices\")\n      .select(\"*\", { count: \"exact\", head: true })\n      .gte(\"issue_date\", `${currentYear}-${String(currentMonth).padStart(2, \"0\")}-01`)\n      .lt(\n        \"issue_date\",\n        currentMonth === 12\n          ? `${currentYear + 1}-01-01`\n          : `${currentYear}-${String(currentMonth + 1).padStart(2, \"0\")}-01`,\n      )\n\n    // Facturas del mes anterior\n    const previousMonth = currentMonth === 1 ? 12 : currentMonth - 1\n    const previousYear = currentMonth === 1 ? currentYear - 1 : currentYear\n    const { count: previousMonthCount } = await supabase\n      .from(\"invoices\")\n      .select(\"*\", { count: \"exact\", head: true })\n      .gte(\"issue_date\", `${previousYear}-${String(previousMonth).padStart(2, \"0\")}-01`)\n      .lt(\n        \"issue_date\",\n        previousMonth === 12\n          ? `${previousYear + 1}-01-01`\n          : `${previousYear}-${String(previousMonth + 1).padStart(2, \"0\")}-01`,\n      )\n\n    // Facturas de hace 2 meses\n    const twoMonthsAgo = currentMonth <= 2 ? 12 - (2 - currentMonth) : currentMonth - 2\n    const twoMonthsAgoYear = currentMonth <= 2 ? currentYear - 1 : currentYear\n    const { count: twoMonthsAgoCount } = await supabase\n      .from(\"invoices\")\n      .select(\"*\", { count: \"exact\", head: true })\n      .gte(\"issue_date\", `${twoMonthsAgoYear}-${String(twoMonthsAgo).padStart(2, \"0\")}-01`)\n      .lt(\n        \"issue_date\",\n        twoMonthsAgo === 12\n          ? `${twoMonthsAgoYear + 1}-01-01`\n          : `${twoMonthsAgoYear}-${String(twoMonthsAgo + 1).padStart(2, \"0\")}-01`,\n      )\n\n    return NextResponse.json({\n      totalInvoices: totalInvoices || 0,\n      currentMonthCount: currentMonthCount || 0,\n      previousMonthCount: previousMonthCount || 0,\n      twoMonthsAgoCount: twoMonthsAgoCount || 0,\n    })\n  } catch (error: any) {\n    console.error(\"[v0] Error fetching invoice stats:\", error)\n    return NextResponse.json({ error: error.message }, { status: 500 })\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/invoices/stats/route.ts"
      },
      {
        "path": "app/api/metrics/geo/route.ts",
        "content": "import { NextResponse } from \"next/server\"\nimport { createServerClient } from \"@supabase/ssr\"\nimport { cookies } from \"next/headers\"\n\nexport async function GET() {\n  try {\n    const cookieStore = await cookies()\n\n    const supabase = createServerClient(\n      process.env.SUPABASE_SUPABASE_SUPABASE_NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_NEXT_PUBLIC_SUPABASE_ANON_KEY_ANON_KEY_ANON_KEY!,\n      {\n        cookies: {\n          getAll() {\n            return cookieStore.getAll()\n          },\n          setAll(cookiesToSet) {\n            try {\n              cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options))\n            } catch {\n              // Ignore errors in middleware\n            }\n          },\n        },\n      },\n    )\n\n    const { data: sales, error } = await supabase\n      .from(\"sales\")\n      .select(\"city, total_amount, shipping_amount, payment_method, created_at\")\n      .order(\"created_at\", { ascending: false })\n\n    if (error) {\n      console.error(\"[v0] Error fetching sales from Supabase:\", error)\n      return NextResponse.json({ ok: false, error: error.message }, { status: 500 })\n    }\n\n    // Agrupar por ciudad y calcular m├®tricas\n    const byCity = (sales || []).reduce<\n      Record<\n        string,\n        {\n          total: number\n          count: number\n          buyers: Set<string>\n          revenue: number\n        }\n      >\n    >((acc, sale) => {\n      const city = sale.city || \"Sin ciudad\"\n      if (!acc[city]) {\n        acc[city] = {\n          total: 0,\n          count: 0,\n          buyers: new Set(),\n          revenue: 0,\n        }\n      }\n      acc[city].total += sale.total_amount || 0\n      acc[city].count += 1\n      acc[city].revenue += (sale.total_amount || 0) - (sale.shipping_amount || 0)\n      return acc\n    }, {})\n\n    const ranking = Object.entries(byCity)\n      .map(([ciudad, data]) => ({\n        ciudad,\n        total: data.total,\n        ventas: data.count,\n        ticket_promedio: data.count > 0 ? data.total / data.count : 0,\n        revenue_sin_envio: data.revenue,\n      }))\n      .sort((a, b) => b.total - a.total)\n\n    return NextResponse.json({ ok: true, ranking, sales })\n  } catch (error: any) {\n    console.error(\"[v0] Error in geo metrics API:\", error)\n    return NextResponse.json({ ok: false, error: error.message }, { status: 500 })\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/metrics/geo/route.ts"
      },
      {
        "path": "app/api/metrics/summary/route.ts",
        "content": "import { NextResponse } from \"next/server\"\nimport { DB } from \"@/lib/store\"\n\nexport async function GET() {\n  const ventas = DB.getVentas()\n  const pagos = DB.getPagos()\n  const devols = DB.getDevols()\n  const clientes = DB.getClientes()\n\n  const ventasMes = ventas.reduce((s, v) => s + v.total, 0)\n  const ticketProm = ventas.length ? Math.round(ventasMes / ventas.length) : 0\n  const pendientesCE = pagos\n    .filter((p) => p.metodo === \"Contraentrega\" && p.estado === \"Pendiente\")\n    .reduce((s, p) => s + p.monto, 0)\n  const distMetodo = pagos.reduce<Record<string, number>>((a, p) => {\n    a[p.metodo] = (a[p.metodo] ?? 0) + p.monto\n    return a\n  }, {})\n  const recurrentes = clientes.filter((c) => c.frecuencia >= 2).length\n\n  return NextResponse.json({\n    ok: true,\n    data: {\n      ventasMes,\n      ticketPromedio: ticketProm,\n      devoluciones: devols.length,\n      pendienteMiPaquete: pendientesCE,\n      pagosPorMetodo: distMetodo,\n      clientesRecurrentes: recurrentes,\n    },\n  })\n}\n",
        "type": "registry:page",
        "target": "app/api/metrics/summary/route.ts"
      },
      {
        "path": "app/api/mipaquete/check-returns/route.ts",
        "content": "import { createClient } from \"@/lib/supabase/server\"\nimport { NextResponse } from \"next/server\"\n\nconst MIPAQUETE_API_URL = \"https://api-v2.mpr.mipaquete.com/getSendingTracking\"\nconst SESSION_TRACKER = \"a0c96ea6-b22d-4fb7-a278-850678d5429c\"\nconst API_KEY =\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzExOWRjNDMzNjk2M2YzMzBlYjFjZTYiLCJuYW1lIjoiQ29tZXJjaWFsaXphZG9yYSIsInN1cm5hbWUiOiJnYWxlMThrIiwiZW1haWwiOiJnYWxsZW9yb2xhbWluYWRvMThrQGdtYWlsLmNvbSIsImNlbGxQaG9uZSI6IjMwMTY4NDUwMjYiLCJjcmVhdGVkQXQiOiIyMDI0LTEwLTE3VDIzOjI5OjA4LjAxNFoiLCJkYXRlIjoiMjAyNS0wOC0xOSAxMDoyMDoyNCIsImlhdCI6MTc1NTYxNjgyNH0.LHBLIsBCQlNM6WlnB514dN00dR7LcPjIQcYt1B62hEA\"\n\nexport async function GET() {\n  try {\n    const supabase = await createClient()\n\n    // Obtener todas las ventas con contraentrega que no sean devoluciones\n    const { data: sales, error: salesError } = await supabase\n      .from(\"sales\")\n      .select(\"*\")\n      .eq(\"payment_method\", \"contraentrega\")\n      .eq(\"is_return\", false)\n      .not(\"mipaquete_code\", \"is\", null)\n\n    if (salesError) {\n      console.error(\"[v0] Error fetching sales:\", salesError)\n      return NextResponse.json({ error: salesError.message }, { status: 500 })\n    }\n\n    const updates = []\n\n    for (const sale of sales || []) {\n      if (!sale.mipaquete_code) continue\n\n      try {\n        const response = await fetch(MIPAQUETE_API_URL, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"session-tracker\": SESSION_TRACKER,\n            apikey: API_KEY,\n          },\n          body: JSON.stringify({ mpCode: sale.mipaquete_code }),\n        })\n\n        if (!response.ok) {\n          console.error(`[v0] MiPaquete API error for ${sale.mipaquete_code}:`, response.status)\n          continue\n        }\n\n        const trackingData = await response.json()\n\n        let latestStatus = \"Pendiente\"\n        const carrierName = trackingData?.deliveryCompanyName || \"\"\n\n        if (trackingData?.tracking && Array.isArray(trackingData.tracking)) {\n          const sortedTracking = trackingData.tracking.sort(\n            (a: any, b: any) => new Date(b.date).getTime() - new Date(a.date).getTime(),\n          )\n          if (sortedTracking.length > 0) {\n            latestStatus = sortedTracking[0].updateState || \"Pendiente\"\n          }\n        }\n\n        const isReturn =\n          latestStatus.toLowerCase().includes(\"devolucion\") ||\n          latestStatus.toLowerCase().includes(\"devuelto\") ||\n          latestStatus.toLowerCase().includes(\"novedad\") ||\n          trackingData?.tracking?.some(\n            (t: any) =>\n              t.updateState?.toLowerCase().includes(\"devolucion\") || t.updateState?.toLowerCase().includes(\"devuelto\"),\n          )\n\n        const updateData: any = {\n          mipaquete_status: latestStatus,\n          mipaquete_carrier: carrierName,\n        }\n\n        if (isReturn) {\n          updateData.is_return = true\n          updateData.status = \"cancelada\"\n          updateData.return_date = new Date().toISOString()\n        }\n\n        const { error: updateError } = await supabase.from(\"sales\").update(updateData).eq(\"id\", sale.id)\n\n        if (updateError) {\n          console.error(`[v0] Error updating sale ${sale.sale_id}:`, updateError)\n        } else {\n          updates.push({\n            sale_id: sale.sale_id,\n            status: isReturn ? \"moved_to_returns\" : \"updated\",\n            mipaquete_status: latestStatus,\n          })\n        }\n\n        // Guardar tracking data\n        await supabase.from(\"return_tracking\").upsert({\n          sale_id: sale.id,\n          mipaquete_code: sale.mipaquete_code,\n          last_check: new Date().toISOString(),\n          status: latestStatus,\n          tracking_data: trackingData,\n        })\n      } catch (error) {\n        console.error(`[v0] Error processing sale ${sale.sale_id}:`, error)\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      checked: sales?.length || 0,\n      updates: updates.length,\n      details: updates,\n    })\n  } catch (error) {\n    console.error(\"[v0] Error in check-returns:\", error)\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 })\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/mipaquete/check-returns/route.ts"
      },
      {
        "path": "app/api/mipaquete/track/route.ts",
        "content": "import { NextResponse } from \"next/server\"\nimport { getTrackingByGuide } from \"@/lib/mipaquete\"\n\nexport async function GET(req: Request) {\n  const { searchParams } = new URL(req.url)\n  const guia = searchParams.get(\"guia\") || \"\"\n  if (!guia) {\n    return NextResponse.json({ ok: false, error: \"Falta par├ímetro 'guia'.\" }, { status: 400 })\n  }\n\n  try {\n    const data = await getTrackingByGuide(guia)\n    return NextResponse.json({\n      ok: true,\n      data,\n      publicUrl: `https://mipaquete.com/seguimiento?codigo=${encodeURIComponent(guia)}`,\n    })\n  } catch (err: any) {\n    return NextResponse.json(\n      {\n        ok: false,\n        error: \"No fue posible consultar el tracking.\",\n        detail: String(err?.message || err),\n        publicUrl: `https://mipaquete.com/seguimiento?codigo=${encodeURIComponent(guia)}`,\n      },\n      { status: 404 },\n    )\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/mipaquete/track/route.ts"
      },
      {
        "path": "app/api/mipaquete/tracking/route.ts",
        "content": "import { type NextRequest, NextResponse } from \"next/server\"\n\nconst API_V2_GET = \"https://api-v2.mpr.mipaquete.com/getSendingTracking\"\nconst API_V1_POST = \"https://api.mpr.mipaquete.com/getSendingTracking\"\n\nconst APIKEY = process.env.MIPAQUETE_API_KEY!\nconst SESSION = process.env.MIPAQUETE_SESSION_TRACKER!\n\nfunction sanitize(code: string) {\n  return (code || \"\").trim().replace(/\\s+/g, \"\").toUpperCase()\n}\n\nasync function tryV2Get(mpCode: string) {\n  const url = `${API_V2_GET}?mpCode=${encodeURIComponent(mpCode)}`\n  const r = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      apikey: APIKEY,\n      \"session-tracker\": SESSION,\n    },\n  })\n\n  if (!r.ok) {\n    const text = await r.text().catch(() => \"\")\n    throw new Error(`v2 GET ${r.status}: ${text}`)\n  }\n\n  return r.json()\n}\n\nasync function tryV1Post(mpCode: string) {\n  const r = await fetch(API_V1_POST, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      apikey: APIKEY,\n      \"session-tracker\": SESSION,\n    },\n    body: JSON.stringify({ mpCode }),\n  })\n\n  if (!r.ok) {\n    const text = await r.text().catch(() => \"\")\n    throw new Error(`v1 POST ${r.status}: ${text}`)\n  }\n\n  return r.json()\n}\n\nfunction normalizePayload(json: any) {\n  const company = json.deliveryCompanyName || json.deliveryCompanyNameTxt || json.deliveryCompany || \"Desconocida\"\n\n  const timeline = Array.isArray(json.tracking)\n    ? json.tracking.map((t: any) => ({\n        status: t.updateState || t.state || \"Actualizaci├│n\",\n        at: t.date || t.updatedAt || null,\n      }))\n    : []\n\n  return {\n    carrier: company,\n    events: timeline,\n    raw: json,\n  }\n}\n\nexport async function GET(req: NextRequest) {\n  try {\n    const code = sanitize(req.nextUrl.searchParams.get(\"mpCode\") || \"\")\n    if (!code) {\n      return NextResponse.json({ error: \"Falta mpCode\" }, { status: 400 })\n    }\n\n    console.log(\"[v0] Consultando tracking para:\", code)\n\n    let data: any\n    try {\n      data = await tryV2Get(code)\n      console.log(\"[v0] Tracking obtenido desde v2 GET\")\n    } catch (e1) {\n      console.log(\"[v0] v2 GET fall├│, intentando v1 POST...\")\n      try {\n        data = await tryV1Post(code)\n        console.log(\"[v0] Tracking obtenido desde v1 POST\")\n      } catch (e2) {\n        throw e2\n      }\n    }\n\n    return NextResponse.json(normalizePayload(data))\n  } catch (e: any) {\n    console.error(\"[v0] Error consultando tracking:\", e)\n    const mpCode = req.nextUrl.searchParams.get(\"mpCode\") || \"\"\n    return NextResponse.json(\n      {\n        error: e?.message || \"Error consultando tracking\",\n        openExternal: true,\n        externalUrl: `https://mipaquete.com/track?mpCode=${encodeURIComponent(mpCode)}`,\n      },\n      { status: 502 },\n    )\n  }\n}\n\nexport async function POST(req: Request) {\n  try {\n    const { mpCode } = await req.json()\n    if (!mpCode || typeof mpCode !== \"string\") {\n      return NextResponse.json({ error: \"mpCode requerido\" }, { status: 400 })\n    }\n\n    const code = sanitize(mpCode)\n    console.log(\"[v0] Consultando tracking para:\", code)\n\n    let data: any\n    try {\n      data = await tryV2Get(code)\n      console.log(\"[v0] Tracking obtenido desde v2 GET\")\n    } catch (e1) {\n      console.log(\"[v0] v2 GET fall├│, intentando v1 POST...\")\n      try {\n        data = await tryV1Post(code)\n        console.log(\"[v0] Tracking obtenido desde v1 POST\")\n      } catch (e2) {\n        throw e2\n      }\n    }\n\n    return NextResponse.json(normalizePayload(data))\n  } catch (e: any) {\n    console.error(\"[v0] Error consultando tracking:\", e)\n    return NextResponse.json(\n      {\n        error: e?.message || \"Error consultando tracking\",\n        openExternal: true,\n      },\n      { status: 502 },\n    )\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/mipaquete/tracking/route.ts"
      },
      {
        "path": "app/api/mipaquete/webhook/route.ts",
        "content": "import { NextResponse } from \"next/server\"\nimport { marcarVentaDevueltaPorFactura, updateEnvioPorGuia, updateFacturaEstado } from \"@/lib/store\"\n\nexport async function POST(req: Request) {\n  const body = await req.json()\n  const type = String(body?.type ?? \"\").toLowerCase()\n  const guia = String(body?.guide ?? \"\")\n  const invoice = String(body?.invoice ?? \"\")\n\n  switch (type) {\n    case \"payment_confirmed\":\n      updateFacturaEstado(invoice, \"Pagado\", body?.method ?? \"Contraentrega\")\n      break\n    case \"return_completed\":\n      marcarVentaDevueltaPorFactura(invoice, body?.reason)\n      break\n    case \"in_transit\":\n      updateEnvioPorGuia(guia, \"En tr├ínsito\")\n      break\n    case \"delivered\":\n      updateEnvioPorGuia(guia, \"Entregado\")\n      break\n    case \"returned\":\n      updateEnvioPorGuia(guia, \"Devuelto\")\n      break\n    case \"delayed\":\n      updateEnvioPorGuia(guia, \"Retrasado\")\n      break\n    default:\n      break\n  }\n  return NextResponse.json({ ok: true })\n}\n",
        "type": "registry:page",
        "target": "app/api/mipaquete/webhook/route.ts"
      },
      {
        "path": "app/api/pagos/list/route.ts",
        "content": "import { NextResponse } from \"next/server\"\nimport { DB } from \"@/lib/store\"\n\nexport async function GET() {\n  return NextResponse.json({ ok: true, data: DB.getPagos() })\n}\n",
        "type": "registry:page",
        "target": "app/api/pagos/list/route.ts"
      },
      {
        "path": "app/api/sales/[id]/payment/route.ts",
        "content": "import { createClient } from \"@/lib/supabase/server\"\nimport { NextResponse } from \"next/server\"\n\nexport async function PATCH(request: Request, { params }: { params: { id: string } }) {\n  try {\n    const { paid } = await request.json()\n    const supabase = await createClient()\n\n    const updateData: any = {\n      paid_by_mipaquete: paid,\n    }\n\n    // Si se marca como pagado, guardar la fecha de pago\n    if (paid) {\n      updateData.payment_date = new Date().toISOString()\n    } else {\n      updateData.payment_date = null\n    }\n\n    const { data, error } = await supabase.from(\"sales\").update(updateData).eq(\"id\", params.id).select().single()\n\n    if (error) {\n      return NextResponse.json({ error: error.message }, { status: 500 })\n    }\n\n    return NextResponse.json({ data })\n  } catch (error) {\n    console.error(\"[v0] Error updating payment status:\", error)\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 })\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/sales/[id]/payment/route.ts"
      },
      {
        "path": "app/api/sales/route.ts",
        "content": "import { createClient } from \"@/lib/supabase/server\"\nimport { NextResponse } from \"next/server\"\n\nexport async function GET(request: Request) {\n  try {\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n      return NextResponse.json(\n        {\n          error:\n            \"Configuraci├│n de Supabase incompleta. Por favor configura las variables de entorno NEXT_PUBLIC_SUPABASE_URL y NEXT_PUBLIC_SUPABASE_ANON_KEY\",\n          data: [],\n        },\n        { status: 500 },\n      )\n    }\n\n    const { searchParams } = new URL(request.url)\n    const filter = searchParams.get(\"filter\") || \"all\"\n    const period = Number.parseInt(searchParams.get(\"period\") || \"7\")\n\n    const supabase = await createClient()\n\n    let query = supabase.from(\"sales\").select(\"*\").order(\"sale_date\", { ascending: false })\n\n    switch (filter) {\n      case \"contraentrega\":\n        query = query.eq(\"payment_method\", \"contraentrega\").eq(\"is_return\", false)\n        break\n      case \"efectivo\":\n        query = query.eq(\"payment_method\", \"efectivo\").eq(\"is_return\", false)\n        break\n      case \"transferencia\":\n        query = query.eq(\"payment_method\", \"transferencia\").eq(\"is_return\", false)\n        break\n      case \"devoluciones\":\n        query = query.eq(\"is_return\", true)\n        break\n      case \"pagado_mipaquete\":\n        const paidDate = new Date()\n        paidDate.setDate(paidDate.getDate() - period)\n        query = query\n          .eq(\"payment_method\", \"contraentrega\")\n          .eq(\"paid_by_mipaquete\", true)\n          .gte(\"payment_date\", paidDate.toISOString())\n        break\n      case \"pendiente_mipaquete\":\n        query = query.eq(\"payment_method\", \"contraentrega\").eq(\"paid_by_mipaquete\", false).eq(\"is_return\", false)\n        break\n      case \"all\":\n      default:\n        query = query.eq(\"is_return\", false)\n        break\n    }\n\n    const { data, error } = await query\n\n    if (error) {\n      console.error(\"[v0] Supabase error:\", error.message)\n      return NextResponse.json(\n        {\n          error: error.message,\n          data: [],\n          needsSetup: error.message.includes(\"Could not find the table\"),\n        },\n        { status: error.message.includes(\"Could not find the table\") ? 404 : 500 },\n      )\n    }\n\n    return NextResponse.json({ data: data || [] })\n  } catch (error: any) {\n    console.error(\"[v0] Error fetching sales:\", error?.message || error)\n    return NextResponse.json(\n      {\n        error: error?.message || \"Error interno del servidor. Verifica tu configuraci├│n de Supabase.\",\n        data: [],\n      },\n      { status: 500 },\n    )\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    const supabase = await createClient()\n\n    const { data, error } = await supabase.from(\"sales\").insert([body]).select().single()\n\n    if (error) {\n      console.error(\"[v0] Error creating sale:\", error.message)\n      return NextResponse.json({ error: error.message }, { status: 500 })\n    }\n\n    return NextResponse.json({ data })\n  } catch (error: any) {\n    console.error(\"[v0] Error creating sale:\", error?.message || error)\n    return NextResponse.json({ error: error?.message || \"Internal server error\" }, { status: 500 })\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/sales/route.ts"
      },
      {
        "path": "app/api/sales/stats/route.ts",
        "content": "import { createClient } from \"@/lib/supabase/server\"\nimport { NextResponse } from \"next/server\"\n\nconst DEFAULT_STATS = {\n  totalSales: 0,\n  totalRevenue: 0,\n  transferTotal: 0,\n  cashTotal: 0,\n  returnsTotal: 0,\n  returnsCount: 0,\n  averageTicket: 0,\n  paidByMipaquete: 0,\n  pendingByMipaquete: 0,\n}\n\nexport async function GET(request: Request) {\n  try {\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n      return NextResponse.json(\n        {\n          error: \"Configuraci├│n de Supabase incompleta\",\n          ...DEFAULT_STATS,\n        },\n        { status: 500 },\n      )\n    }\n\n    const { searchParams } = new URL(request.url)\n    const period = Number.parseInt(searchParams.get(\"period\") || \"7\")\n\n    const supabase = await createClient()\n\n    const now = new Date()\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1)\n    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999)\n\n    const { data: currentMonthSales, error: currentMonthError } = await supabase\n      .from(\"sales\")\n      .select(\"*\")\n      .eq(\"is_return\", false)\n      .gte(\"sale_date\", startOfMonth.toISOString())\n      .lte(\"sale_date\", endOfMonth.toISOString())\n\n    if (currentMonthError) {\n      console.error(\"[v0] Supabase error:\", currentMonthError.message)\n      return NextResponse.json(\n        {\n          error: currentMonthError.message,\n          ...DEFAULT_STATS,\n          needsSetup: currentMonthError.message.includes(\"Could not find the table\"),\n        },\n        { status: currentMonthError.message.includes(\"Could not find the table\") ? 404 : 500 },\n      )\n    }\n\n    const totalSales = currentMonthSales?.length || 0\n    const totalRevenue = currentMonthSales?.reduce((sum, sale) => sum + (Number(sale.total) || 0), 0) || 0\n\n    const transferSales = currentMonthSales?.filter((s) => s.payment_method === \"transferencia\") || []\n    const cashSales = currentMonthSales?.filter((s) => s.payment_method === \"efectivo\") || []\n    const contraentregaSales = currentMonthSales?.filter((s) => s.payment_method === \"contraentrega\") || []\n\n    const transferTotal = transferSales.reduce((sum, sale) => sum + (Number(sale.total) || 0), 0)\n    const cashTotal = cashSales.reduce((sum, sale) => sum + (Number(sale.total) || 0), 0)\n\n    const { data: returns, error: returnsError } = await supabase\n      .from(\"sales\")\n      .select(\"*\")\n      .eq(\"is_return\", true)\n      .gte(\"sale_date\", startOfMonth.toISOString())\n      .lte(\"sale_date\", endOfMonth.toISOString())\n\n    if (returnsError) {\n      console.error(\"[v0] Error fetching returns:\", returnsError.message)\n    }\n\n    const returnsTotal = returns?.reduce((sum, sale) => sum + (Number(sale.total) || 0), 0) || 0\n\n    const averageTicket = totalSales > 0 ? totalRevenue / totalSales : 0\n\n    const periodDate = new Date()\n    periodDate.setDate(periodDate.getDate() - period)\n\n    const paidContraentrega = contraentregaSales.filter(\n      (s) => s.paid_by_mipaquete === true && s.payment_date && new Date(s.payment_date) >= periodDate,\n    )\n\n    const pendingContraentrega = contraentregaSales.filter((s) => s.paid_by_mipaquete === false)\n\n    const paidByMipaquete = paidContraentrega.reduce((sum, sale) => sum + (Number(sale.total) || 0), 0)\n    const pendingByMipaquete = pendingContraentrega.reduce((sum, sale) => sum + (Number(sale.total) || 0), 0)\n\n    return NextResponse.json({\n      totalSales,\n      totalRevenue,\n      transferTotal,\n      cashTotal,\n      returnsTotal,\n      returnsCount: returns?.length || 0,\n      averageTicket,\n      paidByMipaquete,\n      pendingByMipaquete,\n    })\n  } catch (error: any) {\n    console.error(\"[v0] Error fetching stats:\", error?.message || error)\n    return NextResponse.json(\n      {\n        error: error?.message || \"Error interno del servidor\",\n        ...DEFAULT_STATS,\n      },\n      { status: 500 },\n    )\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/sales/stats/route.ts"
      },
      {
        "path": "app/api/upload/route.ts",
        "content": "import { put } from \"@vercel/blob\"\nimport { NextResponse } from \"next/server\"\nimport { createClient } from \"@/lib/supabase/server\"\n\nexport async function POST(request: Request) {\n  try {\n    const formData = await request.formData()\n    const file = formData.get(\"file\") as File\n    const saleId = formData.get(\"saleId\") as string\n\n    if (!file) {\n      return NextResponse.json({ error: \"No file provided\" }, { status: 400 })\n    }\n\n    if (!saleId) {\n      return NextResponse.json({ error: \"No sale ID provided\" }, { status: 400 })\n    }\n\n    const blob = await put(file.name, file, {\n      access: \"public\",\n    })\n\n    const supabase = await createClient()\n    const { error: updateError } = await supabase\n      .from(\"sales\")\n      .update({\n        photo_evidence: blob.url,\n        photo_uploaded_at: new Date().toISOString(),\n      })\n      .eq(\"id\", saleId)\n\n    if (updateError) {\n      console.error(\"[v0] Error updating sale with photo:\", updateError)\n      return NextResponse.json({ error: \"Failed to update sale\" }, { status: 500 })\n    }\n\n    return NextResponse.json({ url: blob.url, uploadedAt: new Date().toISOString() })\n  } catch (error) {\n    console.error(\"[v0] Error uploading file:\", error)\n    return NextResponse.json({ error: \"Upload failed\" }, { status: 500 })\n  }\n}\n",
        "type": "registry:page",
        "target": "app/api/upload/route.ts"
      },
      {
        "path": "app/api/ventas/evidencia/route.ts",
        "content": "import { NextResponse } from \"next/server\"\nimport { replaceEvidence } from \"@/lib/ventasStore\"\n\nexport async function POST(req: Request) {\n  const { ventaId, evidenciaUrl } = await req.json()\n  if (!ventaId || !evidenciaUrl) {\n    return NextResponse.json({ ok: false, error: \"ventaId y evidenciaUrl son requeridos\" }, { status: 400 })\n  }\n  const updated = replaceEvidence(ventaId, evidenciaUrl)\n  return NextResponse.json({ ok: true, data: updated })\n}\n",
        "type": "registry:page",
        "target": "app/api/ventas/evidencia/route.ts"
      },
      {
        "path": "app/api/ventas/list/route.ts",
        "content": "import { NextResponse } from \"next/server\"\nimport { listVentas } from \"@/lib/ventasStore\"\n\nexport async function GET() {\n  return NextResponse.json({ ok: true, data: listVentas() })\n}\n",
        "type": "registry:page",
        "target": "app/api/ventas/list/route.ts"
      },
      {
        "path": "app/crm/loading.tsx",
        "content": "import { Sidebar } from \"@/components/sidebar\"\n\nexport default function Loading() {\n  return (\n    <div className=\"flex h-screen bg-zinc-50\">\n      <Sidebar />\n      <div className=\"flex flex-1 items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto mb-4 h-12 w-12 animate-spin rounded-full border-4 border-amber-500 border-t-transparent\" />\n          <p className=\"text-sm text-zinc-600\">Cargando CRM...</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:block",
        "target": "~/app/crm/loading.tsx"
      },
      {
        "path": "app/crm/page.tsx",
        "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useRef, useCallback, useMemo } from \"react\"\nimport { Sidebar } from \"@/components/sidebar\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport {\n  Search,\n  Phone,\n  Video,\n  MoreVertical,\n  Send,\n  Paperclip,\n  Smile,\n  Mic,\n  MessageSquare,\n  ShoppingBag,\n  ChevronDown,\n  MapPin,\n  Mail,\n  Calendar,\n  User,\n} from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\n// Estados del CRM\nconst ESTADOS = [\n  { id: \"todas\", label: \"Todas\", color: \"bg-zinc-100 text-zinc-700\", count: 12 },\n  { id: \"por-contestar\", label: \"Por Contestar\", color: \"bg-blue-100 text-blue-700\", count: 3 },\n  { id: \"pendiente-datos\", label: \"Pendiente Datos\", color: \"bg-yellow-100 text-yellow-700\", count: 2 },\n  { id: \"por-confirmar\", label: \"Por Confirmar\", color: \"bg-purple-100 text-purple-700\", count: 4 },\n  { id: \"pendiente-guia\", label: \"Pendiente Gu├¡a\", color: \"bg-orange-100 text-orange-700\", count: 2 },\n  { id: \"pedido-completo\", label: \"Pedido Completo\", color: \"bg-green-100 text-green-700\", count: 1 },\n]\n\n// Canales de comunicaci├│n\nconst CANALES = [\n  { id: \"whatsapp\", label: \"WhatsApp\", icon: \"­ƒÆ¼\", color: \"bg-green-500\" },\n  { id: \"instagram\", label: \"Instagram\", icon: \"­ƒôÀ\", color: \"bg-pink-500\" },\n  { id: \"messenger\", label: \"Messenger\", icon: \"­ƒÆ¼\", color: \"bg-blue-500\" },\n  { id: \"web\", label: \"Web\", icon: \"­ƒîÉ\", color: \"bg-zinc-500\" },\n  { id: \"telefono\", label: \"Tel├®fono\", icon: \"­ƒô×\", color: \"bg-amber-500\" },\n]\n\n// Datos mock de conversaciones\nconst MOCK_CONVERSATIONS = [\n  {\n    id: \"1\",\n    clientName: \"Mar├¡a Gonz├ílez\",\n    lastMessage: \"Hola, quiero informaci├│n sobre baliner├¡a\",\n    timestamp: \"10:30 AM\",\n    unread: 2,\n    status: \"por-contestar\",\n    canal: \"whatsapp\",\n    avatar: \"/diverse-woman-portrait.png\",\n    clientType: \"Nuevo\",\n    interest: \"Baliner├¡a\",\n  },\n  {\n    id: \"2\",\n    clientName: \"Carlos Ram├¡rez\",\n    lastMessage: \"┬┐Cu├índo llega mi pedido?\",\n    timestamp: \"9:45 AM\",\n    unread: 0,\n    status: \"pendiente-gu├¡a\",\n    canal: \"instagram\",\n    avatar: \"/man.jpg\",\n    clientType: \"Recurrente\",\n    interest: \"Joyer├¡a\",\n  },\n  {\n    id: \"3\",\n    clientName: \"Ana Mart├¡nez\",\n    lastMessage: \"Perfecto, confirmo la compra\",\n    timestamp: \"Ayer\",\n    unread: 0,\n    status: \"por-confirmar\",\n    canal: \"web\",\n    avatar: \"/woman-2.jpg\",\n    clientType: \"Nuevo\",\n    interest: \"Baliner├¡a\",\n  },\n  {\n    id: \"4\",\n    clientName: \"Luis Hern├índez\",\n    lastMessage: \"┬┐Tienen disponible en talla M?\",\n    timestamp: \"Ayer\",\n    unread: 1,\n    status: \"por-contestar\",\n    canal: \"messenger\",\n    avatar: \"/man-2.jpg\",\n    clientType: \"Nuevo\",\n    interest: \"Joyer├¡a\",\n  },\n  {\n    id: \"5\",\n    clientName: \"Patricia Silva\",\n    lastMessage: \"Gracias por la atenci├│n\",\n    timestamp: \"2 d├¡as\",\n    unread: 0,\n    status: \"pedido-completo\",\n    canal: \"whatsapp\",\n    avatar: \"/woman-3.jpg\",\n    clientType: \"Recurrente\",\n    interest: \"Baliner├¡a\",\n  },\n  {\n    id: \"6\",\n    clientName: \"Roberto D├¡az\",\n    lastMessage: \"┬┐Cu├índo tienen nuevos dise├▒os?\",\n    timestamp: \"2 d├¡as\",\n    unread: 0,\n    status: \"pendiente-datos\",\n    canal: \"whatsapp\",\n    avatar: \"/man.jpg\",\n    clientType: \"Nuevo\",\n    interest: \"Joyer├¡a\",\n  },\n  {\n    id: \"7\",\n    clientName: \"Laura P├®rez\",\n    lastMessage: \"Me encant├│ el collar que vi\",\n    timestamp: \"3 d├¡as\",\n    unread: 1,\n    status: \"por-contestar\",\n    canal: \"instagram\",\n    avatar: \"/woman-2.jpg\",\n    clientType: \"Nuevo\",\n    interest: \"Joyer├¡a\",\n  },\n  {\n    id: \"8\",\n    clientName: \"Diego Torres\",\n    lastMessage: \"Necesito confirmar mi direcci├│n\",\n    timestamp: \"3 d├¡as\",\n    unread: 0,\n    status: \"pendiente-datos\",\n    canal: \"messenger\",\n    avatar: \"/man-2.jpg\",\n    clientType: \"Recurrente\",\n    interest: \"Baliner├¡a\",\n  },\n  {\n    id: \"9\",\n    clientName: \"Sof├¡a Ruiz\",\n    lastMessage: \"┬┐Hacen env├¡os internacionales?\",\n    timestamp: \"4 d├¡as\",\n    unread: 0,\n    status: \"por-confirmar\",\n    canal: \"web\",\n    avatar: \"/woman-3.jpg\",\n    clientType: \"Nuevo\",\n    interest: \"Baliner├¡a\",\n  },\n  {\n    id: \"10\",\n    clientName: \"Miguel ├üngel Castro\",\n    lastMessage: \"Excelente servicio, muchas gracias\",\n    timestamp: \"5 d├¡as\",\n    unread: 0,\n    status: \"pedido-completo\",\n    canal: \"whatsapp\",\n    avatar: \"/business-agent.png\",\n    clientType: \"Recurrente\",\n    interest: \"Joyer├¡a\",\n  },\n]\n\n// Mensajes mock\nconst MOCK_MESSAGES = [\n  {\n    id: \"1\",\n    sender: \"client\",\n    content: \"Hola, quiero informaci├│n sobre baliner├¡a\",\n    timestamp: new Date(Date.now() - 15 * 60 * 1000), // Hace 15 minutos\n    avatar: \"/diverse-woman-portrait.png\",\n  },\n  {\n    id: \"2\",\n    sender: \"agent\",\n    content:\n      \"┬íHola Mar├¡a! Claro, con gusto te ayudo. Tenemos una hermosa colecci├│n de baliner├¡a disponible. ┬┐Qu├® tipo de pieza est├ís buscando?\",\n    timestamp: new Date(Date.now() - 14 * 60 * 1000), // Hace 14 minutos\n    avatar: \"/business-agent.png\",\n  },\n  {\n    id: \"3\",\n    sender: \"client\",\n    content: \"Me interesan los aretes y collares. ┬┐Cu├íles son los precios?\",\n    timestamp: new Date(Date.now() - 13 * 60 * 1000), // Hace 13 minutos\n    avatar: \"/diverse-woman-portrait.png\",\n  },\n  {\n    id: \"4\",\n    sender: \"client\",\n    content: \"Estoy esperando respuesta...\",\n    timestamp: new Date(Date.now() - 6 * 60 * 1000), // Hace 6 minutos\n    avatar: \"/diverse-woman-portrait.png\",\n  },\n]\n\n// Funci├│n para calcular tiempo sin responder\nfunction getMinutesSinceLastMessage(timestamp: Date): number {\n  const now = new Date()\n  const diffMs = now.getTime() - timestamp.getTime()\n  return Math.floor(diffMs / (1000 * 60))\n}\n\nfunction formatTime(date: Date): string {\n  const hours = date.getHours()\n  const minutes = date.getMinutes()\n  const ampm = hours >= 12 ? \"PM\" : \"AM\"\n  const hours12 = hours % 12 || 12\n  const minutesStr = minutes.toString().padStart(2, \"0\")\n  return `${hours12}:${minutesStr} ${ampm}`\n}\n\nfunction detectInterest(message: string): \"Baliner├¡a\" | \"Joyer├¡a\" | null {\n  const lowerMessage = message.toLowerCase()\n  if (lowerMessage.includes(\"baliner├¡a\") || lowerMessage.includes(\"balineria\")) {\n    return \"Baliner├¡a\"\n  }\n  if (lowerMessage.includes(\"joyer├¡a\") || lowerMessage.includes(\"joyeria\") || lowerMessage.includes(\"joyas\")) {\n    return \"Joyer├¡a\"\n  }\n  return null\n}\n\nfunction getMinutesSinceConversation(conversation: (typeof MOCK_CONVERSATIONS)[0]): number {\n  // Simulamos tiempos realistas basados en el ID de la conversaci├│n\n  const mockMinutes: Record<string, number> = {\n    \"1\": 15, // Mar├¡a Gonz├ílez - 15 minutos sin responder (urgente)\n    \"2\": 8, // Carlos Ram├¡rez - 8 minutos sin responder (urgente)\n    \"3\": 3, // Ana Mart├¡nez - 3 minutos sin responder\n    \"4\": 6, // Luis Hern├índez - 6 minutos sin responder (urgente)\n    \"5\": 0, // Patricia Silva - pedido completo, no urgente\n    \"6\": 0, // Roberto D├¡az - pendiente datos\n    \"7\": 12, // Laura P├®rez - 12 minutos sin responder (urgente)\n    \"8\": 0, // Diego Torres - pendiente datos\n    \"9\": 0, // Sof├¡a Ruiz - por confirmar\n    \"10\": 0, // Miguel ├üngel Castro - pedido completo\n  }\n\n  // Solo mostrar para conversaciones \"Por Contestar\"\n  if (conversation.status !== \"por-contestar\") {\n    return 0\n  }\n\n  return mockMinutes[conversation.id] || 0\n}\n\nexport default function CRMPage() {\n  const [selectedEstado, setSelectedEstado] = useState(\"todas\")\n  const [selectedConversation, setSelectedConversation] = useState<string | null>(null)\n  const [searchQuery, setSearchQuery] = useState(\"\")\n  const [messageInput, setMessageInput] = useState(\"\")\n  const [activeTab, setActiveTab] = useState<\"reply\" | \"note\" | \"schedule\">(\"reply\")\n  // Estados para secciones expandibles\n  const [expandedSections, setExpandedSections] = useState({\n    contactInfo: false,\n    vipLists: false,\n    history: false,\n  })\n\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false)\n  const [isRecording, setIsRecording] = useState(false)\n  const [recordingTime, setRecordingTime] = useState(0)\n  const fileInputRef = useRef<HTMLInputElement>(null)\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null)\n  const recordingIntervalRef = useRef<NodeJS.Timeout | null>(null)\n\n  const filteredConversations = useMemo(() => {\n    return MOCK_CONVERSATIONS.filter((conv) => {\n      const matchesEstado = selectedEstado === \"todas\" || conv.status === selectedEstado\n      const matchesSearch =\n        searchQuery === \"\" ||\n        conv.clientName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        conv.lastMessage.toLowerCase().includes(searchQuery.toLowerCase())\n      return matchesEstado && matchesSearch\n    })\n  }, [selectedEstado, searchQuery])\n\n  const currentConversation = useMemo(\n    () => MOCK_CONVERSATIONS.find((c) => c.id === selectedConversation),\n    [selectedConversation],\n  )\n\n  const currentCanal = useMemo(() => CANALES.find((c) => c.id === currentConversation?.canal), [currentConversation])\n\n  const lastClientMessage = useMemo(() => [...MOCK_MESSAGES].reverse().find((m) => m.sender === \"client\"), [])\n\n  const minutesSinceLastMessage = lastClientMessage ? getMinutesSinceLastMessage(lastClientMessage.timestamp) : 0\n\n  const insertEmoji = useCallback((emoji: string) => {\n    setMessageInput((prev) => prev + emoji)\n    setShowEmojiPicker(false)\n  }, [])\n\n  const handleAttachment = useCallback(() => {\n    fileInputRef.current?.click()\n  }, [])\n\n  const handleFileChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files\n    if (files && files.length > 0) {\n      alert(`Archivo seleccionado: ${files[0].name}`)\n    }\n  }, [])\n\n  const startRecording = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })\n      const mediaRecorder = new MediaRecorder(stream)\n      mediaRecorderRef.current = mediaRecorder\n\n      const audioChunks: Blob[] = []\n      mediaRecorder.ondataavailable = (event) => {\n        audioChunks.push(event.data)\n      }\n\n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunks, { type: \"audio/webm\" })\n        alert(`Nota de voz grabada: ${(audioBlob.size / 1024).toFixed(2)} KB`)\n        stream.getTracks().forEach((track) => track.stop())\n      }\n\n      mediaRecorder.start()\n      setIsRecording(true)\n      setRecordingTime(0)\n\n      recordingIntervalRef.current = setInterval(() => {\n        setRecordingTime((prev) => prev + 1)\n      }, 1000)\n    } catch (error) {\n      alert(\"No se pudo acceder al micr├│fono. Por favor, verifica los permisos.\")\n    }\n  }, [])\n\n  const stopRecording = useCallback(() => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop()\n      setIsRecording(false)\n      if (recordingIntervalRef.current) {\n        clearInterval(recordingIntervalRef.current)\n      }\n    }\n  }, [isRecording])\n\n  const handleCall = useCallback(() => {\n    if (currentConversation) {\n      alert(`Iniciando llamada con ${currentConversation.clientName}...`)\n    }\n  }, [currentConversation])\n\n  const toggleEmojiPicker = useCallback(() => {\n    setShowEmojiPicker((prev) => !prev)\n  }, [])\n\n  const commonEmojis = [\n    \"­ƒÿÇ\",\n    \"­ƒÿâ\",\n    \"­ƒÿä\",\n    \"­ƒÿü\",\n    \"­ƒÿà\",\n    \"­ƒÿé\",\n    \"­ƒÖé\",\n    \"­ƒÿë\",\n    \"­ƒÿè\",\n    \"­ƒÿì\",\n    \"­ƒÿÿ\",\n    \"­ƒÿï\",\n    \"­ƒÿÄ\",\n    \"­ƒñö\",\n    \"­ƒÿÉ\",\n    \"­ƒÿæ\",\n    \"­ƒÿÅ\",\n    \"­ƒÖä\",\n    \"­ƒÿ¼\",\n    \"­ƒÿî\",\n    \"­ƒÿö\",\n    \"­ƒÿ┤\",\n    \"­ƒÿÀ\",\n    \"­ƒñÆ\",\n    \"­ƒñò\",\n    \"­ƒÑÁ\",\n    \"­ƒÑÂ\",\n    \"­ƒÿÁ\",\n    \"­ƒñ»\",\n    \"­ƒÿò\",\n    \"­ƒÿƒ\",\n    \"­ƒÖü\",\n    \"­ƒÿ«\",\n    \"­ƒÿ▓\",\n    \"­ƒÿ│\",\n    \"­ƒÿó\",\n    \"­ƒÿ¡\",\n    \"­ƒÿ▒\",\n    \"­ƒÿñ\",\n    \"­ƒÿí\",\n    \"­ƒæì\",\n    \"­ƒæÄ\",\n    \"­ƒæÅ\",\n    \"­ƒÖî\",\n    \"­ƒÖÅ\",\n    \"Ô£î´©Å\",\n    \"­ƒæî\",\n    \"­ƒæï\",\n    \"­ƒÆ¬\",\n    \"ÔØñ´©Å\",\n    \"­ƒÆø\",\n    \"­ƒÆÜ\",\n    \"­ƒÆÖ\",\n    \"­ƒÆ£\",\n    \"­ƒöÑ\",\n    \"Ô£¿\",\n    \"Ô¡É\",\n    \"­ƒîƒ\",\n  ]\n\n  return (\n    <div className=\"flex h-screen bg-zinc-50\">\n      <Sidebar />\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Panel Izquierdo - Lista de Conversaciones */}\n        <div className=\"flex w-80 flex-col border-r border-zinc-200 bg-white\">\n          {/* Header */}\n          <div className=\"border-b border-zinc-200 p-4\">\n            <h2 className=\"mb-3 text-lg font-semibold text-zinc-900\">Inbox</h2>\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-zinc-400\" />\n              <Input\n                placeholder=\"Buscar conversaciones...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-9\"\n              />\n            </div>\n          </div>\n\n          {/* Estados */}\n          <div className=\"border-b border-zinc-200 p-4\">\n            <p className=\"mb-2 text-xs font-semibold uppercase tracking-wider text-zinc-500\">Estados</p>\n            <div className=\"space-y-1\">\n              {ESTADOS.map((estado) => (\n                <button\n                  key={estado.id}\n                  onClick={() => setSelectedEstado(estado.id)}\n                  className={cn(\n                    \"flex w-full items-center justify-between rounded-lg px-3 py-2 text-sm font-medium\",\n                    selectedEstado === estado.id ? \"bg-amber-50 text-amber-900\" : \"text-zinc-700 hover:bg-zinc-50\",\n                  )}\n                >\n                  <span>{estado.label}</span>\n                  <Badge variant=\"secondary\" className={cn(\"text-xs\", estado.color)}>\n                    {estado.count}\n                  </Badge>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Lista de Conversaciones */}\n          <div className=\"flex-1 overflow-y-auto\">\n            <div className=\"p-2 space-y-1\">\n              {filteredConversations.map((conversation) => {\n                const canal = CANALES.find((c) => c.id === conversation.canal)\n                const estado = ESTADOS.find((e) => e.id === conversation.status)\n                const minutesSinceMessage = getMinutesSinceConversation(conversation)\n                const isUrgent = minutesSinceMessage > 5 && conversation.status === \"por-contestar\"\n\n                return (\n                  <button\n                    key={conversation.id}\n                    onClick={() => setSelectedConversation(conversation.id)}\n                    className={cn(\n                      \"mb-1 flex w-full items-start gap-2 rounded-lg p-2 text-left\",\n                      selectedConversation === conversation.id ? \"bg-amber-50 shadow-sm\" : \"hover:bg-zinc-50\",\n                      isUrgent && \"border-2 border-red-500 animate-pulse shadow-md\",\n                    )}\n                  >\n                    <div className=\"relative flex-shrink-0\">\n                      <Avatar className=\"h-10 w-10\">\n                        <AvatarImage src={conversation.avatar || \"/placeholder.svg\"} />\n                        <AvatarFallback>{conversation.clientName[0]}</AvatarFallback>\n                      </Avatar>\n                      {canal && (\n                        <div\n                          className={cn(\n                            \"absolute -bottom-1 -right-1 flex h-4 w-4 items-center justify-center rounded-full border-2 border-white text-[10px]\",\n                            canal.color,\n                          )}\n                        >\n                          {canal.icon}\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"flex-1 overflow-hidden min-w-0\">\n                      <div className=\"mb-0.5 flex items-center justify-between gap-2\">\n                        <p className=\"font-semibold text-sm text-zinc-900 truncate\">{conversation.clientName}</p>\n                        <span className=\"text-[11px] text-zinc-500 flex-shrink-0\">{conversation.timestamp}</span>\n                      </div>\n                      <p className=\"mb-1.5 truncate text-xs text-zinc-600\">{conversation.lastMessage}</p>\n\n                      {conversation.status === \"por-contestar\" && minutesSinceMessage > 0 && (\n                        <div\n                          className={cn(\n                            \"mb-1 inline-flex items-center gap-1 rounded px-2 py-1 text-[11px] font-bold\",\n                            minutesSinceMessage > 5\n                              ? \"bg-red-100 text-red-700 animate-pulse\"\n                              : \"bg-amber-100 text-amber-700\",\n                          )}\n                        >\n                          <span>ÔÅ▒´©Å</span>\n                          <span>\n                            {minutesSinceMessage} {minutesSinceMessage === 1 ? \"minuto\" : \"minutos\"} sin responder\n                          </span>\n                        </div>\n                      )}\n\n                      <div className=\"flex items-center gap-1.5 flex-wrap\">\n                        {estado && (\n                          <Badge variant=\"secondary\" className={cn(\"text-[10px] px-1.5 py-0\", estado.color)}>\n                            {estado.label}\n                          </Badge>\n                        )}\n                        {conversation.unread > 0 && (\n                          <Badge className=\"bg-amber-500 text-[10px] px-1.5 py-0 text-white\">\n                            {conversation.unread}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </button>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n\n        {/* Panel Central - Chat */}\n        <div\n          className=\"flex flex-1 flex-col bg-[#e5ddd5]\"\n          style={{\n            backgroundImage:\n              \"url('https://hebbkx1anhila5yf.public.blob.vercel-storage.com/pattern_wide_1920x1920-kJIowfHC7yUPTogefHRI2QcjeEGcKc.jpg')\",\n            backgroundSize: \"400px 400px\",\n            backgroundRepeat: \"repeat\",\n            backgroundPosition: \"center\",\n          }}\n        >\n          {selectedConversation && currentConversation ? (\n            <>\n              {/* Header del Chat */}\n              <div className=\"flex items-center justify-between border-b border-zinc-200 bg-[#f0f0f0] p-3\">\n                <div className=\"flex items-center gap-3\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarImage src={currentConversation.avatar || \"/placeholder.svg\"} />\n                    <AvatarFallback>{currentConversation.clientName[0]}</AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h3 className=\"font-semibold text-zinc-900\">{currentConversation.clientName}</h3>\n                    <div className=\"flex items-center gap-2\">\n                      {currentCanal && (\n                        <span className=\"text-xs text-zinc-600\">\n                          {currentCanal.icon} {currentCanal.label}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Button variant=\"ghost\" size=\"icon\" className=\"h-9 w-9 active:scale-95\" onClick={handleCall}>\n                    <Phone className=\"h-5 w-5 text-zinc-600\" />\n                  </Button>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"h-9 w-9 active:scale-95\">\n                    <Video className=\"h-5 w-5 text-zinc-600\" />\n                  </Button>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"h-9 w-9 active:scale-95\">\n                    <MoreVertical className=\"h-5 w-5 text-zinc-600\" />\n                  </Button>\n                </div>\n              </div>\n\n              {/* ├ürea de Mensajes - Estilo WhatsApp */}\n              <ScrollArea className=\"flex-1 p-4\">\n                <div className=\"space-y-3\">\n                  {MOCK_MESSAGES.map((message) => {\n                    return (\n                      <div\n                        key={message.id}\n                        className={cn(\"flex gap-2\", message.sender === \"agent\" ? \"justify-end\" : \"justify-start\")}\n                      >\n                        {message.sender === \"client\" && (\n                          <Avatar className=\"h-8 w-8 self-end\">\n                            <AvatarImage src={message.avatar || \"/placeholder.svg\"} />\n                            <AvatarFallback className=\"text-xs\">C</AvatarFallback>\n                          </Avatar>\n                        )}\n                        <div\n                          className={cn(\n                            \"max-w-[65%] rounded-lg px-3 py-2 shadow-sm\",\n                            message.sender === \"agent\" ? \"bg-[#dcf8c6] text-zinc-900\" : \"bg-white text-zinc-900\",\n                          )}\n                        >\n                          <p className=\"text-sm leading-relaxed\">{message.content}</p>\n\n                          <div className=\"mt-1 flex items-center justify-end gap-1\">\n                            <span className=\"text-[11px] text-zinc-500\">{formatTime(message.timestamp)}</span>\n                            {message.sender === \"agent\" && <span className=\"text-xs text-blue-500\">Ô£ôÔ£ô</span>}\n                          </div>\n                        </div>\n                        {message.sender === \"agent\" && (\n                          <Avatar className=\"h-8 w-8 self-end\">\n                            <AvatarImage src={message.avatar || \"/placeholder.svg\"} />\n                            <AvatarFallback className=\"text-xs\">A</AvatarFallback>\n                          </Avatar>\n                        )}\n                      </div>\n                    )\n                  })}\n                </div>\n              </ScrollArea>\n\n              {/* Canales de Comunicaci├│n */}\n              <div className=\"flex items-center justify-center gap-2 border-y border-zinc-200 bg-white p-2\">\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-9 w-9 rounded-full active:scale-95\">\n                  <span className=\"text-lg\">­ƒÄ¿</span>\n                </Button>\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-9 w-9 rounded-full active:scale-95\">\n                  <span className=\"text-lg\">­ƒôÀ</span>\n                </Button>\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-9 w-9 rounded-full active:scale-95\">\n                  <span className=\"text-lg\">­ƒÄ¼</span>\n                </Button>\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-9 w-9 rounded-full active:scale-95\">\n                  <span className=\"text-lg\">­ƒÄ¡</span>\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-9 w-9 rounded-full active:scale-95\"\n                  onClick={handleCall}\n                >\n                  <Phone className=\"h-5 w-5 text-red-500\" />\n                </Button>\n              </div>\n\n              {/* Tabs y Input - Estilo WhatsApp */}\n              <div className=\"bg-[#f0f0f0] p-3\">\n                <div className=\"mb-2 flex gap-4 px-2\">\n                  <button\n                    onClick={() => setActiveTab(\"reply\")}\n                    className={cn(\"text-sm font-medium\", activeTab === \"reply\" ? \"text-[#25d366]\" : \"text-zinc-500\")}\n                  >\n                    Responder\n                  </button>\n                  <button\n                    onClick={() => setActiveTab(\"note\")}\n                    className={cn(\"text-sm font-medium\", activeTab === \"note\" ? \"text-[#25d366]\" : \"text-zinc-500\")}\n                  >\n                    Nota\n                  </button>\n                  <button\n                    onClick={() => setActiveTab(\"schedule\")}\n                    className={cn(\"text-sm font-medium\", activeTab === \"schedule\" ? \"text-[#25d366]\" : \"text-zinc-500\")}\n                  >\n                    Programar\n                  </button>\n                </div>\n\n                <div className=\"relative\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"relative\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-9 w-9 text-zinc-600 active:scale-95\"\n                        onClick={toggleEmojiPicker}\n                      >\n                        <Smile className=\"h-5 w-5\" />\n                      </Button>\n\n                      {showEmojiPicker && (\n                        <div className=\"absolute bottom-12 left-0 z-50 w-72 rounded-lg border border-zinc-200 bg-white p-2 shadow-xl\">\n                          <div className=\"mb-2 flex items-center justify-between\">\n                            <h4 className=\"text-sm font-semibold text-zinc-900\">Emojis</h4>\n                            <button\n                              className=\"h-6 w-6 flex items-center justify-center rounded hover:bg-zinc-100 active:scale-95\"\n                              onClick={toggleEmojiPicker}\n                            >\n                              Ô£ò\n                            </button>\n                          </div>\n                          <div className=\"grid max-h-48 grid-cols-8 gap-1 overflow-y-auto\">\n                            {commonEmojis.map((emoji, index) => (\n                              <button\n                                key={index}\n                                onClick={() => insertEmoji(emoji)}\n                                className=\"flex h-9 w-9 items-center justify-center rounded hover:bg-zinc-100 text-xl active:scale-95\"\n                              >\n                                {emoji}\n                              </button>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"h-9 w-9 text-zinc-600 active:scale-95\"\n                      onClick={handleAttachment}\n                    >\n                      <Paperclip className=\"h-5 w-5\" />\n                    </Button>\n                    <input\n                      ref={fileInputRef}\n                      type=\"file\"\n                      className=\"hidden\"\n                      onChange={handleFileChange}\n                      accept=\"image/*,video/*,.pdf,.doc,.docx\"\n                    />\n\n                    <Input\n                      placeholder=\"Escribe un mensaje\"\n                      value={messageInput}\n                      onChange={(e) => setMessageInput(e.target.value)}\n                      className=\"flex-1 rounded-full border-zinc-300 bg-white\"\n                      onKeyDown={(e) => {\n                        if (e.key === \"Enter\" && !e.shiftKey) {\n                          e.preventDefault()\n                          setMessageInput(\"\")\n                        }\n                      }}\n                    />\n\n                    {isRecording ? (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-9 w-9 text-red-600 animate-pulse active:scale-95\"\n                        onClick={stopRecording}\n                      >\n                        <div className=\"flex flex-col items-center\">\n                          <Mic className=\"h-5 w-5\" />\n                          <span className=\"text-[10px]\">{recordingTime}s</span>\n                        </div>\n                      </Button>\n                    ) : (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-9 w-9 text-zinc-600 active:scale-95\"\n                        onClick={startRecording}\n                      >\n                        <Mic className=\"h-5 w-5\" />\n                      </Button>\n                    )}\n\n                    <Button className=\"h-9 w-9 rounded-full bg-[#25d366] p-0 hover:bg-[#20bd5a] active:scale-95\">\n                      <Send className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div className=\"flex flex-1 items-center justify-center bg-white/90 backdrop-blur-sm\">\n              <div className=\"text-center\">\n                <MessageSquare className=\"mx-auto mb-4 h-16 w-16 text-zinc-300\" />\n                <h3 className=\"mb-2 text-lg font-semibold text-zinc-900\">Selecciona una conversaci├│n</h3>\n                <p className=\"text-sm text-zinc-500\">Elige una conversaci├│n del panel izquierdo para comenzar</p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Panel Derecho - Detalles del Cliente */}\n        {selectedConversation && currentConversation && (\n          <div className=\"w-96 border-l border-zinc-200 bg-white\">\n            <ScrollArea className=\"h-full\">\n              <div className=\"p-6\">\n                {/* Info del Cliente */}\n                <div className=\"mb-6 text-center\">\n                  <Avatar className=\"mx-auto mb-3 h-24 w-24 border-4 border-white shadow-lg\">\n                    <AvatarImage src={currentConversation.avatar || \"/placeholder.svg\"} />\n                    <AvatarFallback className=\"text-2xl\">{currentConversation.clientName[0]}</AvatarFallback>\n                  </Avatar>\n                  <h3 className=\"mb-1 text-xl font-bold text-zinc-900\">{currentConversation.clientName}</h3>\n                  <p className=\"mb-3 text-sm text-zinc-500\">Cliente {currentConversation.clientType}</p>\n                  <div className=\"flex items-center justify-center gap-2\">\n                    {currentCanal && (\n                      <Badge className={cn(\"text-xs text-white\", currentCanal.color)}>\n                        {currentCanal.icon} {currentCanal.label}\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n\n                {/* Estado Actual */}\n                <div className=\"mb-6 rounded-lg border border-zinc-200 p-4\">\n                  <h4 className=\"mb-3 text-sm font-semibold text-zinc-700\">Estado Actual</h4>\n                  {ESTADOS.filter((e) => e.id === currentConversation.status).map((estado) => (\n                    <Badge key={estado.id} className={cn(\"w-full justify-center py-2 text-sm\", estado.color)}>\n                      {estado.label}\n                    </Badge>\n                  ))}\n                </div>\n\n                {/* Detalles */}\n                <div className=\"mb-6 rounded-lg border border-zinc-200 p-4\">\n                  <h4 className=\"mb-3 text-sm font-semibold text-zinc-900\">Detalles</h4>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"flex items-start gap-2\">\n                      <span className=\"text-zinc-500\">Inter├®s:</span>\n                      <span className=\"font-medium text-zinc-900\">{currentConversation.interest || \"ÔÇö\"}</span>\n                    </div>\n                    <div className=\"flex items-start gap-2\">\n                      <span className=\"text-zinc-500\">Tipo de cliente:</span>\n                      <span className=\"font-medium text-zinc-900\">{currentConversation.clientType}</span>\n                    </div>\n                    <div className=\"flex items-start gap-2\">\n                      <span className=\"text-zinc-500\">Canal:</span>\n                      <span className=\"font-medium text-zinc-900\">{currentCanal?.label}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  {/* Informaci├│n de Contacto */}\n                  <div className=\"rounded-lg border border-zinc-200\">\n                    <button\n                      onClick={() => setExpandedSections((prev) => ({ ...prev, contactInfo: !prev.contactInfo }))}\n                      className=\"flex w-full items-center justify-between p-4 text-left hover:bg-zinc-50 active:scale-[0.99]\"\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4 text-zinc-600\" />\n                        <span className=\"font-semibold text-zinc-900\">Informaci├│n de Contacto</span>\n                      </div>\n                      <ChevronDown\n                        className={cn(\"h-4 w-4 text-zinc-600\", expandedSections.contactInfo && \"rotate-180\")}\n                      />\n                    </button>\n                    {expandedSections.contactInfo && (\n                      <div className=\"border-t border-zinc-200 p-4\">\n                        <div className=\"space-y-3 text-sm\">\n                          <div className=\"flex items-center gap-2\">\n                            <Mail className=\"h-4 w-4 text-zinc-500\" />\n                            <span className=\"text-zinc-700\">maria.gonzalez@email.com</span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Phone className=\"h-4 w-4 text-zinc-500\" />\n                            <span className=\"text-zinc-700\">+57 300 123 4567</span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <MapPin className=\"h-4 w-4 text-zinc-500\" />\n                            <span className=\"text-zinc-700\">Bogot├í, Colombia</span>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Historial de Compras */}\n                  <div className=\"rounded-lg border border-zinc-200\">\n                    <button\n                      onClick={() => setExpandedSections((prev) => ({ ...prev, history: !prev.history }))}\n                      className=\"flex w-full items-center justify-between p-4 text-left hover:bg-zinc-50 active:scale-[0.99]\"\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <ShoppingBag className=\"h-4 w-4 text-zinc-600\" />\n                        <span className=\"font-semibold text-zinc-900\">Historial de Compras</span>\n                      </div>\n                      <ChevronDown className={cn(\"h-4 w-4 text-zinc-600\", expandedSections.history && \"rotate-180\")} />\n                    </button>\n                    {expandedSections.history && (\n                      <div className=\"border-t border-zinc-200 p-4\">\n                        <div className=\"space-y-3 text-sm\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-zinc-700\">Vestido Midi Floral</span>\n                            <span className=\"font-medium text-zinc-900\">$320.000</span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-zinc-700\">Shorts de Mezclilla</span>\n                            <span className=\"font-medium text-zinc-900\">$560.000</span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-zinc-700\">Bolso de Hombro</span>\n                            <span className=\"font-medium text-zinc-900\">$200.000</span>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Listas VIP */}\n                  <div className=\"rounded-lg border border-zinc-200\">\n                    <button\n                      onClick={() => setExpandedSections((prev) => ({ ...prev, vipLists: !prev.vipLists }))}\n                      className=\"flex w-full items-center justify-between p-4 text-left hover:bg-zinc-50 active:scale-[0.99]\"\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4 text-zinc-600\" />\n                        <span className=\"font-semibold text-zinc-900\">Listas VIP</span>\n                      </div>\n                      <ChevronDown className={cn(\"h-4 w-4 text-zinc-600\", expandedSections.vipLists && \"rotate-180\")} />\n                    </button>\n                    {expandedSections.vipLists && (\n                      <div className=\"border-t border-zinc-200 p-4\">\n                        <div className=\"space-y-2 text-sm\">\n                          <Badge variant=\"secondary\" className=\"w-full justify-start\">\n                            Cliente Frecuente\n                          </Badge>\n                          <Badge variant=\"secondary\" className=\"w-full justify-start\">\n                            Interesado en Vestidos\n                          </Badge>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Cambiar Estado */}\n                <div className=\"mt-6\">\n                  <h4 className=\"mb-3 text-sm font-semibold text-zinc-700\">Cambiar Estado</h4>\n                  <div className=\"space-y-2\">\n                    {ESTADOS.filter((e) => e.id !== \"todas\" && e.id !== currentConversation.status).map((estado) => (\n                      <Button\n                        key={estado.id}\n                        variant=\"outline\"\n                        className=\"w-full justify-start text-sm bg-transparent active:scale-[0.99]\"\n                        size=\"sm\"\n                      >\n                        {estado.label}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Notas */}\n                <div className=\"mt-6\">\n                  <h4 className=\"mb-3 text-sm font-semibold text-zinc-700\">Notas</h4>\n                  <Textarea\n                    placeholder=\"Agregar notas sobre este cliente...\"\n                    className=\"min-h-32 resize-none text-sm\"\n                  />\n                  <Button className=\"mt-3 w-full bg-[#25d366] hover:bg-[#20bd5a] active:scale-[0.99]\">\n                    Guardar Nota\n                  </Button>\n                </div>\n              </div>\n            </ScrollArea>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/crm/page.tsx"
      },
      {
        "path": "app/cumpleanos/loading.tsx",
        "content": "import { Skeleton } from \"@/components/ui/skeleton\"\nimport { Card } from \"@/components/ui/card\"\n\nexport default function Loading() {\n  return (\n    <div className=\"min-h-screen bg-zinc-50 p-8\">\n      <div className=\"mb-8\">\n        <Skeleton className=\"h-10 w-64 mb-2\" />\n        <Skeleton className=\"h-5 w-96\" />\n      </div>\n\n      <div className=\"flex gap-4 mb-8\">\n        <Skeleton className=\"h-10 w-32\" />\n        <Skeleton className=\"h-10 w-32\" />\n        <Skeleton className=\"h-10 w-64\" />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4 mb-8\">\n        {[...Array(6)].map((_, i) => (\n          <Card key={i} className=\"p-6 rounded-2xl\">\n            <Skeleton className=\"h-4 w-20 mb-4\" />\n            <Skeleton className=\"h-8 w-32 mb-2\" />\n            <Skeleton className=\"h-4 w-16\" />\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        <div className=\"lg:col-span-2\">\n          <Card className=\"p-6 rounded-2xl\">\n            <Skeleton className=\"h-6 w-48 mb-6\" />\n            <Skeleton className=\"h-96 w-full\" />\n          </Card>\n        </div>\n        <div className=\"lg:col-span-1\">\n          <Card className=\"p-6 rounded-2xl\">\n            <Skeleton className=\"h-6 w-32 mb-6\" />\n            <Skeleton className=\"h-96 w-full\" />\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:block",
        "target": "~/app/cumpleanos/loading.tsx"
      },
      {
        "path": "app/facturacion/loading.tsx",
        "content": "export default function Loading() {\n  return null\n}\n",
        "type": "registry:block",
        "target": "~/app/facturacion/loading.tsx"
      },
      {
        "path": "app/facturacion/page.tsx",
        "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Sidebar } from \"@/components/sidebar\"\nimport { StatCard } from \"@/components/stat-card\"\nimport { InvoicesTable } from \"@/components/invoices-table\"\nimport { CreateInvoiceDialog } from \"@/components/create-invoice-dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Plus, RefreshCw, Search, AlertCircle } from \"lucide-react\"\nimport useSWR from \"swr\"\n\nconst fetcher = (url: string) => fetch(url).then((res) => res.json())\n\ntype FilterType = \"all\" | \"PAGADO\" | \"PENDIENTE\" | \"DEVOLUCION\"\n\nconst getMonthNames = () => {\n  const now = new Date()\n  const currentMonth = now.getMonth()\n  const currentYear = now.getFullYear()\n\n  const monthNames = [\n    \"ENERO\",\n    \"FEBRERO\",\n    \"MARZO\",\n    \"ABRIL\",\n    \"MAYO\",\n    \"JUNIO\",\n    \"JULIO\",\n    \"AGOSTO\",\n    \"SEPTIEMBRE\",\n    \"OCTUBRE\",\n    \"NOVIEMBRE\",\n    \"DICIEMBRE\",\n  ]\n\n  // Mes actual\n  const currentMonthName = `${monthNames[currentMonth]} ${currentYear}`\n\n  // Mes anterior\n  const previousMonth = currentMonth === 0 ? 11 : currentMonth - 1\n  const previousYear = currentMonth === 0 ? currentYear - 1 : currentYear\n  const previousMonthName = `${monthNames[previousMonth]} ${previousYear}`\n\n  // Hace 2 meses\n  const twoMonthsAgo = currentMonth === 0 ? 10 : currentMonth === 1 ? 11 : currentMonth - 2\n  const twoMonthsAgoYear = currentMonth === 0 ? currentYear - 1 : currentMonth === 1 ? currentYear - 1 : currentYear\n  const twoMonthsAgoName = `${monthNames[twoMonthsAgo]} ${twoMonthsAgoYear}`\n\n  return {\n    current: currentMonthName,\n    previous: previousMonthName,\n    twoMonthsAgo: twoMonthsAgoName,\n  }\n}\n\nexport default function FacturacionPage() {\n  const [activeFilter, setActiveFilter] = useState<FilterType>(\"all\")\n  const [searchQuery, setSearchQuery] = useState(\"\")\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)\n\n  const monthNames = getMonthNames()\n\n  const {\n    data: invoicesData,\n    error: invoicesError,\n    mutate: mutateInvoices,\n  } = useSWR(`/api/invoices?status=${activeFilter}`, fetcher, { refreshInterval: 30000 })\n\n  const {\n    data: statsData,\n    error: statsError,\n    mutate: mutateStats,\n  } = useSWR(\"/api/invoices/stats\", fetcher, { refreshInterval: 30000 })\n\n  const stats = {\n    totalInvoices: statsData?.totalInvoices ?? 0,\n    currentMonthCount: statsData?.currentMonthCount ?? 0,\n    previousMonthCount: statsData?.previousMonthCount ?? 0,\n    twoMonthsAgoCount: statsData?.twoMonthsAgoCount ?? 0,\n  }\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat(\"es-CO\", {\n      style: \"currency\",\n      currency: \"COP\",\n      minimumFractionDigits: 0,\n    }).format(amount)\n  }\n\n  const filters = [\n    { id: \"all\" as FilterType, label: \"TODAS\" },\n    { id: \"PAGADO\" as FilterType, label: \"PAGADAS\" },\n    { id: \"PENDIENTE\" as FilterType, label: \"PENDIENTES\" },\n    { id: \"DEVOLUCION\" as FilterType, label: \"DEVOLUCIONES\" },\n  ]\n\n  const filteredInvoices = invoicesData?.data\n    ? invoicesData.data.filter((invoice: any) => {\n        if (!searchQuery.trim()) return true\n\n        const query = searchQuery.toLowerCase()\n        const invoiceNumber = invoice.invoice_number?.toLowerCase() || \"\"\n        const clientName = invoice.client_name?.toLowerCase() || \"\"\n        const clientNit = invoice.client_nit?.toLowerCase() || \"\"\n\n        return invoiceNumber.includes(query) || clientName.includes(query) || clientNit.includes(query)\n      })\n    : []\n\n  const isMissingTablesError =\n    invoicesError?.message?.includes(\"Could not find the table\") ||\n    statsError?.message?.includes(\"Could not find the table\") ||\n    (invoicesData?.error && invoicesData.error.includes(\"Could not find the table\")) ||\n    (statsData?.error && statsData.error.includes(\"Could not find the table\"))\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-6\">\n          {/* Header */}\n          <div className=\"mb-8 flex items-center justify-between\">\n            <div>\n              <h1 className=\"font-serif text-3xl font-bold text-zinc-900\">Facturaci├│n</h1>\n              <p className=\"mt-1 text-sm text-zinc-600\">Gestiona y genera facturas para tus clientes</p>\n            </div>\n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  mutateInvoices()\n                  mutateStats()\n                }}\n                className=\"border-zinc-300 bg-white text-zinc-700 hover:bg-zinc-50\"\n              >\n                <RefreshCw className=\"mr-2 h-4 w-4\" />\n                Actualizar\n              </Button>\n              <Button\n                onClick={() => setIsCreateDialogOpen(true)}\n                className=\"bg-[#C8A96A] hover:bg-[#B8996A] text-white\"\n              >\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Nueva Factura\n              </Button>\n            </div>\n          </div>\n\n          {/* Alert for configuration errors */}\n          {isMissingTablesError && (\n            <div className=\"mb-6 rounded-lg border-2 border-red-400 bg-red-50 p-4\">\n              <div className=\"flex items-start gap-3\">\n                <AlertCircle className=\"h-5 w-5 text-red-600 mt-0.5 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-red-900 mb-1\">Las tablas de facturaci├│n no existen</h3>\n                  <p className=\"text-sm text-red-800 mb-3\">\n                    Necesitas crear las tablas de facturaci├│n en tu base de datos de Supabase.\n                  </p>\n                  <div className=\"bg-white rounded-md p-3 border border-red-200\">\n                    <p className=\"text-sm font-medium text-gray-900 mb-2\">Pasos para solucionar:</p>\n                    <ol className=\"text-sm text-gray-700 space-y-2 list-decimal list-inside\">\n                      <li>\n                        Ve a tu{\" \"}\n                        <a\n                          href=\"https://supabase.com/dashboard\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"text-blue-600 hover:underline font-medium\"\n                        >\n                          Supabase Dashboard\n                        </a>\n                      </li>\n                      <li>\n                        Abre el <strong>SQL Editor</strong>\n                      </li>\n                      <li>\n                        Copia y ejecuta el archivo{\" \"}\n                        <code className=\"bg-gray-100 px-1.5 py-0.5 rounded text-xs font-mono\">\n                          scripts/003_create_invoices_tables.sql\n                        </code>\n                      </li>\n                      <li>Recarga esta p├ígina</li>\n                    </ol>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Stats Cards */}\n          <div className=\"mb-6 grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <StatCard\n              title=\"TOTAL FACTURAS\"\n              value={stats.totalInvoices.toString()}\n              subtitle=\"Facturas generadas\"\n              color=\"blue\"\n            />\n            <StatCard\n              title={monthNames.twoMonthsAgo}\n              value={stats.twoMonthsAgoCount.toString()}\n              subtitle=\"Facturas generadas\"\n              color=\"purple\"\n            />\n            <StatCard\n              title={monthNames.previous}\n              value={stats.previousMonthCount.toString()}\n              subtitle=\"Facturas generadas\"\n              color=\"orange\"\n            />\n            <StatCard\n              title={monthNames.current}\n              value={stats.currentMonthCount.toString()}\n              subtitle=\"Facturas generadas\"\n              color=\"green\"\n            />\n          </div>\n\n          {/* Filters */}\n          <div className=\"mb-6 overflow-x-auto\">\n            <div className=\"flex gap-2 min-w-max pb-2\">\n              {filters.map((filter) => (\n                <button\n                  key={filter.id}\n                  onClick={() => setActiveFilter(filter.id)}\n                  className={`rounded-lg px-4 py-2 text-xs font-semibold transition-all whitespace-nowrap ${\n                    activeFilter === filter.id\n                      ? \"bg-[#C8A96A] text-white shadow-md border-2 border-[#C8A96A]\"\n                      : \"bg-white text-gray-700 border-2 border-gray-300 hover:border-[#C8A96A] hover:text-[#C8A96A]\"\n                  }`}\n                >\n                  {filter.label}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Search */}\n          <div className=\"mb-6\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-gray-400\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Buscar por n├║mero de factura, cliente o NIT...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 h-11 border-gray-300 bg-white text-gray-900 placeholder:text-gray-500 focus:border-[#C8A96A] focus:ring-[#C8A96A]\"\n              />\n              {searchQuery && (\n                <button\n                  onClick={() => setSearchQuery(\"\")}\n                  className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  Ô£ò\n                </button>\n              )}\n            </div>\n            {searchQuery && (\n              <p className=\"mt-2 text-sm text-gray-600\">\n                Mostrando {filteredInvoices.length} resultado{filteredInvoices.length !== 1 ? \"s\" : \"\"} para \"\n                {searchQuery}\"\n              </p>\n            )}\n          </div>\n\n          {/* Invoices Table */}\n          {invoicesError && !invoicesData && (\n            <div className=\"rounded-lg border border-red-300 bg-red-50 p-4 text-red-700\">\n              Error al cargar las facturas. Por favor verifica tu configuraci├│n de Supabase.\n            </div>\n          )}\n\n          {!invoicesData && !invoicesError && (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"h-8 w-8 animate-spin rounded-full border-4 border-[#C8A96A] border-t-transparent\"></div>\n            </div>\n          )}\n\n          {invoicesData?.data && (\n            <>\n              <InvoicesTable\n                invoices={filteredInvoices}\n                onRefresh={() => {\n                  mutateInvoices()\n                  mutateStats()\n                }}\n              />\n\n              <div className=\"mt-4 flex items-center justify-between text-sm text-zinc-600\">\n                <p>\n                  Mostrando {filteredInvoices.length} de {invoicesData.data.length} facturas\n                </p>\n                <p className=\"font-semibold text-zinc-900\">\n                  Total:{\" \"}\n                  {formatCurrency(filteredInvoices.reduce((sum: number, inv: any) => sum + Number(inv.total), 0))}\n                </p>\n              </div>\n            </>\n          )}\n        </div>\n      </main>\n\n      <CreateInvoiceDialog\n        open={isCreateDialogOpen}\n        onOpenChange={setIsCreateDialogOpen}\n        onSuccess={() => {\n          mutateInvoices()\n          mutateStats()\n        }}\n      />\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/facturacion/page.tsx"
      },
      {
        "path": "app/globals.css",
        "content": "@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n/* Agregando sistema de temas con variables CSS para colores de sidebar personalizables */\n/* Tema Onyx & Soft Gold (pastel) - PREDETERMINADO */\n:root[data-sidebar-theme=\"onyx-soft-gold\"] {\n  --sidebar-bg: #111213;\n  --sidebar-bg-soft: #0f0f10;\n  --sidebar-text: #f5f3ee;\n  --sidebar-accent: #d9c99a;\n  --sidebar-border: #2c2d30;\n  --sidebar-hover: #d9c99a26;\n}\n\n/* Tema Charcoal & Pale Brass */\n:root[data-sidebar-theme=\"charcoal-brass\"] {\n  --sidebar-bg: #16171a;\n  --sidebar-bg-soft: #0f0f10;\n  --sidebar-text: #efefef;\n  --sidebar-accent: #c9a75a;\n  --sidebar-border: #31343a;\n  --sidebar-hover: #c9a75a24;\n}\n\n/* Tema Midnight Navy & Butter Gold */\n:root[data-sidebar-theme=\"navy-butter\"] {\n  --sidebar-bg: #0d1726;\n  --sidebar-bg-soft: #0a1220;\n  --sidebar-text: #f6f8fc;\n  --sidebar-accent: #e3c76e;\n  --sidebar-border: #213045;\n  --sidebar-hover: #e3c76e22;\n}\n\n/* Tema Emerald & Champagne (pastel) */\n:root[data-sidebar-theme=\"emerald-champagne\"] {\n  --sidebar-bg: #12201b;\n  --sidebar-bg-soft: #0d1815;\n  --sidebar-text: #f2f6f4;\n  --sidebar-accent: #e2d2b2;\n  --sidebar-border: #2a3a32;\n  --sidebar-hover: #e2d2b22b;\n}\n\n/* Tema Burgundy & Rose-Gold (pastel) */\n:root[data-sidebar-theme=\"burgundy-rose\"] {\n  --sidebar-bg: #31161b;\n  --sidebar-bg-soft: #251015;\n  --sidebar-text: #fff8f8;\n  --sidebar-accent: #f0c6c1;\n  --sidebar-border: #412229;\n  --sidebar-hover: #f0c6c130;\n}\n\n/* Tema Sapphire & Honey Gold (pastel) */\n:root[data-sidebar-theme=\"sapphire-honey\"] {\n  --sidebar-bg: #0e2143;\n  --sidebar-bg-soft: #0a1832;\n  --sidebar-text: #f3f6ff;\n  --sidebar-accent: #e0c273;\n  --sidebar-border: #213056;\n  --sidebar-hover: #e0c27326;\n}\n\n/* Tema Amethyst & Mist Platinum */\n:root[data-sidebar-theme=\"amethyst-platinum\"] {\n  --sidebar-bg: #1e1630;\n  --sidebar-bg-soft: #161024;\n  --sidebar-text: #f7f5fa;\n  --sidebar-accent: #e1e6ec;\n  --sidebar-border: #2f2346;\n  --sidebar-hover: #e1e6ec22;\n}\n\n/* Tema Forest & Soft Gold */\n:root[data-sidebar-theme=\"forest-gold\"] {\n  --sidebar-bg: #14221a;\n  --sidebar-bg-soft: #0f1a14;\n  --sidebar-text: #eff7f1;\n  --sidebar-accent: #d3b474;\n  --sidebar-border: #27362c;\n  --sidebar-hover: #d3b47426;\n}\n\n/* Tema White-Luxury (claro pastel) */\n:root[data-sidebar-theme=\"white-luxury\"] {\n  --sidebar-bg: #ffffff;\n  --sidebar-bg-soft: #fafafa;\n  --sidebar-text: #111213;\n  --sidebar-accent: #d8c08a;\n  --sidebar-border: #ecedef;\n  --sidebar-hover: #f7f7fa;\n}\n\n/* Tema Ivory & Latte (claro pastel) */\n:root[data-sidebar-theme=\"ivory-latte\"] {\n  --sidebar-bg: #fafaf6;\n  --sidebar-bg-soft: #f5f5f1;\n  --sidebar-text: #141414;\n  --sidebar-accent: #c8a56c;\n  --sidebar-border: #e9e9e5;\n  --sidebar-hover: #f3f3ef;\n}\n\n/* Removiendo temas antiguos */\n:root[data-sidebar-theme=\"gold-dark\"],\n:root[data-sidebar-theme=\"navy-deep\"],\n:root[data-sidebar-theme=\"emerald\"],\n:root[data-sidebar-theme=\"burgundy\"],\n:root[data-sidebar-theme=\"charcoal\"] {\n  /* Redirigir al tema predeterminado */\n  --sidebar-bg: #111213;\n  --sidebar-bg-soft: #0f0f10;\n  --sidebar-text: #f5f3ee;\n  --sidebar-accent: #d9c99a;\n  --sidebar-border: #2c2d30;\n  --sidebar-hover: #d9c99a26;\n}\n\n@theme inline {\n  /* Agregando variable de fuente serif para Playfair Display */\n  --font-serif: \"Playfair Display\", \"Playfair Display Fallback\", serif;\n\n  /* Removiendo referencias a fuentes Geist que no existen */\n\n  /* Actualizar tokens de color para tema claro con sidebar oscuro */\n  --color-background: #ffffff;\n  --color-foreground: #18181b;\n  --color-card: #ffffff;\n  --color-card-foreground: #18181b;\n  --color-popover: #ffffff;\n  --color-popover-foreground: #18181b;\n  --color-primary: #f59e0b;\n  --color-primary-foreground: #ffffff;\n  --color-secondary: #f4f4f5;\n  --color-secondary-foreground: #18181b;\n  --color-muted: #f4f4f5;\n  --color-muted-foreground: #71717a;\n  --color-accent: #fef3c7;\n  --color-accent-foreground: #78350f;\n  --color-destructive: #ef4444;\n  --color-destructive-foreground: #ffffff;\n  --color-border: #e4e4e7;\n  --color-input: #e4e4e7;\n  --color-ring: #f59e0b;\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n/* Agregando estilos para tema Black */\n[data-theme=\"black\"] {\n  /* Colores principales */\n  --color-background: #0b0b0c;\n  --color-foreground: #f4f1ea;\n\n  /* Cards y superficies */\n  --color-card: #1a1a1c;\n  --color-card-foreground: #f4f1ea;\n  --color-popover: #1a1a1c;\n  --color-popover-foreground: #f4f1ea;\n\n  /* Bordes y separadores */\n  --color-border: rgba(200, 169, 106, 0.2);\n  --color-input: rgba(200, 169, 106, 0.2);\n\n  /* Muted y secondary */\n  --color-muted: #1a1a1c;\n  --color-muted-foreground: rgba(244, 241, 234, 0.7);\n  --color-secondary: #1a1a1c;\n  --color-secondary-foreground: #f4f1ea;\n\n  /* Accent (dorado) */\n  --color-accent: #c8a96a;\n  --color-accent-foreground: #0b0b0c;\n\n  /* Primary (dorado) */\n  --color-primary: #c8a96a;\n  --color-primary-foreground: #0b0b0c;\n\n  /* Ring */\n  --color-ring: #c8a96a;\n}\n\n[data-theme=\"black\"] body {\n  background-color: #0b0b0c;\n  color: #f4f1ea;\n}\n\n[data-theme=\"black\"] .bg-white {\n  background-color: #1a1a1c !important;\n}\n\n[data-theme=\"black\"] .bg-gray-50 {\n  background-color: rgba(26, 26, 28, 0.5) !important;\n}\n\n[data-theme=\"black\"] .bg-gray-100 {\n  background-color: #1a1a1c !important;\n}\n\n[data-theme=\"black\"] .text-gray-900 {\n  color: #f4f1ea !important;\n}\n\n[data-theme=\"black\"] .text-gray-600 {\n  color: rgba(244, 241, 234, 0.7) !important;\n}\n\n[data-theme=\"black\"] .text-gray-700 {\n  color: rgba(244, 241, 234, 0.8) !important;\n}\n\n[data-theme=\"black\"] .border-gray-200 {\n  border-color: rgba(200, 169, 106, 0.2) !important;\n}\n\n[data-theme=\"black\"] .divide-gray-200 > * + * {\n  border-color: rgba(200, 169, 106, 0.2) !important;\n}\n\n[data-theme=\"black\"] .hover\\:bg-gray-100:hover {\n  background-color: rgba(26, 26, 28, 0.8) !important;\n}\n\n[data-theme=\"black\"] input,\n[data-theme=\"black\"] textarea,\n[data-theme=\"black\"] select {\n  background-color: rgba(26, 26, 28, 0.5) !important;\n  border-color: rgba(200, 169, 106, 0.2) !important;\n  color: #f4f1ea !important;\n}\n\n[data-theme=\"black\"] input::placeholder,\n[data-theme=\"black\"] textarea::placeholder {\n  color: rgba(244, 241, 234, 0.5) !important;\n}\n\n[data-theme=\"black\"] .bg-\\[\\#FAFAFC\\] {\n  background-color: rgba(26, 26, 28, 0.3) !important;\n}\n\n/* Agregando animaci├│n de parpadeo para mensajes urgentes */\n@keyframes urgent-pulse {\n  0%,\n  100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.6;\n  }\n}\n\n.animate-urgent-pulse {\n  animation: urgent-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n",
        "type": "registry:block",
        "target": "~/app/globals.css"
      },
      {
        "path": "app/page.tsx",
        "content": "import { redirect } from \"next/navigation\"\n\nexport default function Home() {\n  redirect(\"/ventas\")\n}\n",
        "type": "registry:page",
        "target": "app/page.tsx"
      },
      {
        "path": "app/ventas/loading.tsx",
        "content": "export default function Loading() {\n  return null\n}\n",
        "type": "registry:block",
        "target": "~/app/ventas/loading.tsx"
      },
      {
        "path": "app/ventas/page.tsx",
        "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { Sidebar } from \"@/components/sidebar\"\nimport { StatCard } from \"@/components/stat-card\"\nimport { SalesTable } from \"@/components/sales-table\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Download, RefreshCw, AlertCircle, Search } from \"lucide-react\"\nimport { exportToCSV, exportToExcel } from \"@/lib/export-utils\"\nimport useSWR from \"swr\"\n\nconst fetcher = (url: string) => fetch(url).then((res) => res.json())\n\ntype FilterType =\n  | \"all\"\n  | \"contraentrega\"\n  | \"efectivo\"\n  | \"transferencia\"\n  | \"devoluciones\"\n  | \"pagado_mipaquete\"\n  | \"pendiente_mipaquete\"\ntype TimePeriod = 7 | 14 | 21 | 28\n\nexport default function VentasPage() {\n  const [activeFilter, setActiveFilter] = useState<FilterType>(\"all\")\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>(7)\n  const [isCheckingReturns, setIsCheckingReturns] = useState(false)\n  const [searchQuery, setSearchQuery] = useState(\"\")\n\n  const monthMap: { [key: string]: string[] } = {\n    enero: [\"ene\", \"enero\", \"january\", \"jan\"],\n    febrero: [\"feb\", \"febrero\", \"february\"],\n    marzo: [\"mar\", \"marzo\", \"march\"],\n    abril: [\"abr\", \"abril\", \"april\", \"apr\"],\n    mayo: [\"may\", \"mayo\"],\n    junio: [\"jun\", \"junio\", \"june\"],\n    julio: [\"jul\", \"julio\", \"july\"],\n    agosto: [\"ago\", \"agosto\", \"august\", \"aug\"],\n    septiembre: [\"sep\", \"sept\", \"septiembre\", \"september\"],\n    octubre: [\"oct\", \"octubre\", \"october\"],\n    noviembre: [\"nov\", \"noviembre\", \"november\"],\n    diciembre: [\"dic\", \"diciembre\", \"december\", \"dec\"],\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"es-CO\", {\n      day: \"2-digit\",\n      month: \"short\",\n      year: \"numeric\",\n    })\n  }\n\n  const normalizeMonthSearch = (query: string): string => {\n    const lowerQuery = query.toLowerCase().trim()\n\n    for (const [fullMonth, variants] of Object.entries(monthMap)) {\n      if (variants.some((variant) => lowerQuery.includes(variant))) {\n        return fullMonth.substring(0, 3) // Retorna las primeras 3 letras del mes\n      }\n    }\n\n    return query\n  }\n\n  const apiUrl =\n    activeFilter === \"pagado_mipaquete\" || activeFilter === \"pendiente_mipaquete\"\n      ? `/api/sales?filter=${activeFilter}&period=${timePeriod}`\n      : `/api/sales?filter=${activeFilter}`\n\n  const {\n    data: salesData,\n    error: salesError,\n    mutate: mutateSales,\n  } = useSWR(apiUrl, fetcher, { refreshInterval: 30000 })\n\n  const {\n    data: statsData,\n    error: statsError,\n    mutate: mutateStats,\n  } = useSWR(\n    activeFilter === \"pagado_mipaquete\" || activeFilter === \"pendiente_mipaquete\"\n      ? `/api/sales/stats?period=${timePeriod}`\n      : \"/api/sales/stats\",\n    fetcher,\n    { refreshInterval: 30000 },\n  )\n\n  useEffect(() => {\n    const checkReturns = async () => {\n      try {\n        setIsCheckingReturns(true)\n        await fetch(\"/api/mipaquete/check-returns\")\n        mutateSales()\n        mutateStats()\n      } catch (error) {\n        console.error(\"[v0] Error checking returns:\", error)\n      } finally {\n        setIsCheckingReturns(false)\n      }\n    }\n\n    checkReturns()\n\n    const interval = setInterval(checkReturns, 15 * 60 * 1000)\n\n    return () => clearInterval(interval)\n  }, [mutateSales, mutateStats])\n\n  const handleExport = (format: \"csv\" | \"excel\") => {\n    if (!salesData?.data) return\n\n    const exportData = salesData.data.map((sale: any) => ({\n      ID: sale.sale_id,\n      Cliente: sale.client_name,\n      Fecha: new Date(sale.sale_date).toLocaleDateString(\"es-CO\"),\n      Productos: sale.products.map((p: any) => p.name).join(\", \"),\n      Total: sale.total,\n      Estado: sale.status,\n      \"M├®todo de Pago\": sale.payment_method,\n      Transportadora: sale.shipping_company || \"\",\n      Gu├¡a: sale.tracking_number || \"\",\n      Vendedor: sale.seller_name,\n      \"Pagado MiPaquete\": sale.paid_by_mipaquete ? \"S├¡\" : \"No\",\n    }))\n\n    if (format === \"csv\") {\n      exportToCSV(exportData, `ventas_${activeFilter}_${new Date().toISOString().split(\"T\")[0]}`)\n    } else {\n      exportToExcel(exportData, `ventas_${activeFilter}_${new Date().toISOString().split(\"T\")[0]}`)\n    }\n  }\n\n  const stats = statsData || {\n    totalRevenue: 0,\n    transferTotal: 0,\n    cashTotal: 0,\n    returnsTotal: 0,\n    averageTicket: 0,\n    paidByMipaquete: 0,\n    pendingByMipaquete: 0,\n  }\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat(\"es-CO\", {\n      style: \"currency\",\n      currency: \"COP\",\n      minimumFractionDigits: 0,\n    }).format(amount)\n  }\n\n  const filters = [\n    { id: \"all\" as FilterType, label: \"TODAS\" },\n    { id: \"contraentrega\" as FilterType, label: \"PAGADAS\" },\n    { id: \"efectivo\" as FilterType, label: \"PENDIENTES\" },\n    { id: \"transferencia\" as FilterType, label: \"DEVOLUCIONES\" },\n  ]\n\n  const showTimePeriodSelector = activeFilter === \"pagado_mipaquete\" || activeFilter === \"pendiente_mipaquete\"\n\n  const isMissingTablesError =\n    salesError?.message?.includes(\"Could not find the table\") ||\n    statsError?.message?.includes(\"Could not find the table\") ||\n    (salesData?.error && salesData.error.includes(\"Could not find the table\")) ||\n    (statsData?.error && statsData.error.includes(\"Could not find the table\"))\n\n  const filteredSales = salesData?.data\n    ? salesData.data.filter((sale: any) => {\n        if (!searchQuery.trim()) return true\n\n        const normalizedQuery = normalizeMonthSearch(searchQuery).toLowerCase()\n        const clientName = sale.client_name?.toLowerCase() || \"\"\n        const saleId = sale.sale_id?.toLowerCase() || \"\"\n        const saleDate = formatDate(sale.sale_date).toLowerCase()\n\n        return (\n          clientName.includes(normalizedQuery) || saleId.includes(normalizedQuery) || saleDate.includes(normalizedQuery)\n        )\n      })\n    : []\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-6\">\n          {/* Header */}\n          <div className=\"mb-8 flex items-center justify-between\">\n            <div>\n              <h1 className=\"font-serif text-3xl font-bold text-zinc-900\">Ventas</h1>\n              <p className=\"mt-1 text-sm text-zinc-600\">Gestiona y visualiza todas las ventas</p>\n            </div>\n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  mutateSales()\n                  mutateStats()\n                }}\n                className=\"border-zinc-300 bg-white text-zinc-700 hover:bg-zinc-50\"\n              >\n                <RefreshCw className={`mr-2 h-4 w-4 ${isCheckingReturns ? \"animate-spin\" : \"\"}`} />\n                Actualizar\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => handleExport(\"csv\")}\n                className=\"border-zinc-300 bg-white text-zinc-700 hover:bg-zinc-50\"\n                disabled={!salesData?.data || salesData.data.length === 0}\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Exportar CSV\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => handleExport(\"excel\")}\n                className=\"border-zinc-300 bg-white text-zinc-700 hover:bg-zinc-50\"\n                disabled={!salesData?.data || salesData.data.length === 0}\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Exportar Excel\n              </Button>\n            </div>\n          </div>\n\n          {/* Alert for configuration errors */}\n          {isMissingTablesError && (\n            <div className=\"mb-6 rounded-lg border-2 border-red-400 bg-red-50 p-4\">\n              <div className=\"flex items-start gap-3\">\n                <AlertCircle className=\"h-5 w-5 text-red-600 mt-0.5 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-red-900 mb-1\">Las tablas de la base de datos no existen</h3>\n                  <p className=\"text-sm text-red-800 mb-3\">\n                    Necesitas crear las tablas en tu base de datos de Supabase para que el dashboard funcione.\n                  </p>\n                  <div className=\"bg-white rounded-md p-3 border border-red-200\">\n                    <p className=\"text-sm font-medium text-gray-900 mb-2\">Pasos para solucionar:</p>\n                    <ol className=\"text-sm text-gray-700 space-y-2 list-decimal list-inside\">\n                      <li>\n                        Ve a tu{\" \"}\n                        <a\n                          href=\"https://supabase.com/dashboard\"\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"text-blue-600 hover:underline font-medium\"\n                        >\n                          Supabase Dashboard\n                        </a>\n                      </li>\n                      <li>\n                        Abre el <strong>SQL Editor</strong> en el men├║ lateral\n                      </li>\n                      <li>\n                        Copia el contenido del archivo{\" \"}\n                        <code className=\"bg-gray-100 px-1.5 py-0.5 rounded text-xs font-mono\">\n                          scripts/001_create_sales_tables.sql\n                        </code>\n                      </li>\n                      <li>\n                        P├®galo en el editor y haz clic en <strong>Run</strong>\n                      </li>\n                      <li>Recarga esta p├ígina</li>\n                    </ol>\n                  </div>\n                  <p className=\"text-xs text-red-700 mt-3\">\n                    ­ƒôä Consulta <strong>INSTRUCCIONES_SETUP.md</strong> para m├ís detalles\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {(salesError || statsError) && !isMissingTablesError && (\n            <div className=\"mb-6 rounded-lg border-2 border-amber-400 bg-amber-50 p-4\">\n              <div className=\"flex items-start gap-3\">\n                <AlertCircle className=\"h-5 w-5 text-amber-600 mt-0.5 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-amber-900 mb-1\">Error de conexi├│n a Supabase</h3>\n                  <p className=\"text-sm text-amber-800 mb-3\">\n                    Hay un problema al conectar con la base de datos. Verifica tu configuraci├│n.\n                  </p>\n                  <div className=\"bg-white rounded-md p-3 border border-amber-200\">\n                    <p className=\"text-sm font-medium text-gray-900 mb-2\">Verifica:</p>\n                    <ul className=\"text-sm text-gray-700 space-y-1 list-disc list-inside\">\n                      <li>\n                        Las variables de entorno en la secci├│n <strong>Vars</strong> del sidebar\n                      </li>\n                      <li>Que tu proyecto de Supabase est├® activo</li>\n                      <li>Que las credenciales sean correctas</li>\n                    </ul>\n                  </div>\n                  {(salesError || statsError) && (\n                    <details className=\"mt-3\">\n                      <summary className=\"text-xs text-amber-700 cursor-pointer hover:text-amber-900\">\n                        Ver detalles del error\n                      </summary>\n                      <pre className=\"mt-2 text-xs bg-gray-100 p-2 rounded overflow-x-auto\">\n                        {JSON.stringify(salesError || statsError, null, 2)}\n                      </pre>\n                    </details>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Stats Cards */}\n          <div className=\"mb-6 grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-7\">\n            <StatCard title=\"VENTA TOTAL\" value={formatCurrency(stats.totalRevenue)} color=\"blue\" trend={15} />\n            <StatCard title=\"TRANSFERENCIA\" value={formatCurrency(stats.transferTotal)} color=\"green\" />\n            <StatCard title=\"EFECTIVO\" value={formatCurrency(stats.cashTotal)} color=\"yellow\" />\n            <StatCard\n              title=\"DEVOLUCIONES\"\n              value={formatCurrency(stats.returnsTotal)}\n              subtitle={`${stats.returnsCount || 0} devoluciones`}\n              color=\"red\"\n            />\n            <StatCard\n              title=\"TICKET PROMEDIO\"\n              value={formatCurrency(stats.averageTicket)}\n              subtitle=\"Por venta\"\n              color=\"purple\"\n            />\n            <StatCard title=\"PAGADO MIPAQUETE\" value={formatCurrency(stats.paidByMipaquete)} color=\"orange\" />\n            <StatCard title=\"PENDIENTE MIPAQUETE\" value={formatCurrency(stats.pendingByMipaquete)} color=\"pink\" />\n          </div>\n\n          <div className=\"mb-6 overflow-x-auto\">\n            <div className=\"flex gap-2 min-w-max pb-2\">\n              {filters.map((filter) => (\n                <button\n                  key={filter.id}\n                  onClick={() => setActiveFilter(filter.id)}\n                  className={`rounded-lg px-4 py-2 text-xs font-semibold transition-all whitespace-nowrap ${\n                    activeFilter === filter.id\n                      ? \"bg-[#C8A96A] text-white shadow-md border-2 border-[#C8A96A]\"\n                      : \"bg-white text-gray-700 border-2 border-gray-300 hover:border-[#C8A96A] hover:text-[#C8A96A]\"\n                  }`}\n                >\n                  {filter.label}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"mb-6\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-gray-400\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Buscar por nombre, factura o fecha (ej: octubre, oct, 15/oct)...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 h-11 border-gray-300 bg-white text-gray-900 placeholder:text-gray-500 focus:border-[#C8A96A] focus:ring-[#C8A96A]\"\n              />\n              {searchQuery && (\n                <button\n                  onClick={() => setSearchQuery(\"\")}\n                  className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                >\n                  Ô£ò\n                </button>\n              )}\n            </div>\n            {searchQuery && (\n              <p className=\"mt-2 text-sm text-gray-600\">\n                Mostrando {filteredSales.length} resultado{filteredSales.length !== 1 ? \"s\" : \"\"} para \"{searchQuery}\"\n              </p>\n            )}\n          </div>\n\n          {/* Time Period Selector */}\n          {showTimePeriodSelector && (\n            <div className=\"mb-6 rounded-lg border border-gray-200 bg-white p-4 shadow-sm\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h3 className=\"text-sm font-semibold text-gray-700\">Seleccionar per├¡odo</h3>\n                <div className=\"flex gap-2\">\n                  {[7, 14, 21, 28].map((days) => (\n                    <button\n                      key={days}\n                      onClick={() => setTimePeriod(days as TimePeriod)}\n                      className={`rounded-md px-4 py-2 text-xs font-semibold transition-all ${\n                        timePeriod === days\n                          ? \"bg-[#C8A96A] text-white shadow-md\"\n                          : \"bg-white text-gray-700 hover:bg-gray-50 border border-gray-300\"\n                      }`}\n                    >\n                      {days} d├¡as\n                    </button>\n                  ))}\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between rounded-lg bg-gray-50 border border-gray-200 p-3\">\n                <span className=\"text-sm font-medium text-gray-600\">Total ├║ltimos {timePeriod} d├¡as:</span>\n                <span className=\"text-xl font-bold text-gray-900\">\n                  {formatCurrency(\n                    activeFilter === \"pagado_mipaquete\" ? stats.paidByMipaquete : stats.pendingByMipaquete,\n                  )}\n                </span>\n              </div>\n            </div>\n          )}\n\n          {/* Sales Table */}\n          {salesError && !salesData && (\n            <div className=\"rounded-lg border border-red-300 bg-red-50 p-4 text-red-700\">\n              Error al cargar las ventas. Por favor verifica tu configuraci├│n de Supabase.\n            </div>\n          )}\n\n          {!salesData && !salesError && (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"h-8 w-8 animate-spin rounded-full border-4 border-[#C8A96A] border-t-transparent\"></div>\n            </div>\n          )}\n\n          {salesData?.data && (\n            <>\n              <SalesTable\n                sales={filteredSales}\n                onRefresh={() => {\n                  mutateSales()\n                  mutateStats()\n                }}\n                showPaymentCheckbox={\n                  activeFilter === \"contraentrega\" ||\n                  activeFilter === \"pagado_mipaquete\" ||\n                  activeFilter === \"pendiente_mipaquete\"\n                }\n              />\n\n              <div className=\"mt-4 flex items-center justify-between text-sm text-zinc-600\">\n                <p>\n                  Mostrando {filteredSales.length} de {salesData.data.length} ventas\n                </p>\n                <p className=\"font-semibold text-zinc-900\">\n                  Total: {formatCurrency(filteredSales.reduce((sum: number, sale: any) => sum + Number(sale.total), 0))}\n                </p>\n              </div>\n            </>\n          )}\n        </div>\n      </main>\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/ventas/page.tsx"
      },
      {
        "path": "app/ventastotales/loading.tsx",
        "content": "export default function Loading() {\n  return null\n}\n",
        "type": "registry:block",
        "target": "~/app/ventastotales/loading.tsx"
      },
      {
        "path": "app/ventastotales/page.tsx",
        "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useMemo } from \"react\"\nimport { Sidebar } from \"@/components/sidebar\"\nimport { Card } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { ChevronDown, ChevronRight, Search, Download, Plus, Upload } from \"lucide-react\"\nimport { Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Line, ComposedChart } from \"recharts\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { createClient } from \"@/lib/supabase/client\"\nimport { put } from \"@vercel/blob\"\n\nconst MONTHS = [\n  { name: \"ENE\", fullName: \"Enero\", value: 1, closed: true },\n  { name: \"FEB\", fullName: \"Febrero\", value: 2, closed: true },\n  { name: \"MAR\", fullName: \"Marzo\", value: 3, closed: true },\n  { name: \"ABR\", fullName: \"Abril\", value: 4, closed: true },\n  { name: \"MAY\", fullName: \"Mayo\", value: 5, closed: true },\n  { name: \"JUN\", fullName: \"Junio\", value: 6, closed: true },\n  { name: \"JUL\", fullName: \"Julio\", value: 7, closed: true },\n  { name: \"AGO\", fullName: \"Agosto\", value: 8, closed: true },\n  { name: \"SEP\", fullName: \"Septiembre\", value: 9, closed: true },\n  { name: \"OCT\", fullName: \"Octubre\", value: 10, closed: true },\n  { name: \"NOV\", fullName: \"Noviembre\", value: 11, closed: true },\n  { name: \"DIC\", fullName: \"Diciembre\", value: 12, closed: false },\n]\n\nconst MOCK_DATA = {\n  invoices: [\n    // Enero\n    {\n      docNumber: \"1001\",\n      customerName: \"Tech Solutions\",\n      invoiceDate: \"2024-01-10\",\n      amount: 4800000, // COP\n      balance: 0,\n      month: 1,\n    },\n    {\n      docNumber: \"1002\",\n      customerName: \"Digital Corp\",\n      invoiceDate: \"2024-01-15\",\n      amount: 3400000,\n      balance: 0,\n      month: 1,\n    },\n    // Febrero\n    {\n      docNumber: \"1010\",\n      customerName: \"Innovation Labs\",\n      invoiceDate: \"2024-02-05\",\n      amount: 8400000,\n      balance: 0,\n      month: 2,\n    },\n    {\n      docNumber: \"1011\",\n      customerName: \"Smart Systems\",\n      invoiceDate: \"2024-02-12\",\n      amount: 7000000,\n      balance: 0,\n      month: 2,\n    },\n    // Marzo\n    {\n      docNumber: \"1020\",\n      customerName: \"Future Tech\",\n      invoiceDate: \"2024-03-08\",\n      amount: 12800000,\n      balance: 0,\n      month: 3,\n    },\n    // Junio\n    {\n      docNumber: \"1056\",\n      customerName: \"Elite Systems\",\n      invoiceDate: \"2024-06-12\",\n      amount: 2000000,\n      balance: 0,\n      month: 6,\n    },\n    {\n      docNumber: \"1079\",\n      customerName: \"Quantum Services\",\n      invoiceDate: \"2024-06-15\",\n      amount: 33760000,\n      balance: 0,\n      month: 6,\n    },\n    {\n      docNumber: \"1082\",\n      customerName: \"Shoreline Technologies\",\n      invoiceDate: \"2024-06-15\",\n      amount: 2000000,\n      balance: 0,\n      month: 6,\n    },\n    {\n      docNumber: \"1057\",\n      customerName: \"Proactive Solutions\",\n      invoiceDate: \"2024-06-16\",\n      amount: 1360000,\n      balance: 800000,\n      month: 6,\n    },\n    {\n      docNumber: \"2226\",\n      customerName: \"Bright Future Ltd.\",\n      invoiceDate: \"2024-06-16\",\n      amount: 1600000,\n      balance: 1600000,\n      month: 6,\n    },\n    {\n      docNumber: \"1035\",\n      customerName: \"United Solutions\",\n      invoiceDate: \"2024-06-17\",\n      amount: 800000,\n      balance: 0,\n      month: 6,\n    },\n    {\n      docNumber: \"1070\",\n      customerName: \"Nexus Technologies\",\n      invoiceDate: \"2024-06-17\",\n      amount: 2400000,\n      balance: 0,\n      month: 6,\n    },\n    {\n      docNumber: \"1064\",\n      customerName: \"United Solutions\",\n      invoiceDate: \"2024-06-18\",\n      amount: 5972000,\n      balance: 0,\n      month: 6,\n    },\n    // Diciembre\n    {\n      docNumber: \"1200\",\n      customerName: \"Global Enterprises\",\n      invoiceDate: \"2024-12-05\",\n      amount: 22000000,\n      balance: 0,\n      month: 12,\n    },\n    {\n      docNumber: \"1201\",\n      customerName: \"Mega Corp\",\n      invoiceDate: \"2024-12-10\",\n      amount: 12800000,\n      balance: 4000000,\n      month: 12,\n    },\n  ],\n  salesByPaymentMethod: {\n    1: { transferencia: 3200000, efectivo: 1600000, mipaquete: 0 },\n    2: { transferencia: 10400000, efectivo: 5000000, mipaquete: 0 },\n    3: { transferencia: 8500000, efectivo: 4300000, mipaquete: 0 },\n    6: { transferencia: 32000000, efectivo: 12692000, mipaquete: 5200000 },\n    12: { transferencia: 24000000, efectivo: 8800000, mipaquete: 2000000 },\n  },\n  expensesByCategory: {\n    1: {\n      gastosOficina: 2400000,\n      nomina: 18500000,\n      serviciosPublicos: 1800000,\n      arrendamiento: 5000000,\n      impuestos: 3200000,\n      transporte: 1500000,\n      publicidad: 2800000,\n      mantenimiento: 900000,\n      otros: 1200000,\n    },\n    2: {\n      gastosOficina: 2600000,\n      nomina: 19200000,\n      serviciosPublicos: 1900000,\n      arrendamiento: 5000000,\n      impuestos: 3400000,\n      transporte: 1600000,\n      publicidad: 3200000,\n      mantenimiento: 1100000,\n      otros: 1400000,\n    },\n    3: {\n      gastosOficina: 2800000,\n      nomina: 20100000,\n      serviciosPublicos: 2100000,\n      arrendamiento: 5000000,\n      impuestos: 3600000,\n      transporte: 1700000,\n      publicidad: 3500000,\n      mantenimiento: 1200000,\n      otros: 1500000,\n    },\n    6: {\n      gastosOficina: 3200000,\n      nomina: 22500000,\n      serviciosPublicos: 2400000,\n      arrendamiento: 5000000,\n      impuestos: 4200000,\n      transporte: 1900000,\n      publicidad: 4100000,\n      mantenimiento: 1400000,\n      otros: 1800000,\n    },\n    12: {\n      gastosOficina: 3800000,\n      nomina: 24800000,\n      serviciosPublicos: 2800000,\n      arrendamiento: 5000000,\n      impuestos: 4800000,\n      transporte: 2200000,\n      publicidad: 4800000,\n      mantenimiento: 1600000,\n      otros: 2100000,\n    },\n  },\n  costOfGoodsSold: {\n    1: { inventarioInicial: 15000000, compras: 8000000, inventarioFinal: 12000000 },\n    2: { inventarioInicial: 12000000, compras: 10000000, inventarioFinal: 11000000 },\n    3: { inventarioInicial: 11000000, compras: 9500000, inventarioFinal: 10500000 },\n    6: { inventarioInicial: 10000000, compras: 12000000, inventarioFinal: 9000000 },\n    12: { inventarioInicial: 9500000, compras: 14000000, inventarioFinal: 8500000 },\n  },\n}\n\nconst generateChartData = () => {\n  const currentYear = new Date().getFullYear()\n  const months = [\"ENE\", \"FEB\", \"MAR\", \"ABR\", \"MAY\", \"JUN\", \"JUL\", \"AGO\", \"SEP\", \"OCT\", \"NOV\", \"DIC\"]\n\n  return months.map((month, index) => {\n    const monthNum = index + 1\n    const sales = MOCK_DATA.salesByPaymentMethod[monthNum as keyof typeof MOCK_DATA.salesByPaymentMethod]\n    const expenses = MOCK_DATA.expensesByCategory[monthNum as keyof typeof MOCK_DATA.expensesByCategory]\n    const cmv = MOCK_DATA.costOfGoodsSold[monthNum as keyof typeof MOCK_DATA.costOfGoodsSold]\n\n    const totalSales = sales ? (sales.transferencia + sales.efectivo + sales.mipaquete) / 1000000 : 0\n    const totalExpenses = expenses\n      ? (expenses.gastosOficina +\n          expenses.nomina +\n          expenses.serviciosPublicos +\n          expenses.arrendamiento +\n          expenses.impuestos +\n          expenses.transporte +\n          expenses.publicidad +\n          expenses.mantenimiento +\n          expenses.otros) /\n        1000000\n      : 0\n    const totalCMV = cmv ? (cmv.inventarioInicial + cmv.compras - cmv.inventarioFinal) / 1000000 : 0\n    const utilidad = totalSales - totalExpenses - totalCMV\n\n    return {\n      month: `${month} ${currentYear}`,\n      ventas: Math.round(totalSales * 10) / 10,\n      gastos: Math.round(totalExpenses * 10) / 10,\n      cmv: Math.round(totalCMV * 10) / 10,\n      utilidad: Math.round(utilidad * 10) / 10,\n    }\n  })\n}\n\nconst CHART_DATA = generateChartData()\n\nexport default function VentasGastosPage() {\n  const [activeTab, setActiveTab] = useState<\"overview\" | \"customers\" | \"setup\">(\"overview\")\n  const [expandedCategories, setExpandedCategories] = useState<string[]>([\"Ventas\", \"Gastos\", \"CMV\"])\n  const [selectedMonth, setSelectedMonth] = useState<number>(12)\n  const [searchQuery, setSearchQuery] = useState<string>(\"\")\n  const [isCreateExpenseOpen, setIsCreateExpenseOpen] = useState(false)\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [expenseForm, setExpenseForm] = useState({\n    receiptNumber: \"\",\n    purchaseType: \"\", // Cambiado de provider a purchaseType\n    amount: \"\",\n    expenseDate: \"\",\n    category: \"\",\n    paymentMethod: \"\",\n    bank: \"\", // Nuevo campo para banco\n    notes: \"\",\n  })\n  const [receiptFile, setReceiptFile] = useState<File | null>(null) // Nuevo estado para archivo\n\n  const currentYear = new Date().getFullYear()\n\n  const filteredInvoices = useMemo(() => {\n    let invoices = MOCK_DATA.invoices.filter((invoice) => invoice.month === selectedMonth)\n\n    if (searchQuery.trim()) {\n      invoices = invoices.filter((invoice) => invoice.docNumber.toLowerCase().includes(searchQuery.toLowerCase()))\n    }\n\n    return invoices\n  }, [selectedMonth, searchQuery])\n\n  const toggleCategory = (categoryName: string) => {\n    setExpandedCategories((prev) =>\n      prev.includes(categoryName) ? prev.filter((c) => c !== categoryName) : [...prev, categoryName],\n    )\n  }\n\n  const totalAmount = filteredInvoices.reduce((sum, inv) => sum + inv.amount, 0)\n  const totalBalance = filteredInvoices.reduce((sum, inv) => sum + inv.balance, 0)\n\n  const formatCOP = (amount: number) => {\n    return new Intl.NumberFormat(\"es-CO\", {\n      style: \"currency\",\n      currency: \"COP\",\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount)\n  }\n\n  const selectedMonthName = MONTHS.find((m) => m.value === selectedMonth)?.fullName || \"Mes\"\n  const salesData = MOCK_DATA.salesByPaymentMethod[selectedMonth as keyof typeof MOCK_DATA.salesByPaymentMethod] || {\n    transferencia: 0,\n    efectivo: 0,\n    mipaquete: 0,\n  }\n  const expensesData = MOCK_DATA.expensesByCategory[selectedMonth as keyof typeof MOCK_DATA.expensesByCategory] || {\n    gastosOficina: 0,\n    nomina: 0,\n    serviciosPublicos: 0,\n    arrendamiento: 0,\n    impuestos: 0,\n    transporte: 0,\n    publicidad: 0,\n    mantenimiento: 0,\n    otros: 0,\n  }\n  const cmvData = MOCK_DATA.costOfGoodsSold[selectedMonth as keyof typeof MOCK_DATA.costOfGoodsSold] || {\n    inventarioInicial: 0,\n    compras: 0,\n    inventarioFinal: 0,\n  }\n\n  const totalVentas = salesData.transferencia + salesData.efectivo + salesData.mipaquete\n  const totalGastos =\n    expensesData.gastosOficina +\n    expensesData.nomina +\n    expensesData.serviciosPublicos +\n    expensesData.arrendamiento +\n    expensesData.impuestos +\n    expensesData.transporte +\n    expensesData.publicidad +\n    expensesData.mantenimiento +\n    expensesData.otros\n  const totalCMV = cmvData.inventarioInicial + cmvData.compras - cmvData.inventarioFinal\n  const utilidadReal = totalVentas - totalGastos - totalCMV\n\n  const handleCreateExpense = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    // Validar que si es transferencia, debe tener archivo y banco\n    if (expenseForm.paymentMethod === \"transferencia\") {\n      if (!receiptFile) {\n        alert(\"Debes adjuntar una captura de la transferencia\")\n        return\n      }\n      if (!expenseForm.bank) {\n        alert(\"Debes seleccionar el banco de la transferencia\")\n        return\n      }\n    }\n\n    setIsSubmitting(true)\n\n    try {\n      const supabase = createClient()\n      let receiptUrl = null\n\n      // Subir archivo a Vercel Blob si existe\n      if (receiptFile) {\n        const blob = await put(receiptFile.name, receiptFile, {\n          access: \"public\",\n        })\n        receiptUrl = blob.url\n      }\n\n      const { data, error } = await supabase.from(\"expenses\").insert({\n        receipt_number: expenseForm.receiptNumber,\n        purchase_type: expenseForm.purchaseType,\n        amount: Number.parseFloat(expenseForm.amount),\n        expense_date: expenseForm.expenseDate,\n        category: expenseForm.category,\n        payment_method: expenseForm.paymentMethod,\n        bank: expenseForm.bank || null,\n        receipt_url: receiptUrl,\n        notes: expenseForm.notes || null,\n        status: \"pagado\",\n      })\n\n      if (error) throw error\n\n      // Resetear formulario\n      setExpenseForm({\n        receiptNumber: \"\",\n        purchaseType: \"\",\n        amount: \"\",\n        expenseDate: \"\",\n        category: \"\",\n        paymentMethod: \"\",\n        bank: \"\",\n        notes: \"\",\n      })\n      setReceiptFile(null)\n      setIsCreateExpenseOpen(false)\n      alert(\"Gasto creado exitosamente\")\n    } catch (error) {\n      console.error(\"Error al crear gasto:\", error)\n      alert(\"Error al crear el gasto. Por favor intenta de nuevo.\")\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  return (\n    <div className=\"flex h-screen bg-zinc-50\">\n      <Sidebar />\n\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"bg-white px-8 py-6 shadow-lg border-b border-zinc-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"font-serif text-3xl font-black text-zinc-900 tracking-tight\">VENTAS & GASTOS</h1>\n              <p className=\"text-xs text-zinc-500 font-semibold uppercase tracking-wider mt-1\">Dashboard Financiero</p>\n            </div>\n\n            <div className=\"flex gap-3 items-center\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-zinc-400\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Buscar por N┬║ documento...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 pr-4 py-2 w-64 border-zinc-300 focus:border-blue-500 focus:ring-blue-500\"\n                />\n              </div>\n\n              <Button className=\"bg-emerald-600 hover:bg-emerald-700 text-white font-bold shadow-lg\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Descargar\n              </Button>\n\n              <Button\n                onClick={() => setIsCreateExpenseOpen(true)}\n                className=\"bg-[#C8A96A] hover:bg-[#B8996A] text-white font-bold shadow-lg\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Crear Gasto\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-8\">\n          <div className=\"flex gap-0 mb-6\">\n            {MONTHS.map((month) => (\n              <button\n                key={month.value}\n                onClick={() => setSelectedMonth(month.value)}\n                className={`\n                  flex-1 px-4 py-3 text-sm font-bold uppercase transition-all duration-200 border-r border-zinc-200 last:border-r-0\n                  ${\n                    selectedMonth === month.value\n                      ? \"bg-[#C8A96A] text-white shadow-lg\"\n                      : \"bg-white text-zinc-600 hover:bg-zinc-50\"\n                  }\n                `}\n              >\n                {month.name}\n              </button>\n            ))}\n          </div>\n\n          <div className=\"mb-6\">\n            <Card className=\"p-6 rounded-2xl shadow-lg border border-zinc-200 bg-white\">\n              <div className=\"overflow-hidden rounded-xl border border-zinc-200\">\n                <table className=\"w-full text-sm\">\n                  <thead className=\"bg-zinc-100 border-b border-zinc-200\">\n                    <tr>\n                      <th className=\"px-4 py-3 text-center text-xs font-bold text-zinc-700\">N┬║ Documento</th>\n                      <th className=\"px-4 py-3 text-center text-xs font-bold text-zinc-700\">Nombre Cliente</th>\n                      <th className=\"px-4 py-3 text-center text-xs font-bold text-zinc-700\">Fecha Factura</th>\n                      <th className=\"px-4 py-3 text-center text-xs font-bold text-zinc-700\">Monto</th>\n                      <th className=\"px-4 py-3 text-center text-xs font-bold text-zinc-700\">Saldo</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-zinc-100\">\n                    {filteredInvoices.length > 0 ? (\n                      filteredInvoices.map((invoice, idx) => (\n                        <tr key={idx} className=\"hover:bg-blue-50 transition-colors\">\n                          <td className=\"px-4 py-3 text-sm font-semibold text-zinc-900 text-center\">\n                            {invoice.docNumber}\n                          </td>\n                          <td className=\"px-4 py-3 text-sm text-zinc-700 text-center\">{invoice.customerName}</td>\n                          <td className=\"px-4 py-3 text-sm text-zinc-700 text-center\">{invoice.invoiceDate}</td>\n                          <td className=\"px-4 py-3 text-sm font-semibold text-zinc-900 text-center tabular-nums\">\n                            {formatCOP(invoice.amount)}\n                          </td>\n                          <td className=\"px-4 py-3 text-sm font-semibold text-zinc-900 text-center tabular-nums\">\n                            {formatCOP(invoice.balance)}\n                          </td>\n                        </tr>\n                      ))\n                    ) : (\n                      <tr>\n                        <td colSpan={5} className=\"px-4 py-8 text-center text-sm text-zinc-500\">\n                          {searchQuery.trim()\n                            ? `No se encontraron resultados para \"${searchQuery}\"`\n                            : `No hay facturas para ${MONTHS.find((m) => m.value === selectedMonth)?.fullName}`}\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                  <tfoot className=\"bg-zinc-50 border-t-2 border-zinc-300\">\n                    <tr>\n                      <td colSpan={3} className=\"px-4 py-4 text-sm font-black text-zinc-900 text-center\">\n                        Total\n                      </td>\n                      <td className=\"px-4 py-4 text-sm font-black text-zinc-900 text-center tabular-nums\">\n                        {formatCOP(totalAmount)}\n                      </td>\n                      <td className=\"px-4 py-4 text-sm font-black text-zinc-900 text-center tabular-nums\">\n                        {formatCOP(totalBalance)}\n                      </td>\n                    </tr>\n                  </tfoot>\n                </table>\n              </div>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-12 gap-6 mt-6\">\n            <div className=\"col-span-6\">\n              <Card className=\"p-6 rounded-2xl shadow-lg border border-zinc-200 bg-white\">\n                <div className=\"overflow-hidden rounded-xl border border-zinc-200\">\n                  <table className=\"w-full text-sm\">\n                    <thead className=\"bg-zinc-100 border-b border-zinc-200\">\n                      <tr>\n                        <th className=\"px-4 py-3 text-left text-xs font-bold text-zinc-700\">Categor├¡a</th>\n                        <th className=\"px-4 py-3 text-right text-xs font-bold text-zinc-700\">\n                          {selectedMonthName} {currentYear}\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {/* Ventas */}\n                      <tr className=\"bg-zinc-50 hover:bg-zinc-100 cursor-pointer\">\n                        <td\n                          className=\"px-4 py-3 text-sm font-bold text-zinc-900 flex items-center gap-2\"\n                          onClick={() => toggleCategory(\"Ventas\")}\n                        >\n                          {expandedCategories.includes(\"Ventas\") ? (\n                            <ChevronDown className=\"h-4 w-4\" />\n                          ) : (\n                            <ChevronRight className=\"h-4 w-4\" />\n                          )}\n                          Ventas\n                        </td>\n                        <td className=\"px-4 py-3 text-sm font-bold text-right tabular-nums text-emerald-600\">\n                          {formatCOP(totalVentas)}\n                        </td>\n                      </tr>\n                      {expandedCategories.includes(\"Ventas\") && (\n                        <>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">Transferencia</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              {formatCOP(salesData.transferencia)}\n                            </td>\n                          </tr>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">Efectivo</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              {formatCOP(salesData.efectivo)}\n                            </td>\n                          </tr>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">Pagado por Mipaquete</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              {formatCOP(salesData.mipaquete)}\n                            </td>\n                          </tr>\n                        </>\n                      )}\n\n                      {/* Gastos */}\n                      <tr className=\"bg-zinc-50 hover:bg-zinc-100 cursor-pointer\">\n                        <td\n                          className=\"px-4 py-3 text-sm font-bold text-zinc-900 flex items-center gap-2\"\n                          onClick={() => toggleCategory(\"Gastos\")}\n                        >\n                          {expandedCategories.includes(\"Gastos\") ? (\n                            <ChevronDown className=\"h-4 w-4\" />\n                          ) : (\n                            <ChevronRight className=\"h-4 w-4\" />\n                          )}\n                          Gastos\n                        </td>\n                        <td className=\"px-4 py-3 text-sm font-bold text-right tabular-nums text-red-600\">\n                          {formatCOP(totalGastos)}\n                        </td>\n                      </tr>\n                      {expandedCategories.includes(\"Gastos\") && (\n                        <>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">Gastos de Oficina</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              {formatCOP(expensesData.gastosOficina)}\n                            </td>\n                          </tr>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">N├│mina</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              {formatCOP(expensesData.nomina)}\n                            </td>\n                          </tr>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">Servicios P├║blicos</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              {formatCOP(expensesData.serviciosPublicos)}\n                            </td>\n                          </tr>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">Arrendamiento</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              {formatCOP(expensesData.arrendamiento)}\n                            </td>\n                          </tr>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">Impuestos</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              {formatCOP(expensesData.impuestos)}\n                            </td>\n                          </tr>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">Transporte</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              {formatCOP(expensesData.transporte)}\n                            </td>\n                          </tr>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">Publicidad y Marketing</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              {formatCOP(expensesData.publicidad)}\n                            </td>\n                          </tr>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">Mantenimiento</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              {formatCOP(expensesData.mantenimiento)}\n                            </td>\n                          </tr>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">Otros Gastos</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              {formatCOP(expensesData.otros)}\n                            </td>\n                          </tr>\n                        </>\n                      )}\n\n                      {/* Costo de Mercanc├¡a Vendida */}\n                      <tr className=\"bg-zinc-50 hover:bg-zinc-100 cursor-pointer\">\n                        <td\n                          className=\"px-4 py-3 text-sm font-bold text-zinc-900 flex items-center gap-2\"\n                          onClick={() => toggleCategory(\"CMV\")}\n                        >\n                          {expandedCategories.includes(\"CMV\") ? (\n                            <ChevronDown className=\"h-4 w-4\" />\n                          ) : (\n                            <ChevronRight className=\"h-4 w-4\" />\n                          )}\n                          Costo de Mercanc├¡a Vendida\n                        </td>\n                        <td className=\"px-4 py-3 text-sm font-bold text-right tabular-nums text-orange-600\">\n                          {formatCOP(totalCMV)}\n                        </td>\n                      </tr>\n                      {expandedCategories.includes(\"CMV\") && (\n                        <>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">Inventario Inicial</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              {formatCOP(cmvData.inventarioInicial)}\n                            </td>\n                          </tr>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">Compras</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              {formatCOP(cmvData.compras)}\n                            </td>\n                          </tr>\n                          <tr className=\"hover:bg-blue-50 transition-colors\">\n                            <td className=\"px-4 py-2 pl-12 text-sm text-zinc-700\">Inventario Final</td>\n                            <td className=\"px-4 py-2 text-sm font-semibold text-right tabular-nums text-zinc-900\">\n                              -{formatCOP(cmvData.inventarioFinal)}\n                            </td>\n                          </tr>\n                        </>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Utilidad Real */}\n                <div className=\"mt-6 p-4 rounded-xl bg-gradient-to-r from-blue-50 to-indigo-50 border-2 border-blue-200\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-xs font-bold text-zinc-600 uppercase tracking-wider mb-1\">\n                        Utilidad Real del Mes\n                      </p>\n                      <p\n                        className=\"text-2xl font-black tabular-nums\"\n                        style={{ color: utilidadReal >= 0 ? \"#10b981\" : \"#ef4444\" }}\n                      >\n                        {formatCOP(utilidadReal)}\n                      </p>\n                    </div>\n                    <div className=\"text-right text-xs text-zinc-600\">\n                      <p className=\"font-semibold\">Ventas: {formatCOP(totalVentas)}</p>\n                      <p className=\"font-semibold\">- Gastos: {formatCOP(totalGastos)}</p>\n                      <p className=\"font-semibold\">- CMV: {formatCOP(totalCMV)}</p>\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            </div>\n\n            <div className=\"col-span-6\">\n              <Card className=\"p-6 rounded-2xl shadow-lg border border-zinc-200 bg-white\">\n                <div className=\"mb-4\">\n                  <h3 className=\"text-lg font-bold text-zinc-900\">Resumen Financiero Anual</h3>\n                  <p className=\"text-xs text-zinc-500 mt-1\">Valores en millones de pesos (COP)</p>\n                </div>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <ComposedChart data={CHART_DATA}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                    <XAxis dataKey=\"month\" stroke=\"#71717a\" style={{ fontSize: \"11px\", fontWeight: 600 }} />\n                    <YAxis\n                      stroke=\"#71717a\"\n                      style={{ fontSize: \"11px\", fontWeight: 600 }}\n                      label={{\n                        value: \"Millones COP\",\n                        angle: -90,\n                        position: \"insideLeft\",\n                        style: { fontSize: \"11px\", fontWeight: 600 },\n                      }}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: \"white\",\n                        border: \"none\",\n                        borderRadius: \"12px\",\n                        boxShadow: \"0 4px 6px -1px rgb(0 0 0 / 0.1)\",\n                        padding: \"12px\",\n                      }}\n                      formatter={(value: number) => [`$${value.toFixed(1)}M`, \"\"]}\n                    />\n                    <Legend wrapperStyle={{ fontSize: \"12px\", fontWeight: 600 }} iconType=\"circle\" />\n                    <Bar dataKey=\"ventas\" fill=\"#10b981\" name=\"Ventas\" radius={[4, 4, 0, 0]} />\n                    <Bar dataKey=\"gastos\" fill=\"#ef4444\" name=\"Gastos\" radius={[4, 4, 0, 0]} />\n                    <Bar dataKey=\"cmv\" fill=\"#f97316\" name=\"CMV\" radius={[4, 4, 0, 0]} />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"utilidad\"\n                      stroke=\"#3b82f6\"\n                      strokeWidth={3}\n                      name=\"Utilidad Real\"\n                      dot={{ fill: \"#3b82f6\", r: 4 }}\n                    />\n                  </ComposedChart>\n                </ResponsiveContainer>\n              </Card>\n            </div>\n          </div>\n        </div>\n\n        <Dialog open={isCreateExpenseOpen} onOpenChange={setIsCreateExpenseOpen}>\n          <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"font-serif\">Crear Nuevo Gasto</DialogTitle>\n              <DialogDescription>Ingresa los detalles del gasto a registrar</DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleCreateExpense}>\n              <div className=\"grid gap-4 py-4\">\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"receiptNumber\">N├║mero de Documento *</Label>\n                  <Input\n                    id=\"receiptNumber\"\n                    value={expenseForm.receiptNumber}\n                    onChange={(e) => setExpenseForm({ ...expenseForm, receiptNumber: e.target.value })}\n                    required\n                  />\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"purchaseType\">Tipo Compra/Pago *</Label>\n                  <Input\n                    id=\"purchaseType\"\n                    value={expenseForm.purchaseType}\n                    onChange={(e) => setExpenseForm({ ...expenseForm, purchaseType: e.target.value })}\n                    placeholder=\"Ej: Compra de suministros, Pago de servicios\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"amount\">Monto (COP) *</Label>\n                  <Input\n                    id=\"amount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={expenseForm.amount}\n                    onChange={(e) => setExpenseForm({ ...expenseForm, amount: e.target.value })}\n                    required\n                  />\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"expenseDate\">Fecha del Gasto *</Label>\n                  <Input\n                    id=\"expenseDate\"\n                    type=\"date\"\n                    value={expenseForm.expenseDate}\n                    onChange={(e) => setExpenseForm({ ...expenseForm, expenseDate: e.target.value })}\n                    required\n                  />\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"category\">Categor├¡a *</Label>\n                  <Select\n                    value={expenseForm.category}\n                    onValueChange={(value) => setExpenseForm({ ...expenseForm, category: value })}\n                    required\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecciona una categor├¡a\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"gastos_oficina\">Gastos de Oficina</SelectItem>\n                      <SelectItem value=\"nomina\">N├│mina</SelectItem>\n                      <SelectItem value=\"servicios_publicos\">Servicios P├║blicos</SelectItem>\n                      <SelectItem value=\"arrendamiento\">Arrendamiento</SelectItem>\n                      <SelectItem value=\"impuestos\">Impuestos</SelectItem>\n                      <SelectItem value=\"transporte\">Transporte</SelectItem>\n                      <SelectItem value=\"publicidad\">Publicidad y Marketing</SelectItem>\n                      <SelectItem value=\"mantenimiento\">Mantenimiento</SelectItem>\n                      <SelectItem value=\"otros\">Otros Gastos</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"paymentMethod\">M├®todo de Pago *</Label>\n                  <Select\n                    value={expenseForm.paymentMethod}\n                    onValueChange={(value) => setExpenseForm({ ...expenseForm, paymentMethod: value })}\n                    required\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecciona m├®todo de pago\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"transferencia\">Transferencia</SelectItem>\n                      <SelectItem value=\"efectivo\">Efectivo</SelectItem>\n                      <SelectItem value=\"tarjeta\">Tarjeta</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {expenseForm.paymentMethod === \"transferencia\" && (\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"bank\">Banco *</Label>\n                    <Select\n                      value={expenseForm.bank}\n                      onValueChange={(value) => setExpenseForm({ ...expenseForm, bank: value })}\n                      required\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Selecciona el banco\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"bancolombia\">Bancolombia</SelectItem>\n                        <SelectItem value=\"nequi\">Nequi</SelectItem>\n                        <SelectItem value=\"daviplata\">Daviplata</SelectItem>\n                        <SelectItem value=\"davivienda\">Davivienda</SelectItem>\n                        <SelectItem value=\"itau\">Ita├║</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"receiptFile\">\n                    Adjuntar Captura {expenseForm.paymentMethod === \"transferencia\" && \"*\"}\n                  </Label>\n                  <div className=\"flex items-center gap-2\">\n                    <Input\n                      id=\"receiptFile\"\n                      type=\"file\"\n                      accept=\"image/*,.pdf\"\n                      onChange={(e) => setReceiptFile(e.target.files?.[0] || null)}\n                      required={expenseForm.paymentMethod === \"transferencia\"}\n                      className=\"cursor-pointer\"\n                    />\n                    {receiptFile && (\n                      <span className=\"text-xs text-emerald-600 font-semibold flex items-center gap-1\">\n                        <Upload className=\"h-3 w-3\" />\n                        {receiptFile.name}\n                      </span>\n                    )}\n                  </div>\n                  {expenseForm.paymentMethod === \"transferencia\" && (\n                    <p className=\"text-xs text-amber-600 font-semibold\">* Obligatorio para transferencias</p>\n                  )}\n                </div>\n\n                <div className=\"grid gap-2\">\n                  <Label htmlFor=\"notes\">Notas (opcional)</Label>\n                  <Textarea\n                    id=\"notes\"\n                    value={expenseForm.notes}\n                    onChange={(e) => setExpenseForm({ ...expenseForm, notes: e.target.value })}\n                    rows={3}\n                  />\n                </div>\n              </div>\n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateExpenseOpen(false)}>\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={isSubmitting} className=\"bg-[#C8A96A] hover:bg-[#B8996A]\">\n                  {isSubmitting ? \"Guardando...\" : \"Crear Gasto\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/ventastotales/page.tsx"
      },
      {
        "path": "components.json",
        "content": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"new-york\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}\n",
        "type": "registry:block",
        "target": "~/components.json"
      },
      {
        "path": "components/AIChatBubble.tsx",
        "content": "\"use client\"\nimport { useEffect, useRef, useState } from \"react\"\n\nasync function askGrok(prompt: string) {\n  const key = process.env.NEXT_PUBLIC_XAI_API_KEY || process.env.XAI_API_KEY || \"\"\n  const res = await fetch(\"https://api.x.ai/v1/chat/completions\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${key}`,\n    },\n    body: JSON.stringify({\n      model: \"grok-4-fast-reasoning\",\n      stream: false,\n      temperature: 0.2,\n      messages: [\n        {\n          role: \"system\",\n          content:\n            \"Eres una IA experta en marketing digital, traffiker y community manager (CI 145). Responde con planes accionables, concisos y medibles.\",\n        },\n        { role: \"user\", content: prompt },\n      ],\n    }),\n  })\n  const json = await res.json()\n  return json?.choices?.[0]?.message?.content || \"Sin respuesta.\"\n}\n\nexport default function AIChatBubble({\n  open,\n  initialPrompt,\n  onClose,\n}: {\n  open: boolean\n  initialPrompt?: string\n  onClose: () => void\n}) {\n  const [messages, setMessages] = useState<{ role: \"user\" | \"assistant\"; content: string }[]>([])\n  const [input, setInput] = useState(\"\")\n  const [busy, setBusy] = useState(false)\n  const booted = useRef(false)\n\n  useEffect(() => {\n    if (open && initialPrompt && !booted.current) {\n      booted.current = true\n      ;(async () => {\n        setBusy(true)\n        const reply = await askGrok(initialPrompt)\n        setMessages([{ role: \"assistant\", content: reply }])\n        setBusy(false)\n      })()\n    }\n  }, [open, initialPrompt])\n\n  const send = async () => {\n    if (!input.trim()) return\n    const q = input.trim()\n    setMessages((m) => [...m, { role: \"user\", content: q }])\n    setInput(\"\")\n    setBusy(true)\n    const reply = await askGrok(q)\n    setMessages((m) => [...m, { role: \"assistant\", content: reply }])\n    setBusy(false)\n  }\n\n  if (!open) return null\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50 w-[360px] overflow-hidden rounded-2xl border bg-white shadow-2xl\">\n      <div className=\"flex items-center justify-between border-b px-3 py-2\">\n        <div className=\"text-sm font-semibold\">Experto IA</div>\n        <button className=\"text-xs opacity-60 hover:opacity-100\" onClick={onClose}>\n          Cerrar\n        </button>\n      </div>\n      <div className=\"max-h-[420px] space-y-3 overflow-y-auto p-3 text-sm\">\n        {messages.map((m, i) => (\n          <div key={i} className={m.role === \"user\" ? \"text-right\" : \"text-left\"}>\n            <div\n              className={`inline-block max-w-[85%] rounded-2xl px-3 py-2 ${\n                m.role === \"user\" ? \"bg-black text-white\" : \"bg-neutral-100 text-neutral-800\"\n              }`}\n            >\n              {m.content}\n            </div>\n          </div>\n        ))}\n        {busy && <div className=\"text-xs text-neutral-500\">PensandoÔÇª</div>}\n      </div>\n      <div className=\"flex gap-2 border-t p-2\">\n        <input\n          className=\"flex-1 rounded-xl border px-3 py-2 text-sm outline-none\"\n          placeholder=\"Escribe tu mensajeÔÇª\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyDown={(e) => e.key === \"Enter\" && send()}\n        />\n        <button onClick={send} className=\"rounded-xl bg-black px-3 py-2 text-xs text-white\" disabled={busy}>\n          Enviar\n        </button>\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/AdsActionsBar.tsx",
        "content": "\"use client\"\nexport default function AdsActionsBar({\n  onOpenGraphs,\n  onExport,\n}: {\n  onOpenGraphs: () => void\n  onExport: () => void\n}) {\n  return (\n    <div className=\"flex items-center gap-3\">\n      <button className=\"rounded-full border px-4 py-2 hover:shadow-sm\" onClick={onOpenGraphs}>\n        Gr├íficos\n      </button>\n      <button className=\"rounded-full border px-4 py-2 hover:shadow-sm\" onClick={onExport}>\n        Exportar\n      </button>\n      <div className=\"ml-auto text-xs text-neutral-500\">Actualizaci├│n autom├ítica cada 5 min</div>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/AdsGraphsPanel.tsx",
        "content": "\"use client\"\nimport { useEffect, useMemo } from \"react\"\nimport { Pie } from \"react-chartjs-2\"\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\"\nChartJS.register(ArcElement, Tooltip, Legend)\n\ntype GraphCampaign = {\n  name: string\n  spend: number\n  conversations: number\n  sales: number\n  revenue: number\n  negativesPct: number\n}\n\nexport default function AdsGraphsPanel({\n  rows,\n  onOpenAI,\n}: {\n  rows: GraphCampaign[]\n  onOpenAI: (autoKickoffPrompt: string) => void\n}) {\n  const agg = useMemo(() => {\n    const spend = rows.reduce((a, b) => a + b.spend, 0)\n    const conv = rows.reduce((a, b) => a + b.conversations, 0)\n    const sales = rows.reduce((a, b) => a + b.sales, 0)\n    const revenue = rows.reduce((a, b) => a + b.revenue, 0)\n    const roas = spend > 0 ? revenue / spend : 0\n    const cvr = conv > 0 ? sales / conv : 0\n    const negAvg = rows.length ? rows.reduce((a, b) => a + b.negativesPct, 0) / rows.length : 0\n    return { spend, conv, sales, revenue, roas, cvr, negAvg }\n  }, [rows])\n\n  const data = useMemo(\n    () => ({\n      labels: rows.map((r) => r.name),\n      datasets: [{ data: rows.map((r) => r.spend), borderWidth: 0 }],\n    }),\n    [rows],\n  )\n\n  const negativeAlert = agg.negAvg > 25\n\n  const kickoff = useMemo(() => {\n    const lines = rows\n      .slice(0, 5)\n      .map(\n        (r) =>\n          `ÔÇó ${r.name} ÔÇö Gasto $${r.spend.toLocaleString()}, Conv ${r.conversations}, Ventas ${r.sales}, Ingresos $${r.revenue.toLocaleString()}, Negativo ${r.negativesPct.toFixed(\n            1,\n          )}%`,\n      )\n      .join(\"\\n\")\n\n    return `Diagn├│stico y plan experto (CI 145):\n${lines}\n\nTotales mes: Gasto $${agg.spend.toLocaleString()}, Ingresos $${agg.revenue.toLocaleString()}, ROAS ${agg.roas.toFixed(\n      2,\n    )}x, CVR ${(agg.cvr * 100).toFixed(2)}%, Negativo prom. ${agg.negAvg.toFixed(1)}%.\n\nReglas:\n- Si Negativo > 25%: definir campa├▒a nueva de rescate (segmentaciones, creatividades, copy, budget split, test A/B y calendario) y preguntar 3-5 datos cr├¡ticos del negocio para personalizar.\n- Si desempe├▒o es positivo: 7 quick wins para subir ROAS y CVR (audiencias, creatividades, pujas, horarios, funnel). Responde en bullets accionables.`\n  }, [rows, agg])\n\n  useEffect(() => {\n    if (negativeAlert) onOpenAI(kickoff)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [negativeAlert])\n\n  return (\n    <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-3\">\n      <div className=\"col-span-1 rounded-2xl border bg-white p-4\">\n        <div className=\"mb-3 text-base font-semibold\">Distribuci├│n de gasto</div>\n        <Pie data={data} />\n        <div className=\"mt-4 grid grid-cols-2 gap-2 text-xs text-neutral-600\">\n          <div>Gasto Total</div>\n          <div className=\"text-right\">${agg.spend.toLocaleString()}</div>\n          <div>Ingresos (sin env├¡o)</div>\n          <div className=\"text-right\">${agg.revenue.toLocaleString()}</div>\n          <div>ROAS</div>\n          <div className=\"text-right\">{agg.roas.toFixed(2)}x</div>\n          <div>CVR</div>\n          <div className=\"text-right\">{(agg.cvr * 100).toFixed(2)}%</div>\n          <div>Negativo Prom.</div>\n          <div className=\"text-right\">{agg.negAvg.toFixed(1)}%</div>\n        </div>\n      </div>\n\n      <div className=\"col-span-2 rounded-2xl border bg-white p-4\">\n        <div className=\"mb-3 flex items-center justify-between\">\n          <div className=\"text-base font-semibold\">Estrategia sugerida (IA)</div>\n          <button className=\"rounded-full border px-3 py-1 text-xs hover:shadow-sm\" onClick={() => onOpenAI(kickoff)}>\n            Hablar con IA\n          </button>\n        </div>\n\n        {negativeAlert && (\n          <button\n            onClick={() => onOpenAI(kickoff)}\n            className=\"mb-3 w-full animate-pulse rounded-xl bg-red-600/90 p-2 text-center text-white\"\n          >\n            URGENTE: HABLAR CON EL EXPERTO EN IA\n          </button>\n        )}\n\n        <p className=\"text-sm text-neutral-700\">\n          La IA analizar├í tus campa├▒as y propondr├í acciones inmediatas para mejorar ROAS y CVR. Los ingresos reflejan\n          ├║nicamente el valor de los productos, <b>excluyendo env├¡o</b>.\n        </p>\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/AdsInfoBar.tsx",
        "content": "export default function AdsInfoBar() {\n  return (\n    <div className=\"mb-3 flex items-center gap-2 text-sm\">\n      <span className=\"inline-flex h-5 w-5 items-center justify-center rounded-full border text-[11px]\">i</span>\n      <span className=\"text-neutral-600\">\n        <strong>Administrador de anuncios</strong> ÔÇö KPIs superiores se reinician al inicio de cada mes. Ingresos por\n        campa├▒a excluyen <u>siempre</u> el valor del env├¡o. CVR = Ventas / Conversaciones. $/Conv = Gastado /\n        Conversaciones. ROAS = Ingresos / Gastado.\n      </span>\n      <span className=\"ml-auto text-xs text-neutral-400\">Auto-refresh cada 5 min</span>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/AdsKpiCards.tsx",
        "content": "\"use client\"\n\nexport default function AdsKpiCards({\n  gastoTotal,\n  conversaciones,\n  ventas,\n  roas,\n  cvr,\n  lastUpdated,\n}: {\n  gastoTotal: number\n  conversaciones: number\n  ventas: number\n  roas: number\n  cvr: number\n  lastUpdated: string\n}) {\n  const Card = ({ title, value, foot }: { title: string; value: string; foot?: string }) => (\n    <div className=\"rounded-2xl border bg-white p-4 shadow-[0_1px_0_#ececec]\">\n      <div className=\"text-xs text-neutral-500\">{title}</div>\n      <div className=\"mt-1 text-2xl font-semibold tracking-tight\">{value}</div>\n      {foot && <div className=\"mt-1 text-xs text-neutral-400\">{foot}</div>}\n    </div>\n  )\n\n  return (\n    <div>\n      <div className=\"mb-2 flex items-center gap-2 text-xs text-emerald-700\">\n        <span className=\"inline-flex h-5 items-center rounded-full bg-emerald-50 px-2\">En vivo desde Meta Ads</span>\n        <span className=\"ml-auto text-neutral-400\">\n          ├Ültima actualizaci├│n: {new Date(lastUpdated).toLocaleTimeString()}\n        </span>\n      </div>\n      <div className=\"grid grid-cols-1 gap-3 sm:grid-cols-2 lg:grid-cols-5\">\n        <Card title=\"GASTO TOTAL\" value={`$${gastoTotal.toLocaleString()}`} />\n        <Card title=\"CONVERSACIONES\" value={`${conversaciones.toLocaleString()}`} />\n        <Card title=\"VENTAS\" value={`${ventas.toLocaleString()}`} foot=\"tasa conversi├│n en Tabla\" />\n        <Card title=\"ROAS\" value={`${roas.toFixed(2)}x`} />\n        <Card title=\"CVR PROMEDIO\" value={`${(cvr * 100).toFixed(2)}%`} />\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/AdsTable.tsx",
        "content": "\"use client\"\nimport { useMemo } from \"react\"\nimport type { CampaignRow } from \"@/lib/types\"\n\nexport default function AdsTable({\n  data,\n  onToggleAdsets,\n  selectedCampaigns = [],\n  onToggleSelection,\n}: {\n  data: CampaignRow[]\n  onToggleAdsets: (campaignId: string) => void\n  selectedCampaigns?: string[]\n  onToggleSelection?: (campaignId: string) => void\n}) {\n  const computed = useMemo(() => {\n    return data.map((c) => {\n      const presupuesto = c.meta.dailyBudget\n      const gastado = c.meta.spendTotal\n      const conv = c.crm.conversations\n      const ventas = c.crm.completedOrders\n      const ingresos = c.sales.revenue\n      const costoPorConv = conv > 0 ? gastado / conv : 0\n      const roas = gastado > 0 ? ingresos / gastado : 0\n      const cvr = conv > 0 ? ventas / conv : 0\n\n      return { c, presupuesto, gastado, conv, ventas, ingresos, costoPorConv, roas, cvr }\n    })\n  }, [data])\n\n  const allSelected = data.length > 0 && selectedCampaigns.length === data.length\n  const someSelected = selectedCampaigns.length > 0 && selectedCampaigns.length < data.length\n\n  const handleSelectAll = () => {\n    if (!onToggleSelection) return\n    if (allSelected) {\n      // Deseleccionar todas\n      data.forEach((row) => onToggleSelection(row.id))\n    } else {\n      // Seleccionar todas las que no est├ín seleccionadas\n      data.forEach((row) => {\n        if (!selectedCampaigns.includes(row.id)) {\n          onToggleSelection(row.id)\n        }\n      })\n    }\n  }\n\n  return (\n    <div className=\"overflow-hidden rounded-2xl border bg-white\">\n      <table className=\"w-full whitespace-nowrap text-sm\">\n        <thead className=\"bg-neutral-50 text-neutral-600\">\n          <tr>\n            <th className=\"px-4 py-3 text-center\">\n              <input\n                type=\"checkbox\"\n                checked={allSelected}\n                ref={(input) => {\n                  if (input) input.indeterminate = someSelected\n                }}\n                onChange={handleSelectAll}\n                className=\"h-4 w-4 rounded border-neutral-300 text-[#D8BD80] focus:ring-[#D8BD80]\"\n              />\n            </th>\n            <th className=\"px-4 py-3 text-center\">Estado</th>\n            <th className=\"px-4 py-3 text-center\">Campa├▒a</th>\n            <th className=\"px-4 py-3 text-center\">Entrega</th>\n            <th className=\"px-4 py-3 text-center\">Presup.</th>\n            <th className=\"px-4 py-3 text-center\">Gastado</th>\n            <th className=\"px-4 py-3 text-center\">Conv.</th>\n            <th className=\"px-4 py-3 text-center\">$/Conv.</th>\n            <th className=\"px-4 py-3 text-center\">Ventas</th>\n            <th className=\"px-4 py-3 text-center\">Ingresos</th>\n            <th className=\"px-4 py-3 text-center\">ROAS</th>\n            <th className=\"px-4 py-3 text-center\">CVR</th>\n            <th className=\"px-4 py-3 text-center\"></th>\n          </tr>\n        </thead>\n        <tbody>\n          {computed.map((row) => (\n            <tr key={row.c.id} className=\"border-t\">\n              <td className=\"px-4 py-3 text-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedCampaigns.includes(row.c.id)}\n                  onChange={() => onToggleSelection?.(row.c.id)}\n                  className=\"h-4 w-4 rounded border-neutral-300 text-[#D8BD80] focus:ring-[#D8BD80]\"\n                />\n              </td>\n\n              <td className=\"px-4 py-3 text-center\">\n                <span\n                  className={`rounded-full px-2 py-0.5 text-[12px] ${\n                    row.c.status === \"Activa\" ? \"bg-emerald-50 text-emerald-700\" : \"bg-neutral-100 text-neutral-500\"\n                  }`}\n                >\n                  {row.c.status}\n                </span>\n              </td>\n\n              <td className=\"px-4 py-3 text-center\">\n                <div className=\"font-medium text-neutral-900\">{row.c.name}</div>\n                <div className=\"text-xs text-neutral-500\">\n                  ID: {row.c.id} ÔÇó Cuenta: {row.c.accountType}\n                </div>\n              </td>\n\n              <td className=\"px-4 py-3 text-center\">{row.c.deliveryLabel}</td>\n              <td className=\"px-4 py-3 text-center\">${row.presupuesto.toLocaleString()}</td>\n              <td className=\"px-4 py-3 text-center\">${row.gastado.toLocaleString()}</td>\n              <td className=\"px-4 py-3 text-center\">{row.conv}</td>\n              <td className=\"px-4 py-3 text-center\">${row.costoPorConv.toFixed(2)}</td>\n              <td className=\"px-4 py-3 text-center\">{row.ventas}</td>\n              <td className=\"px-4 py-3 text-center\">${row.ingresos.toLocaleString()}</td>\n              <td className=\"px-4 py-3 text-center\">{row.roas.toFixed(2)}x</td>\n              <td className=\"px-4 py-3 text-center\">{(row.cvr * 100).toFixed(2)}%</td>\n\n              <td className=\"px-4 py-3 text-center\">\n                <button\n                  className=\"rounded-full border px-3 py-1 text-xs hover:shadow-sm\"\n                  onClick={() => onToggleAdsets(row.c.id)}\n                >\n                  Ver conjuntos\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/DatabaseInitializer.tsx",
        "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { AlertCircle, Loader2 } from \"lucide-react\"\n\nexport default function DatabaseInitializer() {\n  const [status, setStatus] = useState<\"checking\" | \"initialized\" | \"error\" | \"initializing\">(\"checking\")\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    async function checkAndInitialize() {\n      try {\n        console.log(\"[v0] Verificando estado de la base de datos...\")\n\n        // Verificar si la base de datos est├í inicializada\n        const checkResponse = await fetch(\"/api/init-db\")\n        const checkData = await checkResponse.json()\n\n        if (checkData.initialized) {\n          console.log(\"[v0] Base de datos ya inicializada\")\n          setStatus(\"initialized\")\n          return\n        }\n\n        console.log(\"[v0] Inicializando base de datos...\")\n        setStatus(\"initializing\")\n\n        // Inicializar la base de datos\n        const initResponse = await fetch(\"/api/init-db\", { method: \"POST\" })\n        const initData = await initResponse.json()\n\n        if (initData.success) {\n          console.log(\"[v0] Base de datos inicializada correctamente\")\n          setStatus(\"initialized\")\n        } else {\n          console.error(\"[v0] Error al inicializar:\", initData.error)\n          setError(initData.message || initData.error)\n          setStatus(\"error\")\n        }\n      } catch (err: any) {\n        console.error(\"[v0] Error en inicializaci├│n:\", err)\n        setError(err.message)\n        setStatus(\"error\")\n      }\n    }\n\n    checkAndInitialize()\n  }, [])\n\n  // No mostrar nada si est├í inicializado\n  if (status === \"initialized\") {\n    return null\n  }\n\n  // Mostrar indicador de carga\n  if (status === \"checking\" || status === \"initializing\") {\n    return (\n      <div className=\"fixed bottom-4 right-4 z-50 rounded-lg border border-blue-200 bg-blue-50 p-4 shadow-lg\">\n        <div className=\"flex items-center gap-3\">\n          <Loader2 className=\"h-5 w-5 animate-spin text-blue-600\" />\n          <div>\n            <p className=\"text-sm font-medium text-blue-900\">\n              {status === \"checking\" ? \"Verificando base de datos...\" : \"Inicializando base de datos...\"}\n            </p>\n            <p className=\"text-xs text-blue-700\">Por favor espera un momento</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Mostrar error\n  if (status === \"error\") {\n    return (\n      <div className=\"fixed bottom-4 right-4 z-50 max-w-md rounded-lg border border-red-200 bg-red-50 p-4 shadow-lg\">\n        <div className=\"flex items-start gap-3\">\n          <AlertCircle className=\"h-5 w-5 flex-shrink-0 text-red-600\" />\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-red-900\">Error de inicializaci├│n</p>\n            <p className=\"mt-1 text-xs text-red-700\">{error}</p>\n            <p className=\"mt-2 text-xs text-red-600\">\n              Por favor ejecuta el script SQL manualmente desde la interfaz de v0\n            </p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return null\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/SalesMap.tsx",
        "content": "\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\"\nimport L from \"leaflet\"\nimport \"leaflet/dist/leaflet.css\"\n\ntype CityData = {\n  city: string\n  sales: number\n  buyers: number\n  avgTicket: number\n  coordinates: [number, number]\n}\n\ntype SalesMapProps = {\n  cities: CityData[]\n  onCityClick?: (city: string) => void\n}\n\nfunction createCustomIcon(sales: number) {\n  const salesText = `$${(sales / 1000000).toFixed(1)}M COP`\n\n  return L.divIcon({\n    html: `\n      <div style=\"\n        background: white;\n        padding: 6px 12px;\n        border-radius: 9999px;\n        box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n        border: 1px solid #e5e7eb;\n        white-space: nowrap;\n        cursor: pointer;\n        transition: all 0.2s;\n        font-family: system-ui, -apple-system, sans-serif;\n      \" onmouseover=\"this.style.boxShadow='0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)'\" onmouseout=\"this.style.boxShadow='0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)'\">\n        <span style=\"font-size: 14px; font-weight: 600; color: #111827;\">${salesText}</span>\n      </div>\n    `,\n    className: \"custom-marker-icon\",\n    iconSize: [120, 40],\n    iconAnchor: [60, 20],\n  })\n}\n\nexport default function SalesMap({ cities, onCityClick }: SalesMapProps) {\n  const [mounted, setMounted] = useState(false)\n\n  // Coordenadas del centro de Colombia\n  const colombiaCenter: [number, number] = [4.5709, -74.2973]\n\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  if (!mounted) {\n    return (\n      <div className=\"flex h-96 items-center justify-center rounded-2xl border-2 border-dashed border-gray-300 bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-16 w-16 animate-pulse rounded-full bg-gray-300\" />\n          <p className=\"mt-4 text-sm text-gray-600\">Cargando mapa...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"relative h-96 w-full overflow-hidden rounded-2xl\">\n      <MapContainer\n        center={colombiaCenter}\n        zoom={6}\n        scrollWheelZoom={true}\n        className=\"h-full w-full z-0\"\n        zoomControl={true}\n      >\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n\n        {cities.map((city) => (\n          <Marker\n            key={city.city}\n            position={city.coordinates}\n            icon={createCustomIcon(city.sales)}\n            eventHandlers={{\n              click: () => {\n                if (onCityClick) onCityClick(city.city)\n              },\n            }}\n          >\n            <Popup>\n              <div className=\"p-2\">\n                <h3 className=\"font-bold text-gray-900\">{city.city}</h3>\n                <p className=\"text-sm text-gray-600\">Ventas: ${(city.sales / 1000000).toFixed(1)}M</p>\n                <p className=\"text-sm text-gray-600\">Compradores: {city.buyers}</p>\n                <p className=\"text-sm text-gray-600\">Ticket: ${city.avgTicket.toLocaleString()}</p>\n              </div>\n            </Popup>\n          </Marker>\n        ))}\n      </MapContainer>\n\n      <style jsx global>{`\n        .leaflet-container {\n          font-family: inherit;\n        }\n        \n        .custom-marker-icon {\n          background: transparent !important;\n          border: none !important;\n        }\n        \n        .leaflet-popup-content-wrapper {\n          border-radius: 12px;\n          padding: 0;\n        }\n        \n        .leaflet-popup-content {\n          margin: 12px;\n          font-family: inherit;\n        }\n        \n        .leaflet-control-zoom {\n          border: none !important;\n          border-radius: 12px !important;\n          overflow: hidden;\n          box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\n        }\n        \n        .leaflet-control-zoom a {\n          background-color: white !important;\n          color: #111827 !important;\n          border: none !important;\n          width: 36px !important;\n          height: 36px !important;\n          line-height: 36px !important;\n          font-size: 20px !important;\n        }\n        \n        .leaflet-control-zoom a:hover {\n          background-color: #f9fafb !important;\n        }\n        \n        .leaflet-control-zoom a:first-child {\n          border-bottom: 1px solid #e5e7eb !important;\n        }\n      `}</style>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/ads/CampaignCard.tsx",
        "content": "\"use client\"\n\nimport useSWR from \"swr\"\nimport { Donut } from \"./Donut\"\n\nconst fetcher = (u: string) => fetch(u).then((r) => r.json())\n\nexport function CampaignCard({ id, name }: { id: string; name: string }) {\n  const { data: adsetsC } = useSWR(`/api/ads/campaigns/${id}/adsets`, fetcher, {\n    refreshInterval: 5000,\n  })\n  const { data: insC } = useSWR(`/api/ads/campaigns/${id}/insights`, fetcher, {\n    refreshInterval: 5000,\n  })\n  const inC = insC?.insights\n\n  const sd = (adsetsC?.adsets || []).map((a: any) => ({\n    name: a.name,\n    value: a.spend,\n  }))\n  const cd = (adsetsC?.adsets || []).map((a: any) => ({\n    name: a.name,\n    value: a.conversions,\n  }))\n  const fd = inC\n    ? [\n        { name: \"Positivo\", value: inC.positivePct },\n        { name: \"Negativo\", value: inC.negativePct },\n        {\n          name: \"Neutro\",\n          value: Math.max(0, 100 - inC.positivePct - inC.negativePct),\n        },\n      ]\n    : []\n\n  return (\n    <div className=\"rounded-3xl bg-white border border-neutral-100 shadow-[0_20px_60px_rgba(0,0,0,.06)] p-4\">\n      <div className=\"text-sm font-semibold mb-3\">{name}</div>\n      <div className=\"space-y-4\">\n        <Donut title=\"Gasto por ad set\" data={sd} />\n        <Donut title=\"Conversiones por ad set\" data={cd} />\n        <Donut title=\"Feedback (┬▒)\" data={fd} />\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/ads/Donut.tsx",
        "content": "import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer, Legend } from \"recharts\"\n\nexport function Donut({\n  title,\n  data,\n  valueKey = \"value\",\n  nameKey = \"name\",\n}: {\n  title: string\n  data: { name: string; value: number }[]\n  valueKey?: string\n  nameKey?: string\n}) {\n  const COLORS = [\"#c9b074\", \"#e5d6a7\", \"#9f8b54\", \"#d8bd80\", \"#b59b5a\", \"#eee3bf\"]\n  return (\n    <div className=\"rounded-3xl bg-white p-4 border border-neutral-100 shadow-[0_20px_60px_rgba(0,0,0,.06)]\">\n      <div className=\"text-sm text-neutral-600 mb-2\">{title}</div>\n      <div className=\"h-64\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <PieChart>\n            <Pie data={data} dataKey={valueKey} nameKey={nameKey} innerRadius={60} outerRadius={90} paddingAngle={2}>\n              {data.map((_, i) => (\n                <Cell key={i} fill={COLORS[i % COLORS.length]} />\n              ))}\n            </Pie>\n            <Tooltip />\n            <Legend />\n          </PieChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/ads/EmptyState.tsx",
        "content": "export const EmptyState = () => (\n  <div className=\"rounded-3xl border border-dashed border-neutral-200 p-10 text-center text-neutral-500 bg-white\">\n    <div className=\"text-xl font-semibold mb-2\">Selecciona una campa├▒a o abre la pesta├▒a \"Gr├íficos\"</div>\n    <p className=\"max-w-md mx-auto\">\n      Para ver tortas y recomendaciones de IA, entra en <b>GR├üFICOS</b>. Si no hay campa├▒a seleccionada, ver├ís\n      comparativas generales por columna.\n    </p>\n  </div>\n)\n",
        "type": "registry:component"
      },
      {
        "path": "components/ads/GrokPanel.tsx",
        "content": "\"use client\"\n\nimport * as React from \"react\"\n\ntype InsightInput = {\n  campaignName: string\n  negativePct: number\n  positivePct: number\n  roas: number\n  spend: number\n  cpa: number\n  ctr: number\n}\n\nfunction craftPrompt(i: InsightInput) {\n  return `Act├║a como un experto en Marketing Digital, Traffiker y Community Manager (CI 145).\nAnaliza y entrega un plan accionable. Datos:\n- Campa├▒a: ${i.campaignName}\n- ROAS: ${i.roas.toFixed(2)}\n- % Negativo: ${i.negativePct}%\n- % Positivo: ${i.positivePct}%\n- Inversi├│n: $${i.spend.toLocaleString()}\n- CPA: $${i.cpa.toFixed(2)}\n- CTR: ${(i.ctr * 100).toFixed(2)}%\n\nReglas:\n1) Si % Negativo > 25% ÔåÆ plan correctivo estrat├®gico (hooks, piezas, segmentaci├│n, pujas, calendario, budget split, test A/B).\n2) Si % Positivo > 50% ÔåÆ checklist para aumentar ROAS (lookalikes, creatividades top, ofertas, automatizaciones, escalado).\n3) Espa├▒ol. Ultra espec├¡fico, bullets + microplan 7 d├¡as.\nIncluye inspiraci├│n de Facebook Ads Library (oro laminado).`\n}\n\nasync function getAiAdvice(i: InsightInput): Promise<string> {\n  const res = await fetch(`/api/ads/ai`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ prompt: craftPrompt(i) }),\n  })\n  const j = await res.json()\n  return j.text || \"\"\n}\n\nexport function GrokPanel({ input }: { input: InsightInput }) {\n  const [text, setText] = React.useState<string>(\"\")\n  const [loading, setLoading] = React.useState(false)\n\n  async function run() {\n    setLoading(true)\n    try {\n      setText(await getAiAdvice(input))\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"rounded-3xl border bg-white p-5 shadow-[0_20px_60px_rgba(0,0,0,.06)]\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <div className=\"text-sm text-neutral-600\">IA estrat├®gica (Grok ┬À x.ai)</div>\n        <button onClick={run} className=\"rounded-full bg-black text-white px-4 py-2 text-sm hover:opacity-90\">\n          Generar plan\n        </button>\n      </div>\n      {loading ? (\n        <div className=\"text-neutral-500 text-sm\">Analizando datosÔÇª</div>\n      ) : text ? (\n        <div className=\"prose prose-sm max-w-none\" dangerouslySetInnerHTML={{ __html: text }} />\n      ) : (\n        <div className=\"text-neutral-500 text-sm\">\n          Presiona <b>Generar plan</b> para ver recomendaciones basadas en tus m├®tricas.\n        </div>\n      )}\n      <div className=\"mt-4 text-[11px] text-neutral-500\">\n        Insp├¡rate en{\" \"}\n        <a\n          className=\"underline\"\n          target=\"_blank\"\n          href=\"https://web.facebook.com/ads/library/?active_status=active&ad_type=all&country=CO&is_targeted_country=false&media_type=all&q=oro%20laminado&search_type=keyword_unordered\"\n          rel=\"noreferrer\"\n        >\n          Facebook Ads Library (oro laminado)\n        </a>\n        .\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/ads/KpiCard.tsx",
        "content": "import type React from \"react\"\nexport const KpiCard = ({\n  title,\n  value,\n  sub,\n  icon,\n}: {\n  title: string\n  value: string | number\n  sub?: string\n  icon?: React.ReactNode\n}) => (\n  <div className=\"rounded-3xl bg-white shadow-[0_20px_60px_rgba(0,0,0,.10)] border border-neutral-100 p-5 relative overflow-hidden\">\n    <div className=\"absolute inset-0 bg-[radial-gradient(1400px_300px_at_-10%_-40%,rgba(216,189,128,.20),transparent)]\" />\n    <div className=\"relative flex items-center gap-3\">\n      <div className=\"h-10 w-10 grid place-items-center rounded-2xl bg-[rgba(216,189,128,.18)] text-[#6b5728]\">\n        {icon ?? <span>Ôÿà</span>}\n      </div>\n      <div className=\"text-sm text-neutral-500\">{title}</div>\n    </div>\n    <div className=\"relative mt-2 text-3xl font-semibold tracking-tight tabular-nums\">{value}</div>\n    {sub && <div className=\"relative mt-1 text-xs text-neutral-500\">{sub}</div>}\n  </div>\n)\n",
        "type": "registry:component"
      },
      {
        "path": "components/ads/LiveBadge.tsx",
        "content": "export const LiveBadge = () => (\n  <span className=\"ml-2 inline-flex items-center gap-2 rounded-full bg-emerald-50 text-emerald-700 px-3 py-1 text-xs border border-emerald-200\">\n    <span className=\"relative flex h-2 w-2\">\n      <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-emerald-400 opacity-75\" />\n      <span className=\"relative inline-flex rounded-full h-2 w-2 bg-emerald-500\" />\n    </span>\n    Tiempo real\n  </span>\n)\n",
        "type": "registry:component"
      },
      {
        "path": "components/ads/Table.tsx",
        "content": "\"use client\"\nimport { Pill } from \"./ui\"\nimport { Info } from \"lucide-react\"\n\nexport function AdsTable({\n  rows,\n  selectedCampaigns,\n  onToggleSelection,\n}: {\n  rows: Array<{\n    id: string\n    name: string\n    accountType: string\n    status: \"active\" | \"paused\"\n    delivery: \"Activa\" | \"Pausada\"\n    budget?: number\n    spend: number\n    conv: number\n    cpa?: number\n    sales: number\n    revenue: number\n    roas: number\n    cvr: number\n  }>\n  selectedCampaigns: string[]\n  onToggleSelection: (id: string) => void\n}) {\n  const columnTooltips: Record<string, string> = {\n    Estado: \"Indica si la campa├▒a est├í activa (verde) o pausada (gris)\",\n    Campa├▒a: \"Nombre de la campa├▒a publicitaria y su ID ├║nico\",\n    Entrega: \"Estado actual de entrega de la campa├▒a en Meta Ads\",\n    \"Presup.\": \"Presupuesto total asignado a la campa├▒a\",\n    Gastado: \"Monto total gastado en la campa├▒a hasta el momento\",\n    \"Conv.\": \"N├║mero total de conversaciones iniciadas desde la campa├▒a\",\n    \"$ / Conv.\": \"Costo promedio por cada conversaci├│n generada (CPA)\",\n    Ventas: \"N├║mero total de ventas atribuidas a esta campa├▒a\",\n    Ingresos: \"Ingresos totales generados (sin incluir costo de env├¡o)\",\n    ROAS: \"Return on Ad Spend - Retorno de inversi├│n publicitaria (Ingresos/Gastado)\",\n    CVR: \"Conversion Rate - Tasa de conversi├│n (Ventas/Conversaciones)\",\n  }\n\n  return (\n    <div className=\"rounded-2xl border border-neutral-200 overflow-hidden bg-white shadow-[0_14px_40px_rgba(0,0,0,.05)]\">\n      <table className=\"w-full text-sm\">\n        <thead className=\"bg-neutral-50 text-neutral-600\">\n          <tr>\n            <th className=\"text-left px-5 py-3\">\n              <div className=\"flex items-center gap-1.5\">\n                <span>Estado</span>\n                <div className=\"group relative\">\n                  <Info className=\"w-3.5 h-3.5 text-neutral-400 cursor-help\" />\n                  <div className=\"absolute left-0 top-6 hidden group-hover:block z-50 w-64 p-2 bg-neutral-900 text-white text-xs rounded-lg shadow-lg\">\n                    {columnTooltips.Estado}\n                  </div>\n                </div>\n              </div>\n            </th>\n            <th className=\"text-left px-5 py-3\">\n              <div className=\"flex items-center gap-1.5\">\n                <span>Campa├▒a</span>\n                <div className=\"group relative\">\n                  <Info className=\"w-3.5 h-3.5 text-neutral-400 cursor-help\" />\n                  <div className=\"absolute left-0 top-6 hidden group-hover:block z-50 w-64 p-2 bg-neutral-900 text-white text-xs rounded-lg shadow-lg\">\n                    {columnTooltips.Campa├▒a}\n                  </div>\n                </div>\n              </div>\n            </th>\n            <th className=\"text-left px-5 py-3\">\n              <div className=\"flex items-center gap-1.5\">\n                <span>Entrega</span>\n                <div className=\"group relative\">\n                  <Info className=\"w-3.5 h-3.5 text-neutral-400 cursor-help\" />\n                  <div className=\"absolute left-0 top-6 hidden group-hover:block z-50 w-64 p-2 bg-neutral-900 text-white text-xs rounded-lg shadow-lg\">\n                    {columnTooltips.Entrega}\n                  </div>\n                </div>\n              </div>\n            </th>\n            <th className=\"text-right px-5 py-3\">\n              <div className=\"flex items-center justify-end gap-1.5\">\n                <span>Presup.</span>\n                <div className=\"group relative\">\n                  <Info className=\"w-3.5 h-3.5 text-neutral-400 cursor-help\" />\n                  <div className=\"absolute right-0 top-6 hidden group-hover:block z-50 w-64 p-2 bg-neutral-900 text-white text-xs rounded-lg shadow-lg\">\n                    {columnTooltips[\"Presup.\"]}\n                  </div>\n                </div>\n              </div>\n            </th>\n            <th className=\"text-right px-5 py-3\">\n              <div className=\"flex items-center justify-end gap-1.5\">\n                <span>Gastado</span>\n                <div className=\"group relative\">\n                  <Info className=\"w-3.5 h-3.5 text-neutral-400 cursor-help\" />\n                  <div className=\"absolute right-0 top-6 hidden group-hover:block z-50 w-64 p-2 bg-neutral-900 text-white text-xs rounded-lg shadow-lg\">\n                    {columnTooltips.Gastado}\n                  </div>\n                </div>\n              </div>\n            </th>\n            <th className=\"text-right px-5 py-3\">\n              <div className=\"flex items-center justify-end gap-1.5\">\n                <span>Conv.</span>\n                <div className=\"group relative\">\n                  <Info className=\"w-3.5 h-3.5 text-neutral-400 cursor-help\" />\n                  <div className=\"absolute right-0 top-6 hidden group-hover:block z-50 w-64 p-2 bg-neutral-900 text-white text-xs rounded-lg shadow-lg\">\n                    {columnTooltips[\"Conv.\"]}\n                  </div>\n                </div>\n              </div>\n            </th>\n            <th className=\"text-right px-5 py-3\">\n              <div className=\"flex items-center justify-end gap-1.5\">\n                <span>$ / Conv.</span>\n                <div className=\"group relative\">\n                  <Info className=\"w-3.5 h-3.5 text-neutral-400 cursor-help\" />\n                  <div className=\"absolute right-0 top-6 hidden group-hover:block z-50 w-64 p-2 bg-neutral-900 text-white text-xs rounded-lg shadow-lg\">\n                    {columnTooltips[\"$ / Conv.\"]}\n                  </div>\n                </div>\n              </div>\n            </th>\n            <th className=\"text-right px-5 py-3\">\n              <div className=\"flex items-center justify-end gap-1.5\">\n                <span>Ventas</span>\n                <div className=\"group relative\">\n                  <Info className=\"w-3.5 h-3.5 text-neutral-400 cursor-help\" />\n                  <div className=\"absolute right-0 top-6 hidden group-hover:block z-50 w-64 p-2 bg-neutral-900 text-white text-xs rounded-lg shadow-lg\">\n                    {columnTooltips.Ventas}\n                  </div>\n                </div>\n              </div>\n            </th>\n            <th className=\"text-right px-5 py-3\">\n              <div className=\"flex items-center justify-end gap-1.5\">\n                <span>Ingresos</span>\n                <div className=\"group relative\">\n                  <Info className=\"w-3.5 h-3.5 text-neutral-400 cursor-help\" />\n                  <div className=\"absolute right-0 top-6 hidden group-hover:block z-50 w-64 p-2 bg-neutral-900 text-white text-xs rounded-lg shadow-lg\">\n                    {columnTooltips.Ingresos}\n                  </div>\n                </div>\n              </div>\n            </th>\n            <th className=\"text-right px-5 py-3\">\n              <div className=\"flex items-center justify-end gap-1.5\">\n                <span>ROAS</span>\n                <div className=\"group relative\">\n                  <Info className=\"w-3.5 h-3.5 text-neutral-400 cursor-help\" />\n                  <div className=\"absolute right-0 top-6 hidden group-hover:block z-50 w-64 p-2 bg-neutral-900 text-white text-xs rounded-lg shadow-lg\">\n                    {columnTooltips.ROAS}\n                  </div>\n                </div>\n              </div>\n            </th>\n            <th className=\"text-right px-5 py-3\">\n              <div className=\"flex items-center justify-end gap-1.5\">\n                <span>CVR</span>\n                <div className=\"group relative\">\n                  <Info className=\"w-3.5 h-3.5 text-neutral-400 cursor-help\" />\n                  <div className=\"absolute right-0 top-6 hidden group-hover:block z-50 w-64 p-2 bg-neutral-900 text-white text-xs rounded-lg shadow-lg\">\n                    {columnTooltips.CVR}\n                  </div>\n                </div>\n              </div>\n            </th>\n            <th className=\"px-3\" />\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map((r) => (\n            <tr key={r.id} className=\"border-t\">\n              <td className=\"px-5 py-3\">\n                <div className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedCampaigns.includes(r.id)}\n                    onChange={() => onToggleSelection(r.id)}\n                    className=\"w-4 h-4 rounded border-neutral-300 text-[#D8BD80] focus:ring-[#D8BD80]\"\n                  />\n                  <span\n                    className={`inline-flex h-5 w-9 rounded-full border ${r.status === \"active\" ? \"bg-green-500/90 border-green-500\" : \"bg-neutral-200 border-neutral-300\"}`}\n                  />\n                </div>\n              </td>\n              <td className=\"px-5 py-3\">\n                <div className=\"font-medium\">{r.name}</div>\n                <div className=\"text-[11px] text-neutral-500\">\n                  ID: {r.id} ÔÇó Cuenta: {r.accountType}\n                </div>\n              </td>\n              <td className=\"px-5 py-3\">\n                <Pill color={r.delivery === \"Activa\" ? \"green\" : \"amber\"}>{r.delivery}</Pill>\n              </td>\n              <td className=\"px-5 py-3 text-right tabular-nums\">{r.budget ? `$${r.budget.toLocaleString()}` : \"$0\"}</td>\n              <td className=\"px-5 py-3 text-right tabular-nums\">${r.spend.toLocaleString()}</td>\n              <td className=\"px-5 py-3 text-right tabular-nums\">{r.conv.toLocaleString()}</td>\n              <td className=\"px-5 py-3 text-right tabular-nums\">{r.cpa ? `$${r.cpa.toLocaleString()}` : \"ÔÇö\"}</td>\n              <td className=\"px-5 py-3 text-right tabular-nums\">{r.sales.toLocaleString()}</td>\n              <td className=\"px-5 py-3 text-right tabular-nums\">${r.revenue.toLocaleString()}</td>\n              <td className={`px-5 py-3 text-right tabular-nums ${r.roas >= 1 ? \"text-emerald-600\" : \"text-rose-600\"}`}>\n                {r.roas.toFixed(2)}x\n              </td>\n              <td className=\"px-5 py-3 text-right tabular-nums\">{(r.cvr * 100).toFixed(2)}%</td>\n              <td className=\"px-3\" />\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/ads/Toolbar.tsx",
        "content": "\"use client\"\nimport { IconBtn } from \"./ui\"\n\nexport function Toolbar({\n  range,\n  setRange,\n  onExport,\n  onCharts,\n}: {\n  range: string\n  setRange: (v: string) => void\n  onExport?: () => void\n  onCharts?: () => void\n}) {\n  return (\n    <div className=\"flex flex-wrap items-center gap-3\">\n      <select\n        value={range}\n        onChange={(e) => setRange(e.target.value)}\n        className=\"h-9 rounded-xl border border-neutral-200 bg-white px-3 text-sm\"\n      >\n        <option>├Ültimos 30 d├¡as</option>\n        <option>├Ültimos 14 d├¡as</option>\n        <option>├Ültimos 7 d├¡as</option>\n        <option>Hoy</option>\n      </select>\n\n      <div className=\"ml-auto flex items-center gap-2\">\n        <IconBtn title=\"Gr├íficos\" onClick={onCharts}>\n          Gr├íficos\n        </IconBtn>\n        <IconBtn title=\"Exportar\" onClick={onExport}>\n          Exportar\n        </IconBtn>\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/ads/ui.tsx",
        "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport clsx from \"clsx\"\n\nexport const GoldRing = ({ className = \"\" }) => (\n  <span\n    className={clsx(\n      \"absolute inset-0 pointer-events-none rounded-[22px]\",\n      \"bg-[radial-gradient(1200px_250px_at_-10%_-40%,rgba(201,176,116,.18),transparent)]\",\n      className,\n    )}\n  />\n)\n\nexport const Kpi = ({\n  title,\n  value,\n  sub,\n  tone = \"gold\",\n  right,\n}: {\n  title: string\n  value: string | number\n  sub?: string | React.ReactNode\n  tone?: \"gold\" | \"blue\" | \"violet\" | \"amber\"\n  right?: React.ReactNode\n}) => {\n  const ring =\n    tone === \"gold\"\n      ? \"bg-[radial-gradient(1200px_250px_at_-10%_-40%,rgba(201,176,116,.18),transparent)]\"\n      : tone === \"blue\"\n        ? \"bg-[radial-gradient(1200px_250px_at_-10%_-40%,rgba(60,120,255,.12),transparent)]\"\n        : tone === \"violet\"\n          ? \"bg-[radial-gradient(1200px_250px_at_-10%_-40%,rgba(140,80,255,.12),transparent)]\"\n          : \"bg-[radial-gradient(1200px_250px_at_-10%_-40%,rgba(255,175,0,.10),transparent)]\"\n\n  return (\n    <div className=\"relative rounded-2xl border border-neutral-200 bg-white shadow-[0_16px_50px_rgba(0,0,0,.06)] p-5\">\n      <span className={clsx(\"absolute inset-0 rounded-2xl\", ring)} />\n      <div className=\"relative flex items-start justify-between\">\n        <div className=\"text-sm text-neutral-500\">{title}</div>\n        {right}\n      </div>\n      <div className=\"relative mt-1 text-3xl font-semibold tracking-tight tabular-nums\">{value}</div>\n      {sub && <div className=\"relative mt-1 text-xs text-neutral-500\">{sub}</div>}\n    </div>\n  )\n}\n\nexport const Pill = ({\n  children,\n  color = \"neutral\",\n}: {\n  children: React.ReactNode\n  color?: \"neutral\" | \"green\" | \"amber\" | \"red\" | \"blue\"\n}) => {\n  const map: Record<string, string> = {\n    neutral: \"bg-neutral-100 text-neutral-700 border border-neutral-200\",\n    green: \"bg-emerald-50 text-emerald-700 border border-emerald-200\",\n    amber: \"bg-amber-50 text-amber-800 border border-amber-200\",\n    red: \"bg-rose-50 text-rose-700 border border-rose-200\",\n    blue: \"bg-blue-50 text-blue-700 border border-blue-200\",\n  }\n  return <span className={clsx(\"px-2.5 py-1 rounded-full text-xs\", map[color])}>{children}</span>\n}\n\nexport const IconBtn = ({\n  children,\n  active,\n  onClick,\n  title,\n}: {\n  children: React.ReactNode\n  active?: boolean\n  onClick?: () => void\n  title?: string\n}) => (\n  <button\n    title={title}\n    onClick={onClick}\n    className={clsx(\n      \"h-9 px-3 rounded-xl border text-sm\",\n      active ? \"bg-black text-white border-black\" : \"bg-white hover:bg-neutral-50 border-neutral-200\",\n    )}\n  >\n    {children}\n  </button>\n)\n\nexport const LiveBadge = () => (\n  <span className=\"inline-flex items-center gap-2 rounded-full bg-emerald-50 text-emerald-700 px-3 py-1 text-xs border border-emerald-200\">\n    <span className=\"relative flex h-2 w-2\">\n      <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-emerald-400 opacity-75\" />\n      <span className=\"relative inline-flex rounded-full h-2 w-2 bg-emerald-500\" />\n    </span>\n    Tiempo real\n  </span>\n)\n",
        "type": "registry:component"
      },
      {
        "path": "components/create-expense-dialog.tsx",
        "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Plus } from \"lucide-react\"\n\nexport function CreateExpenseDialog() {\n  const [open, setOpen] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [formData, setFormData] = useState({\n    receipt_number: \"\",\n    provider: \"\",\n    category: \"FIJOS\",\n    payment_method: \"TRANSFERENCIA\",\n    status: \"PAGADO\",\n    amount: \"\",\n    notes: \"\",\n    expense_date: new Date().toISOString().split(\"T\")[0],\n  })\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      const response = await fetch(\"/api/finance/expenses\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          ...formData,\n          amount: Number.parseFloat(formData.amount),\n        }),\n      })\n\n      if (!response.ok) throw new Error(\"Error al crear el gasto\")\n\n      // Resetear formulario\n      setFormData({\n        receipt_number: \"\",\n        provider: \"\",\n        category: \"FIJOS\",\n        payment_method: \"TRANSFERENCIA\",\n        status: \"PAGADO\",\n        amount: \"\",\n        notes: \"\",\n        expense_date: new Date().toISOString().split(\"T\")[0],\n      })\n\n      setOpen(false)\n      window.location.reload()\n    } catch (error) {\n      console.error(\"Error:\", error)\n      alert(\"Error al crear el gasto\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button className=\"bg-orange-500 hover:bg-orange-600\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Agregar Gasto\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Crear Nuevo Gasto</DialogTitle>\n          <DialogDescription>Registra un nuevo gasto en el sistema</DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"expense_date\">Fecha del Gasto</Label>\n              <Input\n                id=\"expense_date\"\n                type=\"date\"\n                value={formData.expense_date}\n                onChange={(e) => setFormData({ ...formData, expense_date: e.target.value })}\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"receipt_number\">N├║mero de Recibo</Label>\n              <Input\n                id=\"receipt_number\"\n                value={formData.receipt_number}\n                onChange={(e) => setFormData({ ...formData, receipt_number: e.target.value })}\n                placeholder=\"REC-001\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"provider\">Proveedor *</Label>\n            <Input\n              id=\"provider\"\n              value={formData.provider}\n              onChange={(e) => setFormData({ ...formData, provider: e.target.value })}\n              placeholder=\"Nombre del proveedor\"\n              required\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"category\">Categor├¡a *</Label>\n              <Select\n                value={formData.category}\n                onValueChange={(value) => setFormData({ ...formData, category: value })}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"FIJOS\">Fijos</SelectItem>\n                  <SelectItem value=\"VARIABLES\">Variables</SelectItem>\n                  <SelectItem value=\"MARKETING\">Marketing</SelectItem>\n                  <SelectItem value=\"LOGISTICA\">Log├¡stica</SelectItem>\n                  <SelectItem value=\"OTROS\">Otros</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"amount\">Monto *</Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                step=\"0.01\"\n                value={formData.amount}\n                onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\n                placeholder=\"0.00\"\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"payment_method\">M├®todo de Pago *</Label>\n              <Select\n                value={formData.payment_method}\n                onValueChange={(value) => setFormData({ ...formData, payment_method: value })}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"EFECTIVO\">Efectivo</SelectItem>\n                  <SelectItem value=\"TRANSFERENCIA\">Transferencia</SelectItem>\n                  <SelectItem value=\"CONTRAENTREGA\">Contraentrega</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"status\">Estado *</Label>\n              <Select value={formData.status} onValueChange={(value) => setFormData({ ...formData, status: value })}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"PAGADO\">Pagado</SelectItem>\n                  <SelectItem value=\"PENDIENTE PAGO\">Pendiente Pago</SelectItem>\n                  <SelectItem value=\"DEVOLUCION\">Devoluci├│n</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"notes\">Notas</Label>\n            <Textarea\n              id=\"notes\"\n              value={formData.notes}\n              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n              placeholder=\"Notas adicionales sobre el gasto\"\n              rows={3}\n            />\n          </div>\n\n          <div className=\"flex justify-end gap-2 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)}>\n              Cancelar\n            </Button>\n            <Button type=\"submit\" disabled={loading}>\n              {loading ? \"Guardando...\" : \"Guardar Gasto\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/create-invoice-dialog.tsx",
        "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect } from \"react\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Plus, Trash2 } from \"lucide-react\"\n\ninterface CreateInvoiceDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  onSuccess: () => void\n}\n\ninterface InvoiceItem {\n  description: string\n  reference: string\n  quantity: number\n  unit_price: number\n}\n\ninterface Sale {\n  id: string\n  client_name: string\n  total: number\n  products: string\n  invoice_number: string | null\n}\n\nexport function CreateInvoiceDialog({ open, onOpenChange, onSuccess }: CreateInvoiceDialogProps) {\n  const [isLoading, setIsLoading] = useState(false)\n  const [salesWithoutInvoice, setSalesWithoutInvoice] = useState<Sale[]>([])\n  const [selectedSale, setSelectedSale] = useState<string>(\"\")\n  const [formData, setFormData] = useState({\n    client_name: \"\",\n    client_nit: \"\",\n    client_email: \"\",\n    client_phone: \"\",\n    client_address: \"\",\n    ciudad: \"\",\n    barrio: \"\",\n    due_date: \"\",\n    payment_method: \"\",\n    notes: \"\",\n    guia: \"\",\n    transportadora: \"\",\n  })\n  const [items, setItems] = useState<InvoiceItem[]>([{ description: \"\", reference: \"\", quantity: 1, unit_price: 0 }])\n\n  useEffect(() => {\n    if (open) {\n      fetchSalesWithoutInvoice()\n    }\n  }, [open])\n\n  const fetchSalesWithoutInvoice = async () => {\n    try {\n      const response = await fetch(\"/api/sales?without_invoice=true\")\n      if (response.ok) {\n        const data = await response.json()\n        setSalesWithoutInvoice(data)\n      }\n    } catch (error) {\n      console.error(\"[v0] Error fetching sales:\", error)\n    }\n  }\n\n  const handleSaleSelect = (saleId: string) => {\n    setSelectedSale(saleId)\n    const sale = salesWithoutInvoice.find((s) => s.id === saleId)\n    if (sale) {\n      setFormData({\n        ...formData,\n        client_name: sale.client_name,\n      })\n      setItems([{ description: sale.products, reference: \"\", quantity: 1, unit_price: sale.total / 1.19 }])\n    }\n  }\n\n  const handleAddItem = () => {\n    setItems([...items, { description: \"\", reference: \"\", quantity: 1, unit_price: 0 }])\n  }\n\n  const handleRemoveItem = (index: number) => {\n    setItems(items.filter((_, i) => i !== index))\n  }\n\n  const handleItemChange = (index: number, field: keyof InvoiceItem, value: string | number) => {\n    const newItems = [...items]\n    newItems[index] = { ...newItems[index], [field]: value }\n    setItems(newItems)\n  }\n\n  const calculateSubtotal = () => {\n    const totalWithIVA = items.reduce((sum, item) => sum + item.quantity * item.unit_price, 0)\n    return totalWithIVA / 1.19\n  }\n\n  const calculateTax = () => {\n    const totalWithIVA = items.reduce((sum, item) => sum + item.quantity * item.unit_price, 0)\n    const subtotal = totalWithIVA / 1.19\n    return totalWithIVA - subtotal\n  }\n\n  const calculateTotal = () => {\n    return items.reduce((sum, item) => sum + item.quantity * item.unit_price, 0)\n  }\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat(\"es-CO\", {\n      style: \"currency\",\n      currency: \"COP\",\n      minimumFractionDigits: 0,\n    }).format(amount)\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setIsLoading(true)\n\n    try {\n      let initialStatus = \"PENDIENTE PAGO\"\n      if (formData.payment_method === \"efectivo\" || formData.payment_method === \"transferencia\") {\n        initialStatus = \"PAGADO\"\n      }\n\n      const response = await fetch(\"/api/invoices\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          ...formData,\n          items,\n          tax_rate: 19,\n          status: initialStatus,\n          sale_id: selectedSale || undefined,\n        }),\n      })\n\n      if (response.ok) {\n        onSuccess()\n        onOpenChange(false)\n        setFormData({\n          client_name: \"\",\n          client_nit: \"\",\n          client_email: \"\",\n          client_phone: \"\",\n          client_address: \"\",\n          ciudad: \"\",\n          barrio: \"\",\n          due_date: \"\",\n          payment_method: \"\",\n          notes: \"\",\n          guia: \"\",\n          transportadora: \"\",\n        })\n        setItems([{ description: \"\", reference: \"\", quantity: 1, unit_price: 0 }])\n        setSelectedSale(\"\")\n      }\n    } catch (error) {\n      console.error(\"[v0] Error creating invoice:\", error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-amber-600\">Nueva Factura</DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {salesWithoutInvoice.length > 0 && (\n            <div className=\"space-y-2 p-4 bg-amber-50 border border-amber-200 rounded-lg\">\n              <Label htmlFor=\"sale_select\">Vincular con Venta Existente (Opcional)</Label>\n              <Select value={selectedSale} onValueChange={handleSaleSelect}>\n                <SelectTrigger id=\"sale_select\">\n                  <SelectValue placeholder=\"Seleccionar venta sin factura\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {salesWithoutInvoice.map((sale) => (\n                    <SelectItem key={sale.id} value={sale.id}>\n                      {sale.id} - {sale.client_name} - ${sale.total.toLocaleString()}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <p className=\"text-xs text-gray-600\">\n                Selecciona una venta para vincularla autom├íticamente con esta factura\n              </p>\n            </div>\n          )}\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Informaci├│n del Cliente</h3>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"client_name\">Nombre del Cliente *</Label>\n                <Input\n                  id=\"client_name\"\n                  value={formData.client_name}\n                  onChange={(e) => setFormData({ ...formData, client_name: e.target.value })}\n                  required\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"client_nit\">NIT / C├®dula</Label>\n                <Input\n                  id=\"client_nit\"\n                  value={formData.client_nit}\n                  onChange={(e) => setFormData({ ...formData, client_nit: e.target.value })}\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"client_email\">Email</Label>\n                <Input\n                  id=\"client_email\"\n                  type=\"email\"\n                  value={formData.client_email}\n                  onChange={(e) => setFormData({ ...formData, client_email: e.target.value })}\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"client_phone\">Tel├®fono</Label>\n                <Input\n                  id=\"client_phone\"\n                  value={formData.client_phone}\n                  onChange={(e) => setFormData({ ...formData, client_phone: e.target.value })}\n                  className=\"mt-1\"\n                />\n              </div>\n              <div className=\"col-span-2\">\n                <Label htmlFor=\"client_address\">Direcci├│n</Label>\n                <Input\n                  id=\"client_address\"\n                  value={formData.client_address}\n                  onChange={(e) => setFormData({ ...formData, client_address: e.target.value })}\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"ciudad\">Ciudad *</Label>\n                <Input\n                  id=\"ciudad\"\n                  value={formData.ciudad}\n                  onChange={(e) => setFormData({ ...formData, ciudad: e.target.value })}\n                  required\n                  placeholder=\"Ej: C├║cuta\"\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"barrio\">Barrio *</Label>\n                <Input\n                  id=\"barrio\"\n                  value={formData.barrio}\n                  onChange={(e) => setFormData({ ...formData, barrio: e.target.value })}\n                  required\n                  placeholder=\"Ej: Centro\"\n                  className=\"mt-1\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Informaci├│n de Env├¡o</h3>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"guia\">N├║mero de Gu├¡a *</Label>\n                <Input\n                  id=\"guia\"\n                  value={formData.guia}\n                  onChange={(e) => setFormData({ ...formData, guia: e.target.value })}\n                  required\n                  placeholder=\"Ej: GUIA-2025-001\"\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"transportadora\">Transportadora *</Label>\n                <Select\n                  value={formData.transportadora}\n                  onValueChange={(value) => setFormData({ ...formData, transportadora: value })}\n                  required\n                >\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue placeholder=\"Seleccionar transportadora\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Servientrega\">Servientrega</SelectItem>\n                    <SelectItem value=\"Coordinadora\">Coordinadora</SelectItem>\n                    <SelectItem value=\"Interrapidisimo\">Interrapid├¡simo</SelectItem>\n                    <SelectItem value=\"Deprisa\">Deprisa</SelectItem>\n                    <SelectItem value=\"TCC\">TCC</SelectItem>\n                    <SelectItem value=\"Env├¡a\">Env├¡a</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Items</h3>\n              <Button type=\"button\" onClick={handleAddItem} size=\"sm\" variant=\"outline\">\n                <Plus className=\"h-4 w-4 mr-1\" />\n                Agregar Item\n              </Button>\n            </div>\n\n            <div className=\"space-y-3\">\n              {items.map((item, index) => (\n                <div key={index} className=\"flex gap-3 items-start p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex-[3]\">\n                    <Input\n                      placeholder=\"Nombre del producto (Ej: BALINERIA)\"\n                      value={item.description}\n                      onChange={(e) => handleItemChange(index, \"description\", e.target.value)}\n                      required\n                    />\n                  </div>\n                  <div className=\"flex-1\">\n                    <Input\n                      placeholder=\"Referencia\"\n                      value={item.reference}\n                      onChange={(e) => handleItemChange(index, \"reference\", e.target.value)}\n                    />\n                  </div>\n                  <div className=\"w-20\">\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Cant.\"\n                      min=\"1\"\n                      value={item.quantity}\n                      onChange={(e) => handleItemChange(index, \"quantity\", Number(e.target.value))}\n                      required\n                    />\n                  </div>\n                  <div className=\"w-32\">\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Precio\"\n                      min=\"0\"\n                      value={item.unit_price}\n                      onChange={(e) => handleItemChange(index, \"unit_price\", Number(e.target.value))}\n                      required\n                    />\n                  </div>\n                  <div className=\"w-32 flex items-center justify-end font-semibold text-sm\">\n                    {formatCurrency(item.quantity * item.unit_price)}\n                  </div>\n                  {items.length > 1 && (\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleRemoveItem(index)}\n                      className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4 space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-700\">Subtotal (sin IVA):</span>\n                <span className=\"font-semibold\">{formatCurrency(calculateSubtotal())}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-700\">IVA (19%):</span>\n                <span className=\"font-semibold\">{formatCurrency(calculateTax())}</span>\n              </div>\n              <div className=\"flex justify-between text-lg font-bold border-t border-amber-300 pt-2\">\n                <span className=\"text-gray-900\">Total:</span>\n                <span className=\"text-amber-600\">{formatCurrency(calculateTotal())}</span>\n              </div>\n              <p className=\"text-xs text-gray-600 mt-2\">* Los precios de los productos ya incluyen IVA</p>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Detalles de Pago</h3>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"due_date\">Fecha de Vencimiento</Label>\n                <Input\n                  id=\"due_date\"\n                  type=\"date\"\n                  value={formData.due_date}\n                  onChange={(e) => setFormData({ ...formData, due_date: e.target.value })}\n                  className=\"mt-1\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"payment_method\">M├®todo de Pago</Label>\n                <Select\n                  value={formData.payment_method}\n                  onValueChange={(value) => setFormData({ ...formData, payment_method: value })}\n                >\n                  <SelectTrigger className=\"mt-1\">\n                    <SelectValue placeholder=\"Seleccionar m├®todo\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"efectivo\">Efectivo</SelectItem>\n                    <SelectItem value=\"transferencia\">Transferencia</SelectItem>\n                    <SelectItem value=\"contraentrega\">Contraentrega (Cr├®dito)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"col-span-2\">\n                <Label htmlFor=\"notes\">Notas</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes}\n                  onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                  className=\"mt-1\"\n                  rows={3}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-3 pt-4 border-t\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)} disabled={isLoading}>\n              Cancelar\n            </Button>\n            <Button type=\"submit\" className=\"bg-amber-500 hover:bg-amber-600\" disabled={isLoading}>\n              {isLoading ? \"Creando...\" : \"Crear Factura\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/crm/PurchaseHistory.tsx",
        "content": "\"use client\"\nimport useSWR from \"swr\"\n\nconst fetcher = (u: string) => fetch(u).then((r) => r.json())\n\nexport default function PurchaseHistory({ phone }: { phone: string }) {\n  const { data, error } = useSWR<{\n    ok: boolean\n    data: { nombre?: string; historial: any[] }\n  }>(phone ? `/api/crm/customer/${encodeURIComponent(phone)}` : null, fetcher)\n\n  if (!phone) return <div className=\"text-sm text-neutral-500\">Sin tel├®fono</div>\n  if (error) return <div className=\"text-sm text-red-600\">No se encontr├│ historial</div>\n  if (!data) return <div className=\"text-sm text-neutral-500\">Cargando historialÔÇª</div>\n  const { data: c } = data\n\n  return (\n    <div className=\"rounded-2xl border border-[#D8BD80]/45 bg-white/95 shadow-[0_12px_36px_rgba(0,0,0,.06)] p-4 space-y-3\">\n      <div className=\"font-medium\">Historial de Compras</div>\n      <ul className=\"space-y-2\">\n        {c.historial?.length ? (\n          c.historial.map((h: any, i: number) => (\n            <li key={i} className=\"flex items-center justify-between text-sm border-b border-neutral-100 pb-2\">\n              <div>\n                <div className=\"font-medium\">{h.descripcion}</div>\n                <div className=\"text-neutral-500 text-xs\">\n                  {h.fecha} ÔÇó {h.numeroFactura}\n                </div>\n              </div>\n              <div className=\"font-semibold\">$ {Number(h.total).toLocaleString(\"es-CO\")}</div>\n            </li>\n          ))\n        ) : (\n          <li className=\"text-sm text-neutral-500\">Sin compras registradas</li>\n        )}\n      </ul>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/inventory/modals.tsx",
        "content": "\"use client\"\nimport { useState } from \"react\"\nimport type { Movement, MoveType, Product, Variant, Warehouse } from \"@/lib/inventory-types\"\n\nconst CATEGORIAS = [\n  \"CADENAS\",\n  \"ARETES\",\n  \"DIJES\",\n  \"PULSERAS\",\n  \"TOBILLERAS\",\n  \"MANILLAS\",\n  \"BALINES\",\n  \"ANILLOS\",\n  \"CANDONGAS\",\n  \"HERRAJES\",\n]\n\nexport default function InventoryModals(props: {\n  openProduct: boolean\n  product: Product | null\n  warehouses: Warehouse[]\n  onClose: () => void\n  onSave: (p: Product) => void\n  onDelete: (id: string) => void\n  openMovement: boolean\n  variant: Variant | null\n  onRegister: (m: Movement) => void\n}) {\n  return (\n    <>\n      {props.openProduct && props.product && <ProductModal {...props} />}\n      {props.openMovement && props.variant && <MovementModal {...props} />}\n    </>\n  )\n}\n\nfunction ProductModal({\n  product,\n  warehouses,\n  onClose,\n  onSave,\n  onDelete,\n}: {\n  product: Product\n  warehouses: Warehouse[]\n  onClose: () => void\n  onSave: (p: Product) => void\n  onDelete: (id: string) => void\n}) {\n  const [p, setP] = useState<Product>(product)\n  const [hasWarranty, setHasWarranty] = useState<boolean>(false)\n  const [warrantyImage, setWarrantyImage] = useState<File | null>(null)\n  const [costo, setCosto] = useState<number>(0)\n  const [precioVentaDetal, setPrecioVentaDetal] = useState<number>(0)\n  const [precioVentaMayor, setPrecioVentaMayor] = useState<number>(0)\n  const [showAdditionalMedida, setShowAdditionalMedida] = useState<boolean>(false)\n\n  const updateVariant = (id: string, patch: Partial<Variant>) => {\n    setP((prev) => ({ ...prev, variants: prev.variants.map((v) => (v.id === id ? { ...v, ...patch } : v)) }))\n  }\n\n  const variant = p.variants[0]\n\n  const requiresMedida =\n    p.category === \"ARETES\" ||\n    p.category === \"CANDONGAS\" ||\n    p.category === \"BALINES\" ||\n    p.category === \"ANILLOS\" ||\n    p.category === \"HERRAJES\" ||\n    p.category === \"DIJES\"\n  const requiresTamanoGrosor = p.category === \"CADENAS\" || p.category === \"PULSERAS\" || p.category === \"TOBILLERAS\"\n  const isManillas = p.category === \"MANILLAS\"\n\n  const gananciaDetal = precioVentaDetal - costo\n  const gananciaMayor = precioVentaMayor - costo\n\n  return (\n    <div className=\"fixed inset-0 z-50 grid place-items-center bg-black/30 p-4\">\n      <div className=\"max-h-[90vh] w-full max-w-3xl overflow-auto rounded-2xl border bg-white p-4\">\n        <div className=\"mb-3 flex items-center justify-between\">\n          <div className=\"text-lg font-semibold\">Producto</div>\n          <button className=\"text-xs text-neutral-500\" onClick={onClose}>\n            Cerrar\n          </button>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-3\">\n          <input\n            className=\"rounded-xl border px-3 py-2\"\n            placeholder=\"Nombre *\"\n            required\n            value={p.name}\n            onChange={(e) => setP({ ...p, name: e.target.value })}\n          />\n          <select\n            className=\"rounded-xl border px-3 py-2\"\n            value={p.category || \"\"}\n            onChange={(e) => setP({ ...p, category: e.target.value })}\n            required\n          >\n            <option value=\"\">Seleccionar categor├¡a *</option>\n            {CATEGORIAS.map((cat) => (\n              <option key={cat} value={cat}>\n                {cat}\n              </option>\n            ))}\n          </select>\n\n          <input\n            className=\"rounded-xl border px-3 py-2\"\n            placeholder=\"Marca *\"\n            required\n            value={p.brand || \"\"}\n            onChange={(e) => setP({ ...p, brand: e.target.value })}\n          />\n          <input\n            className=\"col-span-2 rounded-xl border px-3 py-2\"\n            placeholder=\"Referencia (SKU) *\"\n            required\n            value={variant.sku}\n            onChange={(e) => updateVariant(variant.id, { sku: e.target.value })}\n          />\n\n          <div className=\"col-span-2\">\n            <label className=\"flex items-center gap-2\">\n              <input type=\"checkbox\" checked={hasWarranty} onChange={(e) => setHasWarranty(e.target.checked)} />\n              <span className=\"text-sm font-medium\">GARANTIA</span>\n            </label>\n          </div>\n\n          {hasWarranty && (\n            <>\n              <input\n                className=\"rounded-xl border px-3 py-2\"\n                placeholder=\"Cantidad *\"\n                type=\"number\"\n                required\n                value={(variant as any).warrantyQuantity || \"\"}\n                onChange={(e) =>\n                  updateVariant(variant.id, { warrantyQuantity: e.target.value ? +e.target.value : undefined } as any)\n                }\n              />\n              <input\n                className=\"col-span-2 rounded-xl border px-3 py-2\"\n                placeholder=\"Motivo de garant├¡a *\"\n                required\n                value={(variant as any).warrantyReason || \"\"}\n                onChange={(e) => updateVariant(variant.id, { warrantyReason: e.target.value } as any)}\n              />\n              <div className=\"col-span-2\">\n                <label className=\"block text-sm font-medium mb-1\">Evidencia (fotograf├¡a) *</label>\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  required\n                  className=\"w-full rounded-xl border px-3 py-2\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0]\n                    if (file) {\n                      setWarrantyImage(file)\n                      updateVariant(variant.id, { warrantyImage: file.name } as any)\n                    }\n                  }}\n                />\n                {warrantyImage && (\n                  <p className=\"mt-1 text-xs text-neutral-600\">Archivo seleccionado: {warrantyImage.name}</p>\n                )}\n              </div>\n            </>\n          )}\n\n          {!hasWarranty && (\n            <>\n              <input\n                className=\"col-span-2 rounded-xl border px-3 py-2\"\n                placeholder=\"Cantidad a agregar *\"\n                type=\"number\"\n                required\n                value={(variant as any).initialQuantity || \"\"}\n                onChange={(e) =>\n                  updateVariant(variant.id, { initialQuantity: e.target.value ? +e.target.value : undefined } as any)\n                }\n              />\n              <input\n                className=\"col-span-2 rounded-xl border px-3 py-2\"\n                placeholder=\"COSTO *\"\n                type=\"number\"\n                required\n                value={costo || \"\"}\n                onChange={(e) => setCosto(e.target.value ? +e.target.value : 0)}\n              />\n              <input\n                className=\"rounded-xl border px-3 py-2\"\n                placeholder=\"PRECIO DE VENTA DETAL *\"\n                type=\"number\"\n                required\n                value={precioVentaDetal || \"\"}\n                onChange={(e) => setPrecioVentaDetal(e.target.value ? +e.target.value : 0)}\n              />\n              <div className=\"rounded-xl border px-3 py-2 bg-neutral-50 flex items-center text-neutral-600\">\n                <span className=\"text-sm\">Ganancia Detal: ${gananciaDetal.toFixed(2)}</span>\n              </div>\n              <input\n                className=\"rounded-xl border px-3 py-2\"\n                placeholder=\"PRECIO DE VENTA MAYOR *\"\n                type=\"number\"\n                required\n                value={precioVentaMayor || \"\"}\n                onChange={(e) => setPrecioVentaMayor(e.target.value ? +e.target.value : 0)}\n              />\n              <div className=\"rounded-xl border px-3 py-2 bg-neutral-50 flex items-center text-neutral-600\">\n                <span className=\"text-sm\">Ganancia Mayor: ${gananciaMayor.toFixed(2)}</span>\n              </div>\n            </>\n          )}\n        </div>\n\n        {!hasWarranty && requiresMedida && (\n          <div className=\"mt-3\">\n            <input\n              className=\"w-full rounded-xl border px-3 py-2\"\n              placeholder=\"Medida (mm) *\"\n              type=\"number\"\n              required\n              value={(variant as any).medidaMm || \"\"}\n              onChange={(e) => updateVariant(variant.id, { medidaMm: e.target.value } as any)}\n            />\n          </div>\n        )}\n\n        {!hasWarranty && isManillas && (\n          <div className=\"mt-3 space-y-3\">\n            <input\n              className=\"w-full rounded-xl border px-3 py-2\"\n              placeholder=\"Medida del bal├¡n (mm) *\"\n              type=\"number\"\n              required\n              value={(variant as any).medidaBalinMm || \"\"}\n              onChange={(e) => updateVariant(variant.id, { medidaBalinMm: e.target.value } as any)}\n            />\n            {showAdditionalMedida && (\n              <input\n                className=\"w-full rounded-xl border px-3 py-2\"\n                placeholder=\"Medida adicional (mm)\"\n                type=\"number\"\n                value={(variant as any).medidaAdicionalMm || \"\"}\n                onChange={(e) => updateVariant(variant.id, { medidaAdicionalMm: e.target.value } as any)}\n              />\n            )}\n            <button\n              type=\"button\"\n              className=\"text-sm text-blue-600 hover:underline\"\n              onClick={() => setShowAdditionalMedida(!showAdditionalMedida)}\n            >\n              {showAdditionalMedida ? \"- Quitar medida adicional\" : \"+ Agregar otra medida (mm)\"}\n            </button>\n          </div>\n        )}\n\n        {!hasWarranty && requiresTamanoGrosor && (\n          <div className=\"mt-3 grid grid-cols-2 gap-3\">\n            <input\n              className=\"rounded-xl border px-3 py-2\"\n              placeholder=\"Tama├▒o *\"\n              required\n              value={(variant as any).tamano || \"\"}\n              onChange={(e) => updateVariant(variant.id, { tamano: e.target.value } as any)}\n            />\n            <input\n              className=\"rounded-xl border px-3 py-2\"\n              placeholder=\"Grosor *\"\n              required\n              value={(variant as any).grosor || \"\"}\n              onChange={(e) => updateVariant(variant.id, { grosor: e.target.value } as any)}\n            />\n          </div>\n        )}\n\n        {!hasWarranty && (\n          <div className=\"mt-4 flex items-center gap-2\">\n            <button\n              type=\"button\"\n              className={`rounded-xl px-4 py-2 text-sm font-medium transition-colors ${\n                variant.active ? \"bg-green-600 text-white\" : \"bg-white border border-neutral-300 text-neutral-600\"\n              }`}\n              onClick={() => updateVariant(variant.id, { active: true })}\n            >\n              Activo\n            </button>\n            <button\n              type=\"button\"\n              className={`rounded-xl px-4 py-2 text-sm font-medium transition-colors ${\n                !variant.active ? \"bg-red-600 text-white\" : \"bg-white border border-neutral-300 text-neutral-600\"\n              }`}\n              onClick={() => updateVariant(variant.id, { active: false })}\n            >\n              Desactivado\n            </button>\n          </div>\n        )}\n\n        <div className=\"mt-3 flex justify-end gap-2\">\n          <button className=\"rounded-xl border px-3 py-2 text-sm\" onClick={() => onDelete(p.id)}>\n            Eliminar producto\n          </button>\n          <button className=\"rounded-xl bg-black px-3 py-2 text-sm text-white\" onClick={() => onSave(p)}>\n            Guardar\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction MovementModal({\n  variant,\n  warehouses,\n  onClose,\n  onRegister,\n}: {\n  variant: Variant\n  warehouses: Warehouse[]\n  onClose: () => void\n  onRegister: (m: Movement) => void\n}) {\n  const [type, setType] = useState<MoveType>(\"in\")\n  const [qty, setQty] = useState<number>(1)\n  const [fromWh, setFromWh] = useState<string>(warehouses[0].id)\n  const [toWh, setToWh] = useState<string>(warehouses[0].id)\n  const [unitCost, setUnitCost] = useState<number>(variant.cost)\n  const [note, setNote] = useState(\"\")\n\n  const submit = () => {\n    const m: Movement = {\n      id: \"\",\n      date: new Date().toISOString(),\n      sku: variant.sku,\n      productId: \"NA\",\n      variantId: variant.id,\n      type,\n      qty,\n      fromWh: type === \"out\" || type === \"transfer\" ? fromWh : undefined,\n      toWh: type === \"in\" || type === \"adjust\" || type === \"transfer\" ? toWh : undefined,\n      unitCost: type === \"in\" || type === \"adjust\" ? unitCost : undefined,\n      note,\n    }\n    onRegister(m)\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-50 grid place-items-center bg-black/30 p-4\">\n      <div className=\"w-full max-w-md rounded-2xl border bg-white p-4\">\n        <div className=\"mb-3 flex items-center justify-between\">\n          <div className=\"text-lg font-semibold\">Movimiento ÔÇö {variant.sku}</div>\n          <button className=\"text-xs text-neutral-500\" onClick={onClose}>\n            Cerrar\n          </button>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-2\">\n          <select\n            className=\"rounded-xl border px-3 py-2\"\n            value={type}\n            onChange={(e) => setType(e.target.value as MoveType)}\n          >\n            <option value=\"in\">Entrada</option>\n            <option value=\"out\">Salida</option>\n            <option value=\"adjust\">Ajuste</option>\n            <option value=\"transfer\">Transferencia</option>\n            <option value=\"warranty\">Garant├¡a</option>\n          </select>\n          <input\n            type=\"number\"\n            min={1}\n            className=\"rounded-xl border px-3 py-2\"\n            value={qty}\n            onChange={(e) => setQty(+e.target.value)}\n          />\n          {(type === \"out\" || type === \"transfer\") && (\n            <select className=\"rounded-xl border px-3 py-2\" value={fromWh} onChange={(e) => setFromWh(e.target.value)}>\n              {warehouses.map((w) => (\n                <option key={w.id} value={w.id}>\n                  {w.name}\n                </option>\n              ))}\n            </select>\n          )}\n          {(type === \"in\" || type === \"adjust\" || type === \"transfer\") && (\n            <select className=\"rounded-xl border px-3 py-2\" value={toWh} onChange={(e) => setToWh(e.target.value)}>\n              {warehouses.map((w) => (\n                <option key={w.id} value={w.id}>\n                  {w.name}\n                </option>\n              ))}\n            </select>\n          )}\n          {(type === \"in\" || type === \"adjust\") && (\n            <input\n              type=\"number\"\n              className=\"rounded-xl border px-3 py-2\"\n              placeholder=\"Costo unitario\"\n              value={unitCost}\n              onChange={(e) => setUnitCost(+e.target.value)}\n            />\n          )}\n        </div>\n\n        <textarea\n          className=\"mt-2 w-full rounded-xl border px-3 py-2\"\n          rows={3}\n          placeholder=\"NotaÔÇª\"\n          value={note}\n          onChange={(e) => setNote(e.target.value)}\n        />\n\n        <div className=\"mt-3 flex justify-end gap-2\">\n          <button className=\"rounded-xl border px-3 py-2 text-sm\" onClick={onClose}>\n            Cancelar\n          </button>\n          <button className=\"rounded-xl bg-black px-3 py-2 text-sm text-white\" onClick={submit}>\n            Registrar\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/inventory/movements-drawer.tsx",
        "content": "\"use client\"\nimport inv from \"@/adapters/inventory\"\n\nexport default function MovementsDrawer({ open, onClose }: { open: boolean; onClose: () => void }) {\n  const movs = inv.listMovements()\n\n  if (!open) return null\n  return (\n    <div className=\"fixed inset-y-0 right-0 z-40 w-full max-w-lg overflow-auto border-l bg-white p-4\">\n      <div className=\"mb-3 flex items-center justify-between\">\n        <div className=\"text-lg font-semibold\">Kardex</div>\n        <button className=\"text-xs text-neutral-500\" onClick={onClose}>\n          Cerrar\n        </button>\n      </div>\n      <table className=\"w-full text-sm\">\n        <thead className=\"bg-neutral-50 text-neutral-600\">\n          <tr>\n            <th className=\"px-3 py-2 text-left\">Fecha</th>\n            <th className=\"px-3 py-2 text-left\">SKU</th>\n            <th className=\"px-3 py-2 text-left\">Tipo</th>\n            <th className=\"px-3 py-2 text-right\">Cant.</th>\n            <th className=\"px-3 py-2 text-right\">Costo</th>\n            <th className=\"px-3 py-2 text-left\">Bodega</th>\n            <th className=\"px-3 py-2 text-left\">Nota</th>\n          </tr>\n        </thead>\n        <tbody>\n          {movs.map((m) => (\n            <tr key={m.id} className=\"border-t\">\n              <td className=\"px-3 py-2\">{new Date(m.date).toLocaleString()}</td>\n              <td className=\"px-3 py-2\">{m.sku}</td>\n              <td className=\"px-3 py-2\">{m.type}</td>\n              <td className=\"px-3 py-2 text-right\">{m.qty}</td>\n              <td className=\"px-3 py-2 text-right\">\n                {typeof m.unitCost === \"number\" ? `$${m.unitCost.toLocaleString()}` : \"ÔÇö\"}\n              </td>\n              <td className=\"px-3 py-2\">\n                {m.type === \"in\" && m.toWh}\n                {m.type === \"out\" && m.fromWh}\n                {m.type === \"adjust\" && (m.toWh || m.fromWh)}\n                {m.type === \"transfer\" && `${m.fromWh} ÔåÆ ${m.toWh}`}\n              </td>\n              <td className=\"px-3 py-2\">{m.note || \"ÔÇö\"}</td>\n            </tr>\n          ))}\n          {movs.length === 0 && (\n            <tr>\n              <td colSpan={7} className=\"px-6 py-12 text-center text-neutral-400\">\n                Sin movimientos\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/inventory/reorder-aside.tsx",
        "content": "\"use client\"\nimport type { Product } from \"@/lib/inventory-types\"\n\nexport default function ReorderAside({ products }: { products: Product[] }) {\n  const alerts = products\n    .flatMap((p) =>\n      p.variants\n        .filter((v) => v.enabled)\n        .map((v) => {\n          const stock = Object.values(v.stockByWh).reduce((a, b) => a + b, 0)\n          const low = stock <= (v.reorderLevel ?? 0)\n          return { p, v, stock, low }\n        }),\n    )\n    .filter((x) => x.low)\n\n  if (alerts.length === 0) return null\n\n  return (\n    <div className=\"rounded-2xl border bg-amber-50/40 p-4\">\n      <div className=\"mb-2 text-sm font-semibold\">Alertas de reposici├│n</div>\n      <div className=\"grid grid-cols-1 gap-2 lg:grid-cols-2\">\n        {alerts.map(({ p, v, stock }) => (\n          <div key={v.id} className=\"rounded-xl border bg-white p-3\">\n            <div className=\"text-sm font-medium\">{p.name}</div>\n            <div className=\"text-xs text-neutral-500\">\n              {v.name} ÔÇö {v.sku}\n            </div>\n            <div className=\"mt-2 flex items-center justify-between text-sm\">\n              <span>\n                Stock: <b>{stock}</b>\n              </span>\n              <span className=\"rounded-full bg-amber-100 px-2 py-0.5 text-[12px] text-amber-800\">\n                Reordenar ÔëÑ {v.reorderLevel ?? 0}\n              </span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/invoice-view-dialog.tsx",
        "content": "\"use client\"\n\nimport { useRef, useState } from \"react\"\nimport { Dialog, DialogContent, DialogDescription } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Printer, X, Loader2, Download } from \"lucide-react\"\n\ninterface Invoice {\n  id: string\n  invoice_number: string\n  client_name: string\n  client_nit?: string\n  client_email?: string\n  client_phone?: string\n  client_address?: string\n  issue_date: string\n  due_date?: string\n  subtotal: number\n  tax_rate: number\n  tax_amount: number\n  total: number\n  status: string\n  payment_method?: string\n  notes?: string\n  invoice_items: Array<{\n    description: string\n    quantity: number\n    unit_price: number\n    total: number\n  }>\n}\n\ninterface InvoiceViewDialogProps {\n  invoice: Invoice | null\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  onRefresh: () => void\n}\n\nexport function InvoiceViewDialog({ invoice, open, onOpenChange, onRefresh }: InvoiceViewDialogProps) {\n  const printRef = useRef<HTMLDivElement>(null)\n  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false)\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat(\"es-CO\", {\n      style: \"currency\",\n      currency: \"COP\",\n      minimumFractionDigits: 0,\n    }).format(amount)\n  }\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"\"\n    try {\n      return new Date(dateString).toLocaleDateString(\"es-CO\", {\n        day: \"2-digit\",\n        month: \"2-digit\",\n        year: \"numeric\",\n      })\n    } catch {\n      return \"\"\n    }\n  }\n\n  const getInvoiceNumber = (invoiceNumber?: string) => {\n    return invoiceNumber || \"\"\n  }\n\n  const handlePrint = () => {\n    const printContent = printRef.current\n    if (!printContent) return\n\n    const printWindow = window.open(\"\", \"\", \"width=800,height=600\")\n    if (!printWindow) return\n\n    printWindow.document.write(`\n      <html>\n        <head>\n          <title>Factura ${invoice?.invoice_number || \"\"}</title>\n          <style>\n            @page { margin: 15mm; size: letter; }\n            * { margin: 0; padding: 0; box-sizing: border-box; }\n            body { \n              font-family: Arial, sans-serif; \n              font-size: 11pt;\n              line-height: 1.4;\n              color: #000;\n              background: white;\n            }\n            .invoice-container { \n              max-width: 210mm; \n              margin: 0 auto; \n              background: white;\n              padding: 10mm;\n            }\n            \n            /* Encabezado */\n            .border-b-2 { border-bottom: 2px solid #000; }\n            .border-black { border-color: #000; }\n            .pb-4 { padding-bottom: 1rem; }\n            .mb-6 { margin-bottom: 1.5rem; }\n            .mb-4 { margin-bottom: 1rem; }\n            .mt-3 { margin-top: 0.75rem; }\n            .mt-2 { margin-top: 0.5rem; }\n            .mt-1 { margin-top: 0.25rem; }\n            .mt-12 { margin-top: 3rem; }\n            .pt-1 { padding-top: 0.25rem; }\n            .pt-2 { padding-top: 0.5rem; }\n            \n            .flex { display: flex; }\n            .justify-between { justify-content: space-between; }\n            .items-start { align-items: flex-start; }\n            .text-5xl { font-size: 3rem; line-height: 1; }\n            .font-black { font-weight: 900; }\n            .tracking-wider { letter-spacing: 0.05em; }\n            .text-gray-900 { color: #111827; }\n            .text-xs { font-size: 0.75rem; line-height: 1rem; }\n            .text-sm { font-size: 0.875rem; line-height: 1.25rem; }\n            .leading-relaxed { line-height: 1.625; }\n            .leading-tight { line-height: 1.25; }\n            .font-bold { font-weight: 700; }\n            .font-semibold { font-weight: 600; }\n            .text-right { text-align: right; }\n            .text-center { text-align: center; }\n            .text-left { text-align: left; }\n            \n            /* Garant├¡a */\n            .border { border: 1px solid; }\n            .border-gray-300 { border-color: #d1d5db; }\n            .p-2 { padding: 0.5rem; }\n            \n            /* Cliente */\n            .space-y-2 > * + * { margin-top: 0.5rem; }\n            .space-y-1 > * + * { margin-top: 0.25rem; }\n            .grid { display: grid; }\n            .grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }\n            .grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }\n            .gap-4 { gap: 1rem; }\n            .w-24 { width: 6rem; }\n            .w-1\\\\/2 { width: 50%; }\n            .w-5\\\\/12 { width: 41.666667%; }\n            .flex-1 { flex: 1 1 0%; }\n            .border-b { border-bottom-width: 1px; }\n            .border-b-2 { border-bottom-width: 2px; }\n            .border-t { border-top-width: 1px; }\n            .border-t-2 { border-top-width: 2px; }\n            .border-gray-400 { border-color: #9ca3af; }\n            \n            /* Tabla */\n            table { \n              width: 100%; \n              border-collapse: collapse; \n              border: 2px solid #000;\n            }\n            th, td { \n              border: 1px solid #000; \n              padding: 0.5rem; \n            }\n            th { \n              background: white; \n              font-weight: 700;\n            }\n            .text-gray-500 { color: #6b7280; }\n            \n            /* Totales */\n            .pb-1 { padding-bottom: 0.25rem; }\n            \n            .no-print { display: none !important; }\n          </style>\n        </head>\n        <body>\n          ${printContent.innerHTML}\n        </body>\n      </html>\n    `)\n\n    printWindow.document.close()\n    printWindow.focus()\n    setTimeout(() => {\n      printWindow.print()\n      printWindow.close()\n    }, 250)\n  }\n\n  const handleGeneratePDF = async () => {\n    if (!invoice?.invoice_number) return\n\n    setIsGeneratingPDF(true)\n    try {\n      const response = await fetch(\"/api/invoices/generate-pdf\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          invoiceNumber: invoice.invoice_number,\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(\"Error generando PDF\")\n      }\n\n      const data = await response.json()\n\n      // Abrir el PDF en una nueva pesta├▒a\n      if (data.url) {\n        window.open(data.url, \"_blank\")\n      }\n\n      // Refrescar los datos para mostrar la URL del PDF\n      onRefresh()\n    } catch (error) {\n      console.error(\"Error generando PDF:\", error)\n      alert(\"Error al generar el PDF de la factura\")\n    } finally {\n      setIsGeneratingPDF(false)\n    }\n  }\n\n  const getStatusLabel = (status: string) => {\n    const labels = {\n      paid: \"PAGADA\",\n      pending: \"PENDIENTE\",\n      overdue: \"VENCIDA\",\n      cancelled: \"CANCELADA\",\n    }\n    return labels[status as keyof typeof labels] || \"PENDIENTE\"\n  }\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      paid: \"bg-green-100 text-green-800 border-green-300\",\n      pending: \"bg-yellow-100 text-yellow-800 border-yellow-300\",\n      overdue: \"bg-red-100 text-red-800 border-red-300\",\n      cancelled: \"bg-gray-100 text-gray-800 border-gray-300\",\n    }\n    return colors[status as keyof typeof colors] || \"bg-yellow-100 text-yellow-800 border-yellow-300\"\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[95vh] overflow-y-auto p-0\">\n        <DialogDescription className=\"sr-only\">\n          Vista detallada de la factura con informaci├│n del cliente, productos y totales\n        </DialogDescription>\n\n        <div className=\"sticky top-0 z-10 bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between no-print\">\n          <h2 className=\"text-xl font-bold text-gray-900\">Vista de Factura</h2>\n          <div className=\"flex gap-2\">\n            {invoice && (\n              <>\n                <Button onClick={handlePrint} size=\"sm\" className=\"bg-amber-600 hover:bg-amber-700\">\n                  <Printer className=\"h-4 w-4 mr-2\" />\n                  Imprimir\n                </Button>\n                <Button\n                  onClick={handleGeneratePDF}\n                  size=\"sm\"\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                  disabled={isGeneratingPDF}\n                >\n                  {isGeneratingPDF ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Generando...\n                    </>\n                  ) : (\n                    <>\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Guardar PDF\n                    </>\n                  )}\n                </Button>\n              </>\n            )}\n            <Button onClick={() => onOpenChange(false)} size=\"sm\" variant=\"ghost\">\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {!invoice ? (\n          <div className=\"flex items-center justify-center py-20\">\n            <div className=\"text-center\">\n              <Loader2 className=\"h-10 w-10 animate-spin text-amber-600 mx-auto mb-4\" />\n              <p className=\"text-gray-600 text-lg\">Cargando factura...</p>\n            </div>\n          </div>\n        ) : (\n          <div ref={printRef} className=\"invoice-container bg-white p-8\">\n            {/* Encabezado con logo y tipo de documento */}\n            <div className=\"border-b-2 border-black pb-4 mb-6\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <h1 className=\"text-5xl font-black tracking-wider text-gray-900\">GALLE</h1>\n                  <div className=\"mt-3 text-xs leading-relaxed\">\n                    <p className=\"font-bold\">COMERCIALIZADORA GALLE18K ORO LAMINADO Y</p>\n                    <p className=\"font-bold\">ACCESORIOS SAS</p>\n                    <p className=\"mt-2\">\n                      <span className=\"font-semibold\">NIT:</span> 901357041-4 RESPONSABLE DE IVA\n                    </p>\n                    <p className=\"mt-1\">VILLA DEL ROSARIO - NORTE DE SANTANDER</p>\n                    <p className=\"mt-1\">\n                      <span className=\"font-semibold\">TEL├ëFONOS:</span> LINEA DETAL: 300 5551856 LINEA MAYOR: 304\n                      3676388\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-bold\">ORDEN DE VENTA</p>\n                  <p className=\"text-sm font-bold mt-1\">No. {invoice.invoice_number || \"\"}</p>\n                  <p className=\"text-sm mt-1\">{formatDate(invoice.issue_date)}</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Garant├¡a y pol├¡ticas */}\n            <div className=\"text-[9px] leading-tight mb-4 border border-gray-300 p-2\">\n              <p className=\"font-semibold\">\n                GARANT├ìA 2 A├æOS POR CAMBIO DE COLOR O DEFECTO DE FABRICA. NO APLICA A MODIFICACIONES O DA├æOS A LA PRENDA\n                POR USO\n              </p>\n            </div>\n\n            {/* Informaci├│n del cliente */}\n            <div className=\"mb-6 space-y-2\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"flex\">\n                  <span className=\"font-bold text-sm w-24\">NOMBRE:</span>\n                  <span className=\"text-sm flex-1 border-b border-gray-400\">{invoice.client_name}</span>\n                </div>\n                <div className=\"flex\">\n                  <span className=\"font-bold text-sm w-24\">CELULAR:</span>\n                  <span className=\"text-sm flex-1 border-b border-gray-400\">{invoice.client_phone || \"\"}</span>\n                </div>\n              </div>\n              <div className=\"flex\">\n                <span className=\"font-bold text-sm w-24\">DIRECCI├ôN:</span>\n                <span className=\"text-sm flex-1 border-b border-gray-400\">{invoice.client_address || \"\"}</span>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"flex\">\n                  <span className=\"font-bold text-sm w-24\">C├ëDULA:</span>\n                  <span className=\"text-sm flex-1 border-b border-gray-400\">{invoice.client_nit || \"\"}</span>\n                </div>\n                <div className=\"flex\">\n                  <span className=\"font-bold text-sm w-24\">CIUDAD:</span>\n                  <span className=\"text-sm flex-1 border-b border-gray-400\"></span>\n                </div>\n              </div>\n              <div className=\"flex\">\n                <span className=\"font-bold text-sm w-24\">ASESORA:</span>\n                <span className=\"text-sm flex-1 border-b border-gray-400\">KARLA GARCIA</span>\n              </div>\n            </div>\n\n            {/* Tabla de productos */}\n            <div className=\"mb-6\">\n              <table className=\"w-full border-collapse border-2 border-black\">\n                <thead>\n                  <tr className=\"bg-white\">\n                    <th className=\"border border-black px-2 py-2 text-left text-xs font-bold\">REF</th>\n                    <th className=\"border border-black px-2 py-2 text-left text-xs font-bold\">DESCRIPCI├ôN</th>\n                    <th className=\"border border-black px-2 py-2 text-center text-xs font-bold\">UND</th>\n                    <th className=\"border border-black px-2 py-2 text-center text-xs font-bold\">IVA 13%</th>\n                    <th className=\"border border-black px-2 py-2 text-right text-xs font-bold\">PRECIO BASE</th>\n                    <th className=\"border border-black px-2 py-2 text-right text-xs font-bold\">PRECIO NETO</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {invoice.invoice_items && Array.isArray(invoice.invoice_items) && invoice.invoice_items.length > 0 ? (\n                    invoice.invoice_items.map((item, index) => (\n                      <tr key={index}>\n                        <td className=\"border border-black px-2 py-2 text-xs\">{index + 1}</td>\n                        <td className=\"border border-black px-2 py-2 text-xs\">{item.description}</td>\n                        <td className=\"border border-black px-2 py-2 text-center text-xs\">{item.quantity}</td>\n                        <td className=\"border border-black px-2 py-2 text-center text-xs\">\n                          {formatCurrency(item.unit_price * item.quantity * (invoice.tax_rate / 100))}\n                        </td>\n                        <td className=\"border border-black px-2 py-2 text-right text-xs\">\n                          {formatCurrency(item.unit_price)}\n                        </td>\n                        <td className=\"border border-black px-2 py-2 text-right text-xs font-semibold\">\n                          {formatCurrency(item.total)}\n                        </td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan={6} className=\"border border-black px-2 py-8 text-center text-xs text-gray-500\">\n                        No hay items en esta factura\n                      </td>\n                    </tr>\n                  )}\n                  {invoice.invoice_items &&\n                    invoice.invoice_items.length < 8 &&\n                    Array.from({ length: 8 - invoice.invoice_items.length }).map((_, i) => (\n                      <tr key={`empty-${i}`}>\n                        <td className=\"border border-black px-2 py-2 text-xs\">&nbsp;</td>\n                        <td className=\"border border-black px-2 py-2 text-xs\"></td>\n                        <td className=\"border border-black px-2 py-2 text-xs text-center\">-</td>\n                        <td className=\"border border-black px-2 py-2 text-xs text-center\">$ -</td>\n                        <td className=\"border border-black px-2 py-2 text-xs text-right\">$ -</td>\n                        <td className=\"border border-black px-2 py-2 text-xs text-right\">$ -</td>\n                      </tr>\n                    ))}\n                </tbody>\n              </table>\n            </div>\n\n            {/* Totales y forma de pago */}\n            <div className=\"flex justify-between mb-6\">\n              <div className=\"w-1/2\">\n                <div className=\"border-2 border-black p-2\">\n                  <p className=\"text-xs font-bold\">FORMA DE PAGO: CONTRA_ENTREGA.</p>\n                </div>\n              </div>\n              <div className=\"w-5/12\">\n                <div className=\"space-y-1\">\n                  <div className=\"flex justify-between border-b border-black pb-1\">\n                    <span className=\"text-sm font-bold\">SUBTOTAL</span>\n                    <span className=\"text-sm font-bold\">{formatCurrency(invoice.subtotal)}</span>\n                  </div>\n                  <div className=\"flex justify-between border-b border-black pb-1\">\n                    <span className=\"text-sm font-bold\">IMPUESTOS</span>\n                    <span className=\"text-sm font-bold\">{formatCurrency(invoice.tax_amount)}</span>\n                  </div>\n                  <div className=\"flex justify-between border-b-2 border-black pb-1 pt-1\">\n                    <span className=\"text-sm font-bold\">TOTAL NETO</span>\n                    <span className=\"text-sm font-bold\">{formatCurrency(invoice.total)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Redes sociales */}\n            <div className=\"text-center mb-4\">\n              <p className=\"text-xs font-semibold\">S├¡guenos en Instagram @galleorolaminado18k</p>\n            </div>\n\n            {/* Firmas */}\n            <div className=\"grid grid-cols-3 gap-4 mb-6\">\n              <div className=\"text-center\">\n                <div className=\"border-t-2 border-black pt-1 mt-12\">\n                  <p className=\"text-xs font-bold\">FIRMA ASESORA</p>\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"border-t-2 border-black pt-1 mt-12\">\n                  <p className=\"text-xs font-bold\">FIRMA AUDITOR</p>\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"border-t-2 border-black pt-1 mt-12\">\n                  <p className=\"text-xs font-bold\">FIRMA SUPERVISOR</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Nota legal */}\n            <div className=\"text-[8px] leading-tight text-center border-t border-gray-300 pt-2\">\n              <p className=\"font-semibold\">\n                RECUERDA NO APLICAR RETENCI├ôN EN LA FUENTE YA QUE SOMOS BENEFICIARIOS SEZE\n              </p>\n              <p className=\"mt-1\">SI DESEAS APLICAR RETENCI├ôN EN LA FUENTE COMUNICATE CON TU ASESORA</p>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/invoices-table.tsx",
        "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Eye, Printer, MoreVertical } from \"lucide-react\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\nimport { InvoiceViewDialog } from \"@/components/invoice-view-dialog\"\n\ninterface Invoice {\n  invoice_number: string\n  client_name: string\n  client_nit?: string\n  issue_date: string\n  due_date?: string\n  subtotal: number\n  tax_amount: number\n  total: number\n  status: \"ENTREGADO\" | \"PENDIENTE PAGO\" | \"PAGADO\"\n  payment_method?: string\n  guia?: string\n  transportadora?: string\n  ciudad?: string\n  barrio?: string\n  invoice_items: Array<{\n    description: string\n    reference?: string\n    quantity: number\n    unit_price: number\n    total: number\n  }>\n}\n\ninterface InvoicesTableProps {\n  invoices: Invoice[]\n  onRefresh: () => void\n}\n\nexport function InvoicesTable({ invoices, onRefresh }: InvoicesTableProps) {\n  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null)\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false)\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat(\"es-CO\", {\n      style: \"currency\",\n      currency: \"COP\",\n      minimumFractionDigits: 0,\n    }).format(amount)\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"es-CO\", {\n      day: \"2-digit\",\n      month: \"short\",\n      year: \"numeric\",\n    })\n  }\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      PAGADO: { label: \"Pagado\", className: \"bg-green-100 text-green-800 border-green-300\" },\n      \"PENDIENTE PAGO\": { label: \"Pendiente Pago\", className: \"bg-orange-100 text-orange-800 border-orange-300\" },\n      ENTREGADO: { label: \"Entregado\", className: \"bg-blue-100 text-blue-800 border-blue-300\" },\n    }\n\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig[\"PENDIENTE PAGO\"]\n\n    return (\n      <Badge variant=\"outline\" className={`${config.className} font-medium text-[10px] px-1.5 py-0.5`}>\n        {config.label}\n      </Badge>\n    )\n  }\n\n  const handleViewInvoice = (invoice: Invoice) => {\n    setSelectedInvoice(invoice)\n    setIsViewDialogOpen(true)\n  }\n\n  const handlePrintInvoice = (invoice: Invoice) => {\n    setSelectedInvoice(invoice)\n    setIsViewDialogOpen(true)\n    // El di├ílogo manejar├í la impresi├│n\n  }\n\n  const handleUpdateStatus = async (invoiceNumber: string, newStatus: string) => {\n    try {\n      const response = await fetch(`/api/invoices/${invoiceNumber}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          status: newStatus,\n          payment_date: newStatus === \"PAGADO\" ? new Date().toISOString() : null,\n        }),\n      })\n\n      if (response.ok) {\n        onRefresh()\n      }\n    } catch (error) {\n      console.error(\"[v0] Error updating invoice status:\", error)\n    }\n  }\n\n  return (\n    <>\n      <div className=\"rounded-lg border border-gray-200 bg-white shadow-sm overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full text-[10px]\">\n            <thead className=\"bg-gray-50 border-b border-gray-200\">\n              <tr>\n                <th className=\"px-2 py-2 text-center text-[10px] font-semibold text-gray-700 uppercase tracking-tight\">\n                  N├║mero\n                </th>\n                <th className=\"px-2 py-2 text-center text-[10px] font-semibold text-gray-700 uppercase tracking-tight\">\n                  Cliente\n                </th>\n                <th className=\"px-2 py-2 text-center text-[10px] font-semibold text-gray-700 uppercase tracking-tight\">\n                  Gu├¡a\n                </th>\n                <th className=\"px-2 py-2 text-center text-[10px] font-semibold text-gray-700 uppercase tracking-tight\">\n                  Transp.\n                </th>\n                <th className=\"px-2 py-2 text-center text-[10px] font-semibold text-gray-700 uppercase tracking-tight\">\n                  Ciudad\n                </th>\n                <th className=\"px-2 py-2 text-center text-[10px] font-semibold text-gray-700 uppercase tracking-tight\">\n                  Emisi├│n\n                </th>\n                <th className=\"px-2 py-2 text-center text-[10px] font-semibold text-gray-700 uppercase tracking-tight\">\n                  Venc.\n                </th>\n                <th className=\"px-2 py-2 text-center text-[10px] font-semibold text-gray-700 uppercase tracking-tight\">\n                  Subtotal\n                </th>\n                <th className=\"px-2 py-2 text-center text-[10px] font-semibold text-gray-700 uppercase tracking-tight\">\n                  IVA\n                </th>\n                <th className=\"px-2 py-2 text-center text-[10px] font-semibold text-gray-700 uppercase tracking-tight\">\n                  Total\n                </th>\n                <th className=\"px-2 py-2 text-center text-[10px] font-semibold text-gray-700 uppercase tracking-tight\">\n                  Estado\n                </th>\n                <th className=\"px-2 py-2 text-center text-[10px] font-semibold text-gray-700 uppercase tracking-tight\">\n                  M├®todo\n                </th>\n                <th className=\"px-2 py-2 text-center text-[10px] font-semibold text-gray-700 uppercase tracking-tight\">\n                  Acciones\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200\">\n              {invoices.map((invoice) => (\n                <tr key={invoice.invoice_number} className=\"hover:bg-gray-50 transition-colors\">\n                  <td className=\"px-2 py-2 text-center text-[10px] font-semibold text-amber-600 whitespace-nowrap\">\n                    {invoice.invoice_number}\n                  </td>\n                  <td className=\"px-2 py-2 text-center\">\n                    <div className=\"text-[10px] font-medium text-gray-900\">{invoice.client_name}</div>\n                    {invoice.client_nit && <div className=\"text-[9px] text-gray-500\">NIT: {invoice.client_nit}</div>}\n                  </td>\n                  <td className=\"px-2 py-2 text-center text-[10px] text-gray-700 whitespace-nowrap\">\n                    {invoice.guia || \"-\"}\n                  </td>\n                  <td className=\"px-2 py-2 text-center text-[10px] text-gray-700\">{invoice.transportadora || \"-\"}</td>\n                  <td className=\"px-2 py-2 text-center text-[10px] text-gray-700\">{invoice.ciudad || \"-\"}</td>\n                  <td className=\"px-2 py-2 text-center text-[10px] text-gray-700 whitespace-nowrap\">\n                    {formatDate(invoice.issue_date)}\n                  </td>\n                  <td className=\"px-2 py-2 text-center text-[10px] text-gray-700 whitespace-nowrap\">\n                    {invoice.due_date ? formatDate(invoice.due_date) : \"-\"}\n                  </td>\n                  <td className=\"px-2 py-2 text-center text-[10px] font-medium text-gray-900 whitespace-nowrap\">\n                    {formatCurrency(invoice.subtotal)}\n                  </td>\n                  <td className=\"px-2 py-2 text-center text-[10px] text-gray-700 whitespace-nowrap\">\n                    {formatCurrency(invoice.tax_amount)}\n                  </td>\n                  <td className=\"px-2 py-2 text-center text-[10px] font-bold text-gray-900 whitespace-nowrap\">\n                    {formatCurrency(invoice.total)}\n                  </td>\n                  <td className=\"px-2 py-2 text-center\">{getStatusBadge(invoice.status)}</td>\n                  <td className=\"px-2 py-2 text-center text-[10px] text-gray-700 capitalize\">\n                    {invoice.payment_method || \"-\"}\n                  </td>\n                  <td className=\"px-2 py-2\">\n                    <div className=\"flex items-center justify-center gap-0.5\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleViewInvoice(invoice)}\n                        className=\"h-7 w-7 p-0 text-gray-600 hover:text-amber-600 hover:bg-amber-50\"\n                      >\n                        <Eye className=\"h-3.5 w-3.5\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handlePrintInvoice(invoice)}\n                        className=\"h-7 w-7 p-0 text-gray-600 hover:text-amber-600 hover:bg-amber-50\"\n                      >\n                        <Printer className=\"h-3.5 w-3.5\" />\n                      </Button>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-7 w-7 p-0 text-gray-600 hover:text-amber-600 hover:bg-amber-50\"\n                          >\n                            <MoreVertical className=\"h-3.5 w-3.5\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => handleUpdateStatus(invoice.invoice_number, \"PAGADO\")}>\n                            Marcar como pagado\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            onClick={() => handleUpdateStatus(invoice.invoice_number, \"PENDIENTE PAGO\")}\n                          >\n                            Marcar como pendiente pago\n                          </DropdownMenuItem>\n                          <DropdownMenuItem onClick={() => handleUpdateStatus(invoice.invoice_number, \"ENTREGADO\")}>\n                            Marcar como entregado\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {invoices.length === 0 && (\n          <div className=\"py-12 text-center\">\n            <p className=\"text-sm text-gray-500\">No se encontraron facturas</p>\n          </div>\n        )}\n      </div>\n\n      {selectedInvoice && (\n        <InvoiceViewDialog\n          invoice={selectedInvoice}\n          open={isViewDialogOpen}\n          onOpenChange={setIsViewDialogOpen}\n          onRefresh={onRefresh}\n        />\n      )}\n    </>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/luxury-sales-dashboard.tsx",
        "content": "import type React from \"react\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  TrendingUp,\n  DollarSign,\n  ReceiptText,\n  ShoppingCart,\n  PackageCheck,\n  UserPlus,\n  UsersRound,\n  Percent,\n  BarChart3,\n  MapPin,\n  Clock3,\n} from \"lucide-react\"\nimport {\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  ResponsiveContainer,\n} from \"recharts\"\n\n/**\n * ÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇö\n * LUXURY SALES DASHBOARD Ô£¿ (v2 ÔÇö Ultra Luxury / brillante / est├®tico)\n *\n * Concepto visual:\n *  - Fondo blanco puro, tipograf├¡a negra, acentos dorado champagne.\n *  - Tarjetas con \"glass-lux\": blur + brillo sutil + borde con gradiente dorado.\n *  - Jerarqu├¡a: Hero KPI (Ventas del Mes) XL, KPIs premium, m├│dulos CRM.\n *  - L├¡nea de ventas con trazo dorado y puntos suaves.\n *  - Pie de m├®todos con vidrio pulido.\n *\n * Pasa tus datos reales por props; existen mocks por defecto.\n * ÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇöÔÇö\n */\n\nexport type KPI = {\n  label: string\n  value: string | number\n  delta?: string\n  icon?: React.ReactNode\n}\n\nexport type MayoristasStats = {\n  joyeria: { nuevos: number; recurrentes: number }\n  balineria: { nuevos: number; recurrentes: number }\n}\n\nexport type GeographyItem = { ciudad: string; ventas: number; ticket: number; share: number }\n\nexport type PaymentBreakdown = { metodo: string; monto: number }\n\nexport interface LuxurySalesDashboardProps {\n  ventasMesUSD: number\n  margenUtilidadPromedio: number // 0ÔÇô1\n  tasaConversion: number // 0ÔÇô1\n  ticketPromedioUSD: number\n  pendienteMiPaqueteUSD: number\n  mayoristas: MayoristasStats\n  serieVentasDiarias: { fecha: string; ventas: number }[]\n  seriePagosPorMetodo: PaymentBreakdown[]\n  ventasRecientes: { id: string; cliente: string; producto: string; total: number; estado: string }[]\n  riesgoFuga: { cliente: string; diasSinComprar: number; ciudad?: string }[]\n  rankingCiudades: GeographyItem[]\n}\n\n// Paleta\nconst GOLD = \"#D8BD80\" // champagne m├ís brillante\nconst GOLD_SOFT = \"#E8D7A5\"\nconst INK = \"#0B0B0C\"\nconst GLASS = \"bg-white/80 backdrop-blur-xl\"\n\n// Mocks\nconst fallback: LuxurySalesDashboardProps = {\n  ventasMesUSD: 371000000,\n  margenUtilidadPromedio: 0.42,\n  tasaConversion: 0.68,\n  ticketPromedioUSD: 39000,\n  pendienteMiPaqueteUSD: 23,\n  mayoristas: {\n    joyeria: { nuevos: 12, recurrentes: 34 },\n    balineria: { nuevos: 8, recurrentes: 27 },\n  },\n  serieVentasDiarias: [\n    { fecha: \"L\", ventas: 45_000 },\n    { fecha: \"M\", ventas: 52_000 },\n    { fecha: \"X\", ventas: 48_000 },\n    { fecha: \"J\", ventas: 61_000 },\n    { fecha: \"V\", ventas: 56_000 },\n    { fecha: \"S\", ventas: 69_000 },\n    { fecha: \"D\", ventas: 43_000 },\n  ],\n  seriePagosPorMetodo: [\n    { metodo: \"Transferencia\", monto: 45 },\n    { metodo: \"Efectivo\", monto: 30 },\n    { metodo: \"Contraentrega\", monto: 25 },\n  ],\n  ventasRecientes: [\n    { id: \"VT-008\", cliente: \"Diego Torres\", producto: \"Pulsera\", total: 280000, estado: \"Pagado\" },\n    { id: \"VT-007\", cliente: \"Valentina Cruz\", producto: \"Anillo Compromiso\", total: 850000, estado: \"Pendiente\" },\n    { id: \"VT-006\", cliente: \"Sof├¡a Ram├¡rez\", producto: \"Cadena\", total: 190000, estado: \"Pagado\" },\n  ],\n  riesgoFuga: [\n    { cliente: \"Ana Mart├¡nez\", diasSinComprar: 341, ciudad: \"Cali\" },\n    { cliente: \"Patricia Silva\", diasSinComprar: 314, ciudad: \"Cartagena\" },\n    { cliente: \"Laura P├®rez\", diasSinComprar: 284, ciudad: \"Pereira\" },\n  ],\n  rankingCiudades: [\n    { ciudad: \"Bogot├í\", ventas: 45_000_000, ticket: 288_461, share: 32.5 },\n    { ciudad: \"Medell├¡n\", ventas: 32_000_000, ticket: 326_530, share: 23.1 },\n    { ciudad: \"Cali\", ventas: 18_500_000, ticket: 276_119, share: 13.4 },\n  ],\n}\n\nfunction Peso({ value }: { value: number }) {\n  return <span className=\"tabular-nums\">${value.toLocaleString(\"es-CO\")}</span>\n}\n\nfunction GradientCard({ children }: { children: React.ReactNode }) {\n  return (\n    <div className={`group rounded-[28px] p-[1.5px] bg-gradient-to-r from-[#f7f4ea] via-[${GOLD}] to-[#f7f4ea]`}>\n      <div\n        className={`rounded-[26px] ${GLASS} border border-white/60 shadow-[0_20px_60px_rgba(0,0,0,.10)] transition-all duration-300 ease-out group-hover:-translate-y-1 group-hover:shadow-[0_30px_80px_rgba(0,0,0,.16)]`}\n      >\n        {children}\n      </div>\n    </div>\n  )\n}\n\nfunction Kpi({ label, value, delta, icon }: KPI) {\n  return (\n    <GradientCard>\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-neutral-500\">{label}</span>\n          <div className=\"text-neutral-900\">{icon}</div>\n        </div>\n        <div className=\"mt-3 flex items-end justify-between\">\n          <div className=\"text-4xl font-semibold tracking-tight\">{value}</div>\n          {delta && <Badge className={`rounded-full border-0 bg-[${GOLD}]/90 text-black`}>{delta}</Badge>}\n        </div>\n      </div>\n    </GradientCard>\n  )\n}\n\nexport default function LuxurySalesDashboard(props: Partial<LuxurySalesDashboardProps>) {\n  const data = { ...fallback, ...props } as LuxurySalesDashboardProps\n  const PIE_COLORS = [GOLD, INK, GOLD_SOFT]\n\n  return (\n    <div className=\"min-h-screen bg-white text-[#0B0B0C]\">\n      {/* HERO */}\n      <section className=\"px-6 lg:px-10 pt-10\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-[32px] md:text-[40px] font-semibold tracking-tight leading-tight\">\n              <span className={`text-transparent bg-clip-text bg-gradient-to-r from-[#111] via-[#111] to-[${GOLD}]`}>\n                DASHBOARD GALLE\n              </span>\n            </h1>\n            <p className=\"text-sm text-neutral-500 mt-1\">RESUMEN DEL MES ACTUAL</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" className=\"rounded-full border-neutral-200 bg-transparent\">\n              Imprimir\n            </Button>\n            <Button className={`rounded-full bg-[${GOLD}] text-black hover:bg-[${GOLD}]/90`}>Compartir</Button>\n          </div>\n        </div>\n\n        {/* KPI HERO (VENTAS) */}\n        <div className=\"mt-8 grid grid-cols-1 lg:grid-cols-12 gap-6\">\n          <div className=\"lg:col-span-5\">\n            <GradientCard>\n              <div className=\"p-8\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-sm text-neutral-500\">Ventas del Mes</div>\n                  <ShoppingCart className=\"w-5 h-5\" />\n                </div>\n                <div className=\"mt-3 text-5xl md:text-6xl font-semibold\">\n                  <Peso value={data.ventasMesUSD} />\n                </div>\n                <div className=\"mt-4\">\n                  <Badge className=\"rounded-full bg-black text-white border-0\">\n                    <TrendingUp className=\"w-3 h-3 mr-1\" /> +12.5% vs mes anterior\n                  </Badge>\n                </div>\n              </div>\n            </GradientCard>\n          </div>\n\n          {/* KPIs PREMIUM */}\n          <div className=\"lg:col-span-7 grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-6\">\n            <Kpi\n              label=\"Margen Promedio\"\n              value={`${Math.round(data.margenUtilidadPromedio * 100)}%`}\n              delta={\"+3.2 pp\"}\n              icon={<ReceiptText className=\"w-4 h-4\" />}\n            />\n            <Kpi\n              label=\"Tasa de Conversi├│n\"\n              value={`${Math.round(data.tasaConversion * 100)}%`}\n              delta={\"-2.1 pp\"}\n              icon={<Percent className=\"w-4 h-4\" />}\n            />\n            <Kpi\n              label=\"Ticket Promedio\"\n              value={<Peso value={data.ticketPromedioUSD} />}\n              delta={\"+8.3%\"}\n              icon={<DollarSign className=\"w-4 h-4\" />}\n            />\n          </div>\n        </div>\n      </section>\n\n      {/* SEGUNDA BANDA: Mayoristas + Pendientes Mipaquete */}\n      <section className=\"px-6 lg:px-10 mt-8 grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        <GradientCard>\n          <div className=\"p-6\">\n            <div className=\"text-sm text-neutral-500 flex items-center gap-2\">\n              <UsersRound className=\"w-4 h-4\" /> Nuevos Mayoristas Joyer├¡a\n            </div>\n            <div className=\"mt-2 text-5xl font-semibold\">{data.mayoristas.joyeria.nuevos}</div>\n            <p className=\"text-xs text-neutral-500 mt-2\">Este mes</p>\n          </div>\n        </GradientCard>\n        <GradientCard>\n          <div className=\"p-6\">\n            <div className=\"text-sm text-neutral-500 flex items-center gap-2\">\n              <UsersRound className=\"w-4 h-4\" /> Recurrentes Joyer├¡a\n            </div>\n            <div className=\"mt-2 text-5xl font-semibold\">{data.mayoristas.joyeria.recurrentes}</div>\n            <p className=\"text-xs text-neutral-500 mt-2\">Este mes</p>\n          </div>\n        </GradientCard>\n        <GradientCard>\n          <div className=\"p-6\">\n            <div className=\"text-sm text-neutral-500 flex items-center gap-2\">\n              <UserPlus className=\"w-4 h-4\" /> Nuevos Mayoristas Baliner├¡a\n            </div>\n            <div className=\"mt-2 text-5xl font-semibold\">{data.mayoristas.balineria.nuevos}</div>\n            <p className=\"text-xs text-neutral-500 mt-2\">Este mes</p>\n          </div>\n        </GradientCard>\n        <GradientCard>\n          <div className=\"p-6\">\n            <div className=\"text-sm text-neutral-500 flex items-center gap-2\">\n              <UserPlus className=\"w-4 h-4\" /> Recurrentes Baliner├¡a\n            </div>\n            <div className=\"mt-2 text-5xl font-semibold\">{data.mayoristas.balineria.recurrentes}</div>\n            <p className=\"text-xs text-neutral-500 mt-2\">Este mes</p>\n          </div>\n        </GradientCard>\n      </section>\n\n      {/* TERCERA BANDA: Gr├íficas principales */}\n      <section className=\"px-6 lg:px-10 mt-8 grid grid-cols-1 xl:grid-cols-3 gap-6\">\n        {/* L├¡nea ventas */}\n        <GradientCard>\n          <div className=\"p-6 h-[320px]\">\n            <div className=\"text-sm text-neutral-500\">Ventas Diarias (7 d├¡as)</div>\n            <div className=\"mt-3 h-[260px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={data.serieVentasDiarias} margin={{ top: 10, right: 10, left: -20, bottom: 0 }}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#EEE\" />\n                  <XAxis dataKey=\"fecha\" tick={{ fontSize: 12 }} stroke=\"#9CA3AF\" />\n                  <YAxis tick={{ fontSize: 12 }} stroke=\"#9CA3AF\" />\n                  <Tooltip formatter={(v: number) => `$${v.toLocaleString(\"es-CO\")}`} />\n                  <Line type=\"monotone\" dataKey=\"ventas\" stroke={GOLD} strokeWidth={3.5} dot={{ r: 3 }} />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        </GradientCard>\n\n        {/* Pie m├®todos */}\n        <GradientCard>\n          <div className=\"p-6 h-[320px]\">\n            <div className=\"text-sm text-neutral-500\">M├®todos de Pago (distribuci├│n)</div>\n            <div className=\"mt-3 h-[260px]\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={data.seriePagosPorMetodo}\n                    dataKey=\"monto\"\n                    nameKey=\"metodo\"\n                    innerRadius={60}\n                    outerRadius={90}\n                    paddingAngle={3}\n                    labelLine\n                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                  >\n                    {data.seriePagosPorMetodo.map((_, i) => (\n                      <Cell key={i} fill={PIE_COLORS[i % PIE_COLORS.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip formatter={(v: number) => `${v}%`} />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        </GradientCard>\n\n        {/* Pendientes MiPaquete + Riesgo Fuga */}\n        <GradientCard>\n          <div className=\"p-6 h-[320px] flex flex-col\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-sm text-neutral-500 flex items-center gap-2\">\n                <PackageCheck className=\"w-4 h-4\" /> Pendiente MiPaquete\n              </div>\n              <Badge className=\"rounded-full bg-amber-100 text-amber-900 border-0\">5 urgentes</Badge>\n            </div>\n            <div className=\"mt-2 text-6xl font-semibold\">{data.pendienteMiPaqueteUSD}</div>\n            <div className=\"mt-5 text-sm text-neutral-500\">Riesgo de Fuga</div>\n            <ul className=\"mt-2 space-y-2 flex-1 overflow-auto pr-1 max-h-[170px]\">\n              {data.riesgoFuga.slice(0, 3).map((r, i) => (\n                <li key={i} className=\"flex items-center justify-between rounded-xl bg-neutral-50 px-4 py-2\">\n                  <div>\n                    <p className=\"font-medium\">{r.cliente}</p>\n                    <p className=\"text-xs text-neutral-500 flex items-center gap-1\">\n                      <MapPin className=\"w-3 h-3\" /> {r.ciudad ?? \"ÔÇö\"}\n                    </p>\n                  </div>\n                  <Badge variant=\"secondary\" className=\"rounded-full bg-black text-white border-0\">\n                    <Clock3 className=\"w-3 h-3 mr-1\" /> {r.diasSinComprar} d├¡as\n                  </Badge>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </GradientCard>\n      </section>\n\n      {/* CUARTA BANDA: Ranking + ├Ültimas ventas */}\n      <section className=\"px-6 lg:px-10 mt-8 grid grid-cols-1 xl:grid-cols-3 gap-6 pb-12\">\n        <GradientCard>\n          <div className=\"p-6\">\n            <div className=\"text-sm text-neutral-500 flex items-center gap-2\">\n              <BarChart3 className=\"w-4 h-4\" /> Ranking de Ciudades\n            </div>\n            <div className=\"mt-3 overflow-hidden rounded-2xl border border-white/60\">\n              <table className=\"w-full text-sm\">\n                <thead className=\"bg-neutral-50\">\n                  <tr>\n                    <th className=\"text-center px-4 py-3\">#</th>\n                    <th className=\"text-left px-4 py-3\">Ciudad</th>\n                    <th className=\"text-center px-4 py-3\">Ventas</th>\n                    <th className=\"text-center px-4 py-3\">Ticket</th>\n                    <th className=\"text-center px-4 py-3\">%</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.rankingCiudades.map((c, i) => (\n                    <tr key={i} className=\"odd:bg-white even:bg-neutral-50\">\n                      <td className=\"px-4 py-3 text-center\">{i + 1}</td>\n                      <td className=\"px-4 py-3 text-left\">\n                        <div className=\"flex items-center gap-2\">\n                          <MapPin className=\"h-4 w-4 text-[#D8BD80]\" />\n                          <span>{c.ciudad}</span>\n                        </div>\n                      </td>\n                      <td className=\"px-4 py-3 text-center\">\n                        <Peso value={c.ventas} />\n                      </td>\n                      <td className=\"px-4 py-3 text-center\">\n                        <Peso value={c.ticket} />\n                      </td>\n                      <td className=\"px-4 py-3 text-center\">{c.share}%</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </GradientCard>\n\n        <GradientCard>\n          <div className=\"p-6\">\n            <div className=\"text-sm text-neutral-500\">├Ültimas Ventas</div>\n            <ul className=\"mt-3 space-y-3\">\n              {data.ventasRecientes.map((v) => (\n                <li key={v.id} className=\"flex items-center justify-between rounded-xl bg-neutral-50 px-4 py-3\">\n                  <div>\n                    <p className=\"font-medium\">{v.cliente}</p>\n                    <p className=\"text-xs text-neutral-500\">\n                      {v.producto} ÔÇó {v.id}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-semibold\">\n                      <Peso value={v.total} />\n                    </div>\n                    <div className=\"text-xs text-neutral-500\">{v.estado}</div>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </GradientCard>\n\n        {/* CTA Mini */}\n        <GradientCard>\n          <div className=\"p-6 flex h-full items-center justify-between\">\n            <div>\n              <h3 className=\"text-xl font-semibold\">Brilla m├ís este mes Ô£¿</h3>\n              <p className=\"text-sm text-neutral-500 mt-1\">Exporta el informe y comparte resultados con tu equipo.</p>\n            </div>\n            <Button className={`rounded-full bg-[${GOLD}] text-black hover:bg-[${GOLD}]/90`}>Exportar</Button>\n          </div>\n        </GradientCard>\n      </section>\n\n      <footer className=\"pb-10 text-center text-xs text-neutral-400\">\n        GALLE ÔÇó Ultra Luxury Dashboard ÔÇó Tailwind + shadcn/ui + Recharts\n      </footer>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/sales-table.tsx",
        "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { ImageIcon, Upload, FileText, Package } from \"lucide-react\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { InvoiceViewDialog } from \"@/components/invoice-view-dialog\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\n\ninterface Sale {\n  id: string\n  sale_id: string\n  client_name: string\n  sale_date: string\n  products: any[]\n  total: number\n  status: string\n  payment_method: string\n  seller_name: string\n  photo_evidence?: string\n  photo_uploaded_at?: string // agregado campo para fecha de carga\n  shipping_company?: string\n  tracking_number?: string\n  mipaquete_code?: string\n  mipaquete_status?: string\n  mipaquete_carrier?: string\n  is_return: boolean\n  paid_by_mipaquete?: boolean\n  payment_date?: string\n  invoice_number?: string // agregado campo para n├║mero de factura\n}\n\ninterface SalesTableProps {\n  sales: Sale[]\n  onRefresh: () => void\n  showPaymentCheckbox?: boolean\n}\n\nexport function SalesTable({ sales, onRefresh, showPaymentCheckbox = false }: SalesTableProps) {\n  const [selectedImage, setSelectedImage] = useState<string | null>(null)\n  const [updatingPayment, setUpdatingPayment] = useState<string | null>(null)\n  const [uploadingSale, setUploadingSale] = useState<string | null>(null)\n  const [selectedInvoice, setSelectedInvoice] = useState<any | null>(null)\n  const [invoiceDialogOpen, setInvoiceDialogOpen] = useState(false)\n  const [loadingInvoice, setLoadingInvoice] = useState(false)\n  const [trackingDialogOpen, setTrackingDialogOpen] = useState(false)\n  const [trackingData, setTrackingData] = useState<any>(null)\n  const [loadingTracking, setLoadingTracking] = useState(false)\n  const [trackingError, setTrackingError] = useState<string | null>(null)\n  const [selectedMpCode, setSelectedMpCode] = useState<string | null>(null)\n\n  const handlePaymentToggle = async (saleId: string, currentStatus: boolean) => {\n    setUpdatingPayment(saleId)\n    try {\n      const response = await fetch(`/api/sales/${saleId}/payment`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ paid: !currentStatus }),\n      })\n\n      if (response.ok) {\n        onRefresh()\n      }\n    } catch (error) {\n      console.error(\"[v0] Error updating payment status:\", error)\n    } finally {\n      setUpdatingPayment(null)\n    }\n  }\n\n  const handleImageUpload = async (saleId: string, file: File) => {\n    setUploadingSale(saleId)\n    try {\n      const formData = new FormData()\n      formData.append(\"file\", file)\n      formData.append(\"saleId\", saleId)\n\n      const response = await fetch(\"/api/upload\", {\n        method: \"POST\",\n        body: formData,\n      })\n\n      if (response.ok) {\n        onRefresh()\n      }\n    } catch (error) {\n      console.error(\"[v0] Error uploading image:\", error)\n    } finally {\n      setUploadingSale(null)\n    }\n  }\n\n  const handleViewInvoice = async (invoiceNumber: string) => {\n    setLoadingInvoice(true)\n    try {\n      const response = await fetch(`/api/invoices/${invoiceNumber}`)\n      if (response.ok) {\n        const result = await response.json()\n        const invoice = result.data || result\n        console.log(\"[v0] Invoice loaded:\", invoice)\n        setSelectedInvoice(invoice)\n        setInvoiceDialogOpen(true)\n      } else {\n        console.error(\"[v0] Error loading invoice: HTTP\", response.status)\n      }\n    } catch (error) {\n      console.error(\"[v0] Error loading invoice:\", error)\n    } finally {\n      setLoadingInvoice(false)\n    }\n  }\n\n  const handleViewTracking = async (mpCode: string) => {\n    setSelectedMpCode(mpCode)\n    setTrackingDialogOpen(true)\n    setLoadingTracking(true)\n    setTrackingError(null)\n    setTrackingData(null)\n\n    try {\n      const response = await fetch(\"/api/mipaquete/tracking\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ mpCode }),\n      })\n\n      const result = await response.json()\n\n      if (!response.ok || !result.ok) {\n        setTrackingError(result.error || \"No se pudo obtener el tracking\")\n      } else {\n        setTrackingData(result.data)\n      }\n    } catch (error) {\n      console.error(\"[v0] Error fetching tracking:\", error)\n      setTrackingError(\"Error al consultar el tracking\")\n    } finally {\n      setLoadingTracking(false)\n    }\n  }\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat(\"es-CO\", {\n      style: \"currency\",\n      currency: \"COP\",\n      minimumFractionDigits: 0,\n    }).format(amount)\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"es-CO\", {\n      day: \"2-digit\",\n      month: \"short\",\n      year: \"numeric\",\n    })\n  }\n\n  const getStatusBadge = (sale: Sale) => {\n    const normalizedStatus = sale.status.toLowerCase().trim()\n\n    let displayText = \"\"\n    let colorClasses = \"\"\n\n    if (normalizedStatus === \"pagado\") {\n      displayText = \"Pagado\"\n      colorClasses = \"bg-green-100 text-green-800 border border-green-300\"\n    } else if (normalizedStatus === \"pendiente pago\" || normalizedStatus === \"pendiente\") {\n      displayText = \"Pendiente Pago\"\n      colorClasses = \"bg-orange-100 text-orange-800 border border-orange-300\"\n    } else if (normalizedStatus === \"devolucion\" || normalizedStatus === \"devoluci├│n\") {\n      displayText = \"Devoluci├│n\"\n      colorClasses = \"bg-red-100 text-red-800 border border-red-300\"\n    } else {\n      displayText = \"Pendiente Pago\"\n      colorClasses = \"bg-orange-100 text-orange-800 border border-orange-300\"\n    }\n\n    return (\n      <span className={`inline-flex rounded-full px-2 py-1 text-[10px] font-medium whitespace-nowrap ${colorClasses}`}>\n        {displayText}\n      </span>\n    )\n  }\n\n  const getPaymentMethodLabel = (method: string) => {\n    const labels: Record<string, string> = {\n      efectivo: \"Efectivo\",\n      transferencia: \"Transferencia\",\n      contraentrega: \"Contraentrega\",\n    }\n    return labels[method] || method\n  }\n\n  const formatUploadDate = (dateString?: string) => {\n    if (!dateString) return null\n    const date = new Date(dateString)\n    const day = date.getDate().toString().padStart(2, \"0\")\n    const month = date.toLocaleDateString(\"es-CO\", { month: \"short\" }).toUpperCase().replace(\".\", \"\")\n    const year = date.getFullYear()\n    return `${day}/${month}/${year}`\n  }\n\n  return (\n    <>\n      <div className=\"overflow-hidden rounded-lg border border-gray-200 bg-white shadow-sm\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full text-xs\">\n            <thead className=\"border-b border-gray-200 bg-gray-50\">\n              <tr>\n                {showPaymentCheckbox && (\n                  <th className=\"px-2 py-2 text-center text-[11px] font-semibold uppercase tracking-wider text-gray-600\">\n                    Pagado\n                  </th>\n                )}\n                <th className=\"px-2 py-2 text-center text-[11px] font-semibold uppercase tracking-wider text-gray-600\">\n                  ID\n                </th>\n                <th className=\"px-2 py-2 text-center text-[11px] font-semibold uppercase tracking-wider text-gray-600\">\n                  Cliente\n                </th>\n                <th className=\"px-2 py-2 text-center text-[11px] font-semibold uppercase tracking-wider text-gray-600\">\n                  Fecha\n                </th>\n                <th className=\"px-2 py-2 text-center text-[11px] font-semibold uppercase tracking-wider text-gray-600\">\n                  Productos\n                </th>\n                <th className=\"px-2 py-2 text-center text-[11px] font-semibold uppercase tracking-wider text-gray-600\">\n                  Total\n                </th>\n                <th className=\"px-2 py-2 text-center text-[11px] font-semibold uppercase tracking-wider text-gray-600\">\n                  Estado\n                </th>\n                <th className=\"px-2 py-2 text-center text-[11px] font-semibold uppercase tracking-wider text-gray-600\">\n                  M├®todo Pago\n                </th>\n                <th className=\"px-2 py-2 text-center text-[11px] font-semibold uppercase tracking-wider text-gray-600\">\n                  Transportadora\n                </th>\n                <th className=\"px-2 py-2 text-center text-[11px] font-semibold uppercase tracking-wider text-gray-600\">\n                  Gu├¡a\n                </th>\n                <th className=\"px-2 py-2 text-center text-[11px] font-semibold uppercase tracking-wider text-gray-600\">\n                  Evidencia\n                </th>\n                <th className=\"px-2 py-2 text-center text-[11px] font-semibold uppercase tracking-wider text-gray-600\">\n                  Vendedor\n                </th>\n                <th className=\"px-2 py-2 text-center text-[11px] font-semibold uppercase tracking-wider text-gray-600\">\n                  Factura\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-100\">\n              {sales.map((sale) => (\n                <tr key={sale.id} className=\"hover:bg-gray-50 transition-colors\">\n                  {showPaymentCheckbox && (\n                    <td className=\"px-2 py-2 text-center\">\n                      <div className=\"flex justify-center\">\n                        <Checkbox\n                          checked={sale.paid_by_mipaquete || false}\n                          onCheckedChange={() => handlePaymentToggle(sale.id, sale.paid_by_mipaquete || false)}\n                          disabled={updatingPayment === sale.id}\n                          className=\"border-gray-300 data-[state=checked]:bg-amber-500 data-[state=checked]:border-amber-500\"\n                        />\n                      </div>\n                    </td>\n                  )}\n                  <td className=\"px-2 py-2 text-center font-semibold text-gray-900\">{sale.sale_id}</td>\n                  <td className=\"px-2 py-2 text-center text-gray-700\">{sale.client_name}</td>\n                  <td className=\"px-2 py-2 text-center text-gray-500\">{formatDate(sale.sale_date)}</td>\n                  <td className=\"px-2 py-2 text-center text-gray-700\">\n                    {sale.products[0]?.name || \"N/A\"}\n                    {sale.products.length > 1 && (\n                      <span className=\"ml-1 text-[10px] text-gray-400\">(+{sale.products.length - 1})</span>\n                    )}\n                  </td>\n                  <td className=\"px-2 py-2 text-center font-semibold text-gray-900 whitespace-nowrap\">\n                    {formatCurrency(sale.total)}\n                  </td>\n                  <td className=\"px-2 py-2 text-center\">{getStatusBadge(sale)}</td>\n                  <td className=\"px-2 py-2 text-center text-gray-700\">{getPaymentMethodLabel(sale.payment_method)}</td>\n                  <td className=\"px-2 py-2 text-center text-gray-700\">\n                    {sale.mipaquete_carrier || sale.shipping_company || \"-\"}\n                  </td>\n                  <td className=\"px-2 py-2\">\n                    <div className=\"flex flex-col items-center gap-1\">\n                      {sale.photo_evidence && (\n                        <div className=\"flex items-center gap-2\">\n                          <button\n                            onClick={() => setSelectedImage(sale.photo_evidence!)}\n                            className=\"flex items-center gap-1 text-amber-600 hover:text-amber-700 transition-colors\"\n                          >\n                            <ImageIcon className=\"h-3.5 w-3.5\" />\n                            <span className=\"text-[11px]\">Ver</span>\n                          </button>\n                          {sale.photo_uploaded_at && (\n                            <span className=\"text-[10px] text-gray-500 font-medium\">\n                              {formatUploadDate(sale.photo_uploaded_at)}\n                            </span>\n                          )}\n                        </div>\n                      )}\n                      <label className=\"flex items-center gap-1 text-gray-400 hover:text-amber-600 cursor-pointer transition-colors\">\n                        <Upload className=\"h-3.5 w-3.5\" />\n                        <span className=\"text-[11px]\">\n                          {uploadingSale === sale.id ? \"...\" : sale.photo_evidence ? \"Reemplazar\" : \"Subir\"}\n                        </span>\n                        <input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          className=\"hidden\"\n                          disabled={uploadingSale === sale.id}\n                          onChange={(e) => {\n                            const file = e.target.files?.[0]\n                            if (file) handleImageUpload(sale.id, file)\n                          }}\n                        />\n                      </label>\n                    </div>\n                  </td>\n                  <td className=\"px-2 py-2 text-center text-gray-700\">{sale.seller_name}</td>\n                  <td className=\"px-2 py-2 text-center\">\n                    {sale.invoice_number ? (\n                      <button\n                        onClick={() => handleViewInvoice(sale.invoice_number!)}\n                        disabled={loadingInvoice}\n                        className=\"inline-flex items-center gap-1 text-amber-600 hover:text-amber-700 transition-colors font-mono text-[11px] font-semibold\"\n                      >\n                        <FileText className=\"h-3.5 w-3.5\" />\n                        <span className=\"font-normal not-italic\">Ver</span>\n                        {sale.invoice_number}\n                      </button>\n                    ) : (\n                      <span className=\"text-gray-400 text-[11px]\">Sin factura</span>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {selectedInvoice && (\n        <InvoiceViewDialog\n          invoice={selectedInvoice}\n          open={invoiceDialogOpen}\n          onOpenChange={setInvoiceDialogOpen}\n          onRefresh={onRefresh}\n        />\n      )}\n\n      {selectedImage && (\n        <div\n          className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/70 p-4\"\n          onClick={() => setSelectedImage(null)}\n        >\n          <div className=\"relative max-h-[90vh] max-w-4xl\">\n            <img\n              src={selectedImage || \"/placeholder.svg\"}\n              alt=\"Evidencia fotogr├ífica\"\n              className=\"rounded-lg shadow-2xl\"\n            />\n            <button\n              onClick={() => setSelectedImage(null)}\n              className=\"absolute -top-4 -right-4 flex h-10 w-10 items-center justify-center rounded-full bg-white text-gray-900 hover:bg-gray-100 shadow-lg font-bold\"\n            >\n              Ô£ò\n            </button>\n          </div>\n        </div>\n      )}\n\n      <Dialog open={trackingDialogOpen} onOpenChange={setTrackingDialogOpen}>\n        <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Package className=\"h-5 w-5 text-amber-600\" />\n              Tracking: {selectedMpCode}\n            </DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            {loadingTracking ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600\"></div>\n              </div>\n            ) : trackingError || !trackingData ? (\n              <div className=\"space-y-4\">\n                <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4 text-center\">\n                  <p className=\"text-sm text-amber-800 mb-3\">\n                    {trackingError || \"No se pudo obtener el tracking desde la API\"}\n                  </p>\n                  <p className=\"text-xs text-amber-600 mb-4\">Puedes ver el tracking directamente en MiPaquete</p>\n                  <Button\n                    onClick={() =>\n                      window.open(\n                        `https://mpr.mipaquete.com/tracking/${encodeURIComponent(selectedMpCode || \"\")}`,\n                        \"_blank\",\n                      )\n                    }\n                    className=\"bg-amber-600 hover:bg-amber-700\"\n                  >\n                    Ver en MiPaquete\n                  </Button>\n                </div>\n\n                <iframe\n                  src={`https://mpr.mipaquete.com/tracking/${encodeURIComponent(selectedMpCode || \"\")}`}\n                  className=\"w-full h-[520px] border-0 rounded-lg\"\n                  title={`Tracking ${selectedMpCode}`}\n                />\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                  <h3 className=\"font-semibold text-green-900 mb-2\">Estado del Env├¡o</h3>\n                  <pre className=\"text-xs text-green-800 overflow-auto\">{JSON.stringify(trackingData, null, 2)}</pre>\n                </div>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/sidebar.tsx",
        "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\nimport {\n  LayoutDashboard,\n  Users,\n  CreditCard,\n  ShoppingCart,\n  FileText,\n  Package,\n  TrendingUp,\n  Map,\n  Settings,\n  Megaphone,\n  BoxesIcon,\n} from \"lucide-react\"\nimport { useState, useEffect } from \"react\"\n\ntype Item = {\n  label: string\n  href: string\n  icon: React.ComponentType<{ className?: string }>\n}\n\nconst nav: Item[] = [\n  { label: \"Dashboard\", href: \"/dashboard\", icon: LayoutDashboard },\n  { label: \"CRM\", href: \"/crm\", icon: Users },\n  { label: \"Publicidad\", href: \"/publicidad\", icon: Megaphone },\n  { label: \"Ventas\", href: \"/ventas\", icon: ShoppingCart },\n  { label: \"Facturaci├│n\", href: \"/facturacion\", icon: FileText },\n  { label: \"Entregas\", href: \"/entregas\", icon: Package },\n  { label: \"Pagos\", href: \"/pagos\", icon: CreditCard },\n  { label: \"Clientes\", href: \"/clientes\", icon: Users },\n  { label: \"Inventario\", href: \"/inventario\", icon: BoxesIcon },\n  { label: \"Ventas Totales\", href: \"/ventastotales\", icon: TrendingUp },\n  { label: \"Geograf├¡a\", href: \"/geografia\", icon: Map },\n  { label: \"Configuraci├│n\", href: \"/configuracion\", icon: Settings },\n]\n\nexport function Sidebar() {\n  const pathname = usePathname()\n  const [collapsed, setCollapsed] = useState(false)\n  const [sidebarTheme, setSidebarTheme] = useState(\"onyx-soft-gold\")\n  const [logoUrl, setLogoUrl] = useState<string>(\"\")\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"sidebarTheme\")\n    if (savedTheme) {\n      setSidebarTheme(savedTheme)\n      document.documentElement.setAttribute(\"data-sidebar-theme\", savedTheme)\n    } else {\n      localStorage.setItem(\"sidebarTheme\", \"onyx-soft-gold\")\n      setSidebarTheme(\"onyx-soft-gold\")\n      document.documentElement.setAttribute(\"data-sidebar-theme\", \"onyx-soft-gold\")\n    }\n\n    const savedLogo = localStorage.getItem(\"logoUrl\")\n    if (savedLogo) {\n      setLogoUrl(savedLogo)\n    }\n\n    const handleThemeChange = (e: CustomEvent) => {\n      setSidebarTheme(e.detail.theme)\n      document.documentElement.setAttribute(\"data-sidebar-theme\", e.detail.theme)\n    }\n\n    const handleLogoChange = (e: CustomEvent) => {\n      setLogoUrl(e.detail.url)\n    }\n\n    window.addEventListener(\"sidebarThemeChange\" as any, handleThemeChange)\n    window.addEventListener(\"logoChange\" as any, handleLogoChange)\n    return () => {\n      window.removeEventListener(\"sidebarThemeChange\" as any, handleThemeChange)\n      window.removeEventListener(\"logoChange\" as any, handleLogoChange)\n    }\n  }, [])\n\n  return (\n    <aside\n      className={[\n        \"h-screen sticky top-0 z-40\",\n        \"text-[#F4F1EA]\",\n        \"shadow-[0_20px_60px_rgba(0,0,0,.45)]\",\n        collapsed ? \"w-[92px]\" : \"w-[264px]\",\n        \"transition-[width] duration-200 ease-in-out\",\n      ].join(\" \")}\n      style={{\n        backgroundColor: \"var(--sidebar-bg)\",\n        color: \"var(--sidebar-text)\",\n      }}\n    >\n      <div className=\"px-4 pt-5 pb-3\">\n        <Link\n          href=\"/\"\n          className={[\n            \"flex items-center justify-center\",\n            \"rounded-2xl border border-[#2A2A2C]/60\",\n            \"bg-gradient-to-b from-[#111112] to-[#0B0B0C]\",\n            \"px-4 py-4\",\n          ].join(\" \")}\n        >\n          {logoUrl ? (\n            <img\n              src={logoUrl || \"/placeholder.svg\"}\n              alt=\"Logo\"\n              className={`object-contain ${collapsed ? \"h-8 w-8\" : \"h-10 max-w-full\"}`}\n            />\n          ) : (\n            <>\n              {!collapsed && (\n                <span\n                  className=\"text-3xl font-bold tracking-wider bg-gradient-to-r from-[#C8A96A] to-[#8B6914] bg-clip-text text-transparent\"\n                  aria-label=\"GALLE\"\n                >\n                  GALLE\n                </span>\n              )}\n              {collapsed && (\n                <span\n                  className=\"text-2xl font-bold bg-gradient-to-r from-[#C8A96A] to-[#8B6914] bg-clip-text text-transparent\"\n                  aria-label=\"G\"\n                >\n                  G\n                </span>\n              )}\n            </>\n          )}\n        </Link>\n\n        <button\n          onClick={() => setCollapsed((v) => !v)}\n          className=\"mt-3 w-full rounded-xl border border-white/10 bg-white/5 px-3 py-2 text-sm hover:bg-white/10 transition-colors\"\n          aria-label={collapsed ? \"Expandir barra lateral\" : \"Colapsar barra lateral\"}\n        >\n          {collapsed ? \"ÔûÂ´©Ä\" : \"ÔùÇ´©Ä\"} {collapsed ? \"\" : \"Colapsar\"}\n        </button>\n      </div>\n\n      <div className=\"px-3 pb-2\">\n        {!collapsed && <p className=\"px-2 pb-2 text-xs uppercase tracking-wide text-[#C8A96A]\">Navegaci├│n</p>}\n        <nav className=\"space-y-1\">\n          {nav.map(({ label, href, icon: Icon }) => {\n            const active = pathname === href || (href !== \"/\" && pathname.startsWith(href))\n            return (\n              <Link\n                key={href}\n                href={href}\n                className={[\n                  \"group flex items-center gap-3 rounded-2xl px-3 py-2.5 outline-none\",\n                  \"transition-colors duration-150 focus-visible:ring-2 focus-visible:ring-[#C8A96A]/60\",\n                  active\n                    ? \"bg-[#C8A96A]/15 text-white shadow-[0_8px_24px_rgba(200,169,106,.15)] border border-[#C8A96A]/30\"\n                    : \"text-zinc-300 hover:bg-white/5\",\n                ].join(\" \")}\n              >\n                <Icon\n                  className={[\n                    \"h-5 w-5 flex-shrink-0\",\n                    active ? \"text-[#C8A96A]\" : \"text-zinc-400 group-hover:text-[#C8A96A]\",\n                  ].join(\" \")}\n                />\n                {!collapsed && <span className=\"truncate\">{label}</span>}\n                {active && !collapsed && (\n                  <span className=\"ml-auto h-2 w-2 rounded-full bg-[#C8A96A]/90 shadow-[0_0_0_2px_rgba(200,169,106,.25)]\" />\n                )}\n              </Link>\n            )\n          })}\n        </nav>\n      </div>\n\n      <div className=\"absolute inset-x-0 bottom-0 p-3\">\n        <div\n          className={[\"flex items-center gap-3 rounded-2xl border border-white/10\", \"bg-white/5 px-3 py-2\"].join(\" \")}\n        >\n          <div\n            className=\"inline-flex h-8 w-8 items-center justify-center rounded-full text-black font-semibold flex-shrink-0\"\n            style={{ backgroundColor: \"var(--sidebar-accent)\" }}\n          >\n            U\n          </div>\n          {!collapsed && (\n            <div className=\"min-w-0\">\n              <p className=\"truncate text-sm font-medium\">Usuario</p>\n              <p className=\"truncate text-xs text-zinc-400\">Sistema de Gesti├│n</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </aside>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/stat-card.tsx",
        "content": "import { TrendingUp, TrendingDown } from \"lucide-react\"\n\ninterface StatCardProps {\n  title: string\n  value: string\n  subtitle?: string\n  trend?: number\n  color?: \"blue\" | \"green\" | \"yellow\" | \"purple\" | \"red\" | \"orange\" | \"pink\"\n}\n\nconst colorClasses = {\n  blue: \"border-l-blue-500\",\n  green: \"border-l-green-500\",\n  yellow: \"border-l-amber-500\",\n  purple: \"border-l-purple-500\",\n  red: \"border-l-red-500\",\n  orange: \"border-l-orange-500\",\n  pink: \"border-l-pink-500\",\n}\n\nexport function StatCard({ title, value, subtitle, trend, color = \"blue\" }: StatCardProps) {\n  return (\n    <div\n      className={`rounded-lg border border-gray-200 bg-white ${colorClasses[color]} border-l-4 p-3 shadow-sm transition-shadow hover:shadow-md min-w-[160px]`}\n    >\n      <div className=\"space-y-0.5\">\n        <p className=\"text-[10px] font-semibold uppercase tracking-wide text-gray-600 leading-tight\">{title}</p>\n        <p className=\"text-xl font-bold text-gray-900 leading-tight break-words\">{value}</p>\n        {subtitle && <p className=\"text-[10px] text-gray-500\">{subtitle}</p>}\n        {trend !== undefined && (\n          <div\n            className={`flex items-center gap-1 text-[10px] font-semibold ${trend >= 0 ? \"text-green-600\" : \"text-red-600\"}`}\n          >\n            {trend >= 0 ? <TrendingUp className=\"h-3 w-3\" /> : <TrendingDown className=\"h-3 w-3\" />}\n            <span>+{Math.abs(trend)}% vs anterior</span>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/theme-provider.tsx",
        "content": "'use client'\n\nimport * as React from 'react'\nimport {\n  ThemeProvider as NextThemesProvider,\n  type ThemeProviderProps,\n} from 'next-themes'\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/avatar.tsx",
        "content": "'use client'\n\nimport * as React from 'react'\nimport * as AvatarPrimitive from '@radix-ui/react-avatar'\n\nimport { cn } from '@/lib/utils'\n\nfunction Avatar({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(\n        'relative flex size-8 shrink-0 overflow-hidden rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn('aspect-square size-full', className)}\n      {...props}\n    />\n  )\n}\n\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        'bg-muted flex size-full items-center justify-center rounded-full',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/badge.tsx",
        "content": "import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst badgeVariants = cva(\n  'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',\n  {\n    variants: {\n      variant: {\n        default:\n          'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',\n        secondary:\n          'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',\n        destructive:\n          'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  },\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'span'> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : 'span'\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/button.tsx",
        "content": "import * as React from 'react'\nimport { Slot } from '@radix-ui/react-slot'\nimport { cva, type VariantProps } from 'class-variance-authority'\n\nimport { cn } from '@/lib/utils'\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n        'icon-sm': 'size-8',\n        'icon-lg': 'size-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : 'button'\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/card.tsx",
        "content": "import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Card({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        'bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        '@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-2 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn('leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        'col-start-2 row-span-2 row-start-1 self-start justify-self-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn('px-6', className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn('flex items-center px-6 [.border-t]:pt-6', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/checkbox.tsx",
        "content": "'use client'\n\nimport * as React from 'react'\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox'\nimport { CheckIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        'peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/dialog.tsx",
        "content": "'use client'\n\nimport * as React from 'react'\nimport * as DialogPrimitive from '@radix-ui/react-dialog'\nimport { XIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn('flex flex-col gap-2 text-center sm:text-left', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        'flex flex-col-reverse gap-2 sm:flex-row sm:justify-end',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn('text-lg leading-none font-semibold', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn('text-muted-foreground text-sm', className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/dropdown-menu.tsx",
        "content": "'use client'\n\nimport * as React from 'react'\nimport * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md',\n          className,\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = 'default',\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: 'default' | 'destructive'\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        'px-2 py-1.5 text-sm font-medium data-[inset]:pl-8',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn('bg-border -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<'span'>) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        'text-muted-foreground ml-auto text-xs tracking-widest',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/input.tsx",
        "content": "import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Input({ className, type, ...props }: React.ComponentProps<'input'>) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',\n        'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/label.tsx",
        "content": "'use client'\n\nimport * as React from 'react'\nimport * as LabelPrimitive from '@radix-ui/react-label'\n\nimport { cn } from '@/lib/utils'\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        'flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/scroll-area.tsx",
        "content": "'use client'\n\nimport * as React from 'react'\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area'\n\nimport { cn } from '@/lib/utils'\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn('relative', className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  )\n}\n\nfunction ScrollBar({\n  className,\n  orientation = 'vertical',\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        'flex touch-none p-px transition-colors select-none',\n        orientation === 'vertical' &&\n          'h-full w-2.5 border-l border-l-transparent',\n        orientation === 'horizontal' &&\n          'h-2.5 flex-col border-t border-t-transparent',\n        className,\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className=\"bg-border relative flex-1 rounded-full\"\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  )\n}\n\nexport { ScrollArea, ScrollBar }\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/select.tsx",
        "content": "'use client'\n\nimport * as React from 'react'\nimport * as SelectPrimitive from '@radix-ui/react-select'\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = 'default',\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: 'sm' | 'default'\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = 'popper',\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          'bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md',\n          position === 'popper' &&\n            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n          className,\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            'p-1',\n            position === 'popper' &&\n              'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1',\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn('text-muted-foreground px-2 py-1.5 text-xs', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn('bg-border pointer-events-none -mx-1 my-1 h-px', className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        'flex cursor-default items-center justify-center py-1',\n        className,\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/separator.tsx",
        "content": "'use client'\n\nimport * as React from 'react'\nimport * as SeparatorPrimitive from '@radix-ui/react-separator'\n\nimport { cn } from '@/lib/utils'\n\nfunction Separator({\n  className,\n  orientation = 'horizontal',\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/skeleton.tsx",
        "content": "import { cn } from '@/lib/utils'\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<'div'>) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn('bg-accent animate-pulse rounded-md', className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/switch.tsx",
        "content": "'use client'\n\nimport * as React from 'react'\nimport * as SwitchPrimitive from '@radix-ui/react-switch'\n\nimport { cn } from '@/lib/utils'\n\nfunction Switch({\n  className,\n  ...props\n}: React.ComponentProps<typeof SwitchPrimitive.Root>) {\n  return (\n    <SwitchPrimitive.Root\n      data-slot=\"switch\"\n      className={cn(\n        'peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',\n        className,\n      )}\n      {...props}\n    >\n      <SwitchPrimitive.Thumb\n        data-slot=\"switch-thumb\"\n        className={\n          'bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0'\n        }\n      />\n    </SwitchPrimitive.Root>\n  )\n}\n\nexport { Switch }\n",
        "type": "registry:component"
      },
      {
        "path": "components/ui/textarea.tsx",
        "content": "import * as React from 'react'\n\nimport { cn } from '@/lib/utils'\n\nfunction Textarea({ className, ...props }: React.ComponentProps<'textarea'>) {\n  return (\n    <textarea\n      data-slot=\"textarea\"\n      className={cn(\n        'border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Textarea }\n",
        "type": "registry:component"
      },
      {
        "path": "hooks/use-tracking.ts",
        "content": "import useSWR from \"swr\"\n\nconst fetcher = (url: string) => fetch(url).then((r) => r.json())\n\nexport function useTracking(mpCode?: string) {\n  const code = (mpCode || \"\").trim()\n  const { data, error, isLoading } = useSWR(\n    code ? `/api/mipaquete/tracking?mpCode=${encodeURIComponent(code)}` : null,\n    fetcher,\n    { refreshInterval: 60_000 }, // refresco cada 1 minuto\n  )\n  return { data, error, isLoading }\n}\n",
        "type": "registry:hook"
      },
      {
        "path": "lib/ads-fetch.ts",
        "content": "export const fetcher = (u: string) => fetch(u).then((r) => r.json())\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/aggregate.ts",
        "content": "// lib/aggregate.ts\nimport type { CampaignRow, CRMConversation, MetaCampaign, Order } from \"./types\"\nimport { computeOrderNetRevenue } from \"./revenue\"\nimport { attributeOrderToConversation } from \"./attribution\"\n\n/**\n * Agregaci├│n por campa├▒a con ingresos sin env├¡o\n */\nexport function aggregateCampaigns(\n  meta: MetaCampaign[],\n  conversations: CRMConversation[],\n  orders: Order[],\n): CampaignRow[] {\n  const convoById = new Map(conversations.map((c) => [c.id, c]))\n  const campaignConvos = new Map<string, CRMConversation[]>()\n  for (const c of conversations) {\n    const arr = campaignConvos.get(c.campaignId) || []\n    arr.push(c)\n    campaignConvos.set(c.campaignId, arr)\n  }\n\n  const orderToCampaign = new Map<string, string>()\n  for (const o of orders) {\n    const { conversation } = attributeOrderToConversation(o, conversations)\n    if (conversation) {\n      orderToCampaign.set(o.id, conversation.campaignId)\n    }\n  }\n\n  const revenueByCampaign = new Map<string, number>()\n  for (const o of orders) {\n    const campId = orderToCampaign.get(o.id)\n    if (!campId) continue\n    const net = computeOrderNetRevenue(o)\n    revenueByCampaign.set(campId, (revenueByCampaign.get(campId) || 0) + net)\n  }\n\n  const rows: CampaignRow[] = meta.map((m) => {\n    const convos = campaignConvos.get(m.id) || []\n    const convCount = convos.length\n    const ventas = convos.filter((c) => c.status === \"Pedido Completo\").length\n    const revenue = revenueByCampaign.get(m.id) || 0\n\n    return {\n      id: m.id,\n      name: m.name,\n      status: m.status,\n      deliveryLabel: m.deliveryLabel,\n      accountType: m.accountType,\n      negativesPct: m.negativesPct,\n      lastUpdated: m.lastUpdated,\n      meta: {\n        dailyBudget: m.dailyBudget,\n        spendTotal: m.spendTotal,\n      },\n      crm: {\n        conversations: convCount,\n        completedOrders: ventas,\n      },\n      sales: {\n        revenue,\n      },\n    }\n  })\n\n  return rows\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/attribution.ts",
        "content": "// lib/attribution.ts\nimport type { CRMConversation, Order } from \"./types\"\n\nexport function normalizePhone(phone: string) {\n  return phone.replace(/[^\\d+]/g, \"\")\n}\n\n/**\n * Atribuci├│n inteligente ordenÔåÆconversaci├│nÔåÆcampa├▒a\n * Prioridades:\n * 1) order.conversationId directo\n * 2) order.utmCampaignId directo\n * 3) Match por tel├®fono + ventana temporal (14 d├¡as) + \"├║ltimo toque\"\n */\nexport function attributeOrderToConversation(\n  order: Order,\n  conversations: CRMConversation[],\n  windowDays = 14,\n): { conversation?: CRMConversation; reason: string } {\n  // 1) Link directo por conversationId\n  if (order.conversationId) {\n    const c = conversations.find((x) => x.id === order.conversationId)\n    if (c) return { conversation: c, reason: \"by-conversationId\" }\n  }\n\n  // 2) Fallback por utmCampaignId\n  if (order.utmCampaignId) {\n    const cs = conversations.filter((x) => x.campaignId === order.utmCampaignId)\n    if (cs.length) {\n      const target = new Date(order.createdAt).getTime()\n      const prior = cs\n        .filter((x) => new Date(x.startedAt).getTime() <= target)\n        .sort((a, b) => new Date(b.startedAt).getTime() - new Date(a.startedAt).getTime())[0]\n      if (prior) return { conversation: prior, reason: \"by-utmCampaignId\" }\n      const closest = cs.sort(\n        (a, b) =>\n          Math.abs(new Date(a.startedAt).getTime() - target) - Math.abs(new Date(b.startedAt).getTime() - target),\n      )[0]\n      if (closest) return { conversation: closest, reason: \"by-utmCampaignId-closest\" }\n    }\n  }\n\n  // 3) Match por tel├®fono + ventana temporal + \"├║ltimo toque\"\n  const phone = normalizePhone(order.customerPhone)\n  const target = new Date(order.createdAt).getTime()\n  const windowMs = windowDays * 24 * 60 * 60 * 1000\n\n  const candidates = conversations\n    .filter((c) => normalizePhone(c.customerPhone) === phone)\n    .filter((c) => Math.abs(new Date(c.startedAt).getTime() - target) <= windowMs)\n\n  if (candidates.length) {\n    const prior = candidates\n      .filter((x) => new Date(x.startedAt).getTime() <= target)\n      .sort((a, b) => new Date(b.startedAt).getTime() - new Date(a.startedAt).getTime())[0]\n    if (prior) return { conversation: prior, reason: \"by-phone-last-touch\" }\n\n    const closest = candidates.sort(\n      (a, b) => Math.abs(new Date(a.startedAt).getTime() - target) - Math.abs(new Date(b.startedAt).getTime() - target),\n    )[0]\n    if (closest) return { conversation: closest, reason: \"by-phone-closest\" }\n  }\n\n  return { conversation: undefined, reason: \"unattributed\" }\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/export-utils.tsx",
        "content": "export function exportToCSV(data: any[], filename: string) {\n  if (!data || data.length === 0) {\n    alert(\"No hay datos para exportar\")\n    return\n  }\n\n  // Obtener headers\n  const headers = Object.keys(data[0])\n\n  // Crear filas CSV\n  const csvRows = [\n    headers.join(\",\"), // Header row\n    ...data.map((row) =>\n      headers\n        .map((header) => {\n          const value = row[header]\n          // Escapar valores que contengan comas o comillas\n          if (typeof value === \"string\" && (value.includes(\",\") || value.includes('\"'))) {\n            return `\"${value.replace(/\"/g, '\"\"')}\"`\n          }\n          return value\n        })\n        .join(\",\"),\n    ),\n  ]\n\n  // Crear blob y descargar\n  const csvContent = csvRows.join(\"\\n\")\n  const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" })\n  const link = document.createElement(\"a\")\n  const url = URL.createObjectURL(blob)\n\n  link.setAttribute(\"href\", url)\n  link.setAttribute(\"download\", `${filename}.csv`)\n  link.style.visibility = \"hidden\"\n  document.body.appendChild(link)\n  link.click()\n  document.body.removeChild(link)\n}\n\nexport function exportToExcel(data: any[], filename: string) {\n  if (!data || data.length === 0) {\n    alert(\"No hay datos para exportar\")\n    return\n  }\n\n  // Crear tabla HTML\n  const headers = Object.keys(data[0])\n  let html = \"<table><thead><tr>\"\n\n  headers.forEach((header) => {\n    html += `<th>${header}</th>`\n  })\n\n  html += \"</tr></thead><tbody>\"\n\n  data.forEach((row) => {\n    html += \"<tr>\"\n    headers.forEach((header) => {\n      html += `<td>${row[header] || \"\"}</td>`\n    })\n    html += \"</tr>\"\n  })\n\n  html += \"</tbody></table>\"\n\n  // Crear blob y descargar\n  const blob = new Blob([html], { type: \"application/vnd.ms-excel\" })\n  const link = document.createElement(\"a\")\n  const url = URL.createObjectURL(blob)\n\n  link.setAttribute(\"href\", url)\n  link.setAttribute(\"download\", `${filename}.xls`)\n  link.style.visibility = \"hidden\"\n  document.body.appendChild(link)\n  link.click()\n  document.body.removeChild(link)\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/fetchers.ts",
        "content": "// lib/fetchers.ts\nimport type { MetaCampaign, CRMConversation, Order } from \"./types\"\n\nexport async function fetchMetaCampaigns(): Promise<MetaCampaign[]> {\n  // TODO: Conecta a tu API de Meta / backend\n  return [\n    {\n      id: \"120233445687010113\",\n      name: \"Mensajes a WhatsApp del Mayor\",\n      accountType: \"Mayor\",\n      dailyBudget: 150000,\n      spendTotal: 548428,\n      status: \"Activa\",\n      deliveryLabel: \"Activa\",\n      negativesPct: 22.5,\n      lastUpdated: new Date().toISOString(),\n    },\n    {\n      id: \"120232224011150113\",\n      name: \"Campa├▒a Balines - Mensajes a WhatsApp\",\n      accountType: \"Detal\",\n      dailyBudget: 90000,\n      spendTotal: 12880,\n      status: \"Pausada\",\n      deliveryLabel: \"Pausada\",\n      negativesPct: 18.3,\n      lastUpdated: new Date().toISOString(),\n    },\n  ]\n}\n\nexport async function fetchCRMConversations(): Promise<CRMConversation[]> {\n  // TODO: Conecta a tu CRM real (filtrar por mes en curso)\n  return [\n    {\n      id: \"c-1\",\n      campaignId: \"120233445687010113\",\n      startedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 10).toISOString(),\n      customerPhone: \"+573001112233\",\n      status: \"Pedido Completo\",\n    },\n    {\n      id: \"c-2\",\n      campaignId: \"120232224011150113\",\n      startedAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 6).toISOString(),\n      customerPhone: \"+573004445566\",\n      status: \"Cerrada\",\n    },\n  ]\n}\n\nexport async function fetchOrders(): Promise<Order[]> {\n  // TODO: Conecta a tu m├│dulo de Ventas real (filtrar por mes en curso)\n  return [\n    {\n      id: \"o-1\",\n      conversationId: \"c-1\",\n      customerPhone: \"+573001112233\",\n      createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 9).toISOString(),\n      items: [{ sku: \"CAD-ORO\", title: \"Cadena Oro 18k\", unitPrice: 180000, qty: 1 }],\n      shippingCost: 15000,\n      currency: \"COP\",\n    },\n    {\n      id: \"o-2\",\n      utmCampaignId: \"120232224011150113\",\n      customerPhone: \"+573004445566\",\n      createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5).toISOString(),\n      items: [{ sku: \"ARETES\", title: \"Aretes Oro\", unitPrice: 120000, qty: 2, discountPerUnit: 5000 }],\n      shippingCost: 12000,\n      currency: \"COP\",\n    },\n  ]\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/fiscal-year-context.tsx",
        "content": "\"use client\"\n\nimport { createContext, useContext, useState, useEffect, type ReactNode } from \"react\"\n\ntype FiscalYearContextType = {\n  fiscalYear: number\n  setFiscalYear: (year: number) => void\n}\n\nconst FiscalYearContext = createContext<FiscalYearContextType | undefined>(undefined)\n\nexport function FiscalYearProvider({ children }: { children: ReactNode }) {\n  const [fiscalYear, setFiscalYearState] = useState<number>(2025)\n\n  // Load fiscal year from localStorage on mount\n  useEffect(() => {\n    const stored = localStorage.getItem(\"fiscal-year\")\n    if (stored) {\n      setFiscalYearState(Number.parseInt(stored, 10))\n    }\n  }, [])\n\n  // Save fiscal year to localStorage when it changes\n  const setFiscalYear = (year: number) => {\n    setFiscalYearState(year)\n    localStorage.setItem(\"fiscal-year\", year.toString())\n  }\n\n  return <FiscalYearContext.Provider value={{ fiscalYear, setFiscalYear }}>{children}</FiscalYearContext.Provider>\n}\n\nexport function useFiscalYear() {\n  const context = useContext(FiscalYearContext)\n  if (context === undefined) {\n    throw new Error(\"useFiscalYear must be used within a FiscalYearProvider\")\n  }\n  return context\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/inventory-types.ts",
        "content": "export type WarehouseId = string\nexport type CostMethod = \"avg\" | \"fifo\"\n\nexport type Variant = {\n  id: string\n  name: string\n  sku: string\n  barcode?: string\n  stockByWh: Record<WarehouseId, number>\n  cantidadPrincipal?: number\n  cantidadGarantias?: number\n  precioMayor?: number\n  cost: number\n  price: number\n  reorderLevel?: number\n  enabled: boolean\n}\n\nexport type Product = {\n  id: string\n  name: string\n  category?: string\n  brand?: string\n  notes?: string\n  medidas?: string\n  variants: Variant[]\n  createdAt: string\n  updatedAt: string\n}\n\nexport type Warehouse = {\n  id: WarehouseId\n  name: string\n}\n\nexport type MoveType = \"in\" | \"out\" | \"adjust\" | \"transfer\" | \"warranty\"\n\nexport type Movement = {\n  id: string\n  date: string\n  sku: string\n  variantId: string\n  productId: string\n  type: MoveType\n  qty: number\n  fromWh?: WarehouseId\n  toWh?: WarehouseId\n  unitCost?: number\n  note?: string\n}\n\nexport type InventorySnapshot = {\n  products: Product[]\n  warehouses: Warehouse[]\n  movements: Movement[]\n  costMethod: CostMethod\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/mipaquete.ts",
        "content": "import axios from \"axios\"\n\nexport const MIPAQUETE = axios.create({\n  baseURL: \"https://api-v2.mpr.mipaquete.com\",\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"session-tracker\": \"a0c96ea6-b22d-4fb7-a278-850678d5429c\",\n    apikey:\n      \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NzExOWRjNDMzNjk2M2YzMzBlYjFjZTYiLCJuYW1lIjoiQ29tZXJjaWFsaXphZG9yYSIsInN1cm5hbWUiOiJnYWxlMThrIiwiZW1haWwiOiJnYWxsZW9yb2xhbWluYWRvMThrQGdtYWlsLmNvbSIsImNlbGxQaG9uZSI6IjMwMTY4NDUwMjYiLCJjcmVhdGVkQXQiOiIyMDI0LTEwLTE3VDIzOjI5OjA4LjAxNFoiLCJkYXRlIjoiMjAyNS0wOC0xOSAxMDoyMDoyNCIsImlhdCI6MTc1NTYxNjgyNH0.LHBLIsBCQlNM6WlnB514dN00dR7LcPjIQcYt1B62hEA\",\n  },\n})\n\nexport async function getTrackingByGuide(guide: string) {\n  try {\n    const r = await MIPAQUETE.post(\"/getSendingTracking\", { mpCode: guide })\n    return r.data\n  } catch (error) {\n    console.error(\"[v0] Error fetching tracking:\", error)\n    throw error\n  }\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/revenue.ts",
        "content": "// lib/revenue.ts\nimport type { Order } from \"./types\"\n\n/**\n * Calcula ingresos netos de una orden:\n *  - Suma ├¡tems (precio * qty)\n *  - Resta retornos parciales (si existen)\n *  - Resta descuentos por ├¡tem (si existen)\n *  - EXCLUYE SIEMPRE shippingCost\n */\nexport function computeOrderNetRevenue(order: Order): number {\n  let itemsGross = 0\n  for (const it of order.items) {\n    const qtyNet = Math.max(0, it.qty - (it.returnedQty || 0))\n    const priceNet = it.unitPrice - (it.discountPerUnit || 0)\n    itemsGross += priceNet * qtyNet\n  }\n  if (itemsGross < 0) itemsGross = 0\n  return itemsGross\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/store.ts",
        "content": "export type MetodoPago = \"Efectivo\" | \"Transferencia\" | \"Contraentrega\"\nexport type EstadoFactura = \"Pagado\" | \"Pendiente Pago\" | \"Devuelto\"\nexport type EstadoEnvio = \"Despachado\" | \"En tr├ínsito\" | \"Entregado\" | \"Devuelto\" | \"Retrasado\"\n\nexport type ItemFactura = {\n  ref: string\n  descripcion: string\n  und: number\n  ivaPct: number\n  precioBase: number\n  precioNeto: number\n}\n\nexport type Factura = {\n  numero: string\n  cliente: {\n    nombre: string\n    nit?: string\n    ciudad?: string\n    barrio?: string\n    direccion?: string\n    telefono?: string\n    email?: string\n    asesor?: string\n  }\n  guia: string\n  transportadora: string\n  ciudad?: string\n  emision: string\n  vencimiento: string\n  subtotal: number\n  iva: number\n  total: number\n  estado: EstadoFactura\n  metodo: MetodoPago\n  items: ItemFactura[]\n  createdAt: string\n}\n\nexport type Venta = {\n  id: string\n  factura: string\n  cliente: string\n  ciudad?: string\n  producto: string\n  total: number\n  metodo: MetodoPago\n  estado: EstadoFactura\n  transportadora: string\n  guia: string\n  envio: EstadoEnvio\n  vendedor?: string\n  createdAt: string\n}\n\nexport type Pago = {\n  id: string\n  pedido: string\n  cliente: string\n  metodo: MetodoPago\n  subMetodo?: string\n  estado: \"Pagado\" | \"Pendiente\"\n  monto: number\n  fecha: string\n}\n\nexport type Devolucion = {\n  id: string\n  factura: string\n  motivo?: string\n  total: number\n  fecha: string\n}\n\nexport type ClienteRow = {\n  id: string\n  nombre: string\n  email?: string\n  ciudad?: string\n  asesor?: string\n  frecuencia: number\n  acumulado: number\n  ultimaCompra?: string\n  segmento?: \"Mayorista Joyer├¡a\" | \"Balinier├¡a\" | \"Detal\" | \"Prospecto\"\n}\n\n/** ÔÇöÔÇö CRM por tel├®fono ÔÇöÔÇö */\nexport type CRMPurchase = {\n  fecha: string\n  descripcion: string\n  total: number\n  numeroFactura: string\n}\n\nexport type CRMContact = {\n  phone: string\n  nombre?: string\n  canal?: \"WhatsApp\" | \"Instagram\" | \"Facebook\" | \"Web\" | \"Otro\"\n  etiquetas?: string[]\n  historial: CRMPurchase[]\n}\n\ntype Store = {\n  facturas: Factura[]\n  ventas: Venta[]\n  pagos: Pago[]\n  devoluciones: Devolucion[]\n  clientes: ClienteRow[]\n  crm: CRMContact[]\n}\n\nconst store: Store = {\n  facturas: [],\n  ventas: [],\n  pagos: [],\n  devoluciones: [],\n  clientes: [],\n  crm: [],\n}\n\nfunction next(prefix: string, list: { id?: string; numero?: string }[], field: \"id\" | \"numero\" = \"id\") {\n  const nums = list\n    .map((x) => (x[field] ?? \"\").toString())\n    .filter((s) => s.startsWith(prefix))\n    .map((s) => Number((s.match(/\\d+$/) ?? [\"0\"])[0]))\n  const n = (nums.length ? Math.max(...nums) : 0) + 1\n  return `${prefix}${String(n).padStart(3, \"0\")}`\n}\n\n/** ÔÇöÔÇöÔÇö CLIENTES (seguimiento) ÔÇöÔÇöÔÇö */\nfunction upsertClienteFromFactura(f: Factura) {\n  let c = store.clientes.find((x) => x.nombre === f.cliente.nombre)\n  if (!c) {\n    c = {\n      id: next(\"CLI-\", store.clientes),\n      nombre: f.cliente.nombre,\n      email: f.cliente.email,\n      ciudad: f.cliente.ciudad,\n      asesor: f.cliente.asesor,\n      frecuencia: 0,\n      acumulado: 0,\n      ultimaCompra: undefined,\n      segmento: \"Prospecto\",\n    }\n    store.clientes.push(c)\n  }\n  c.frecuencia += 1\n  c.acumulado += f.total\n  c.ultimaCompra = f.emision\n  c.ciudad = f.cliente.ciudad ?? c.ciudad\n  c.asesor = f.cliente.asesor ?? c.asesor\n  if (c.acumulado > 50_000_000) c.segmento = \"Mayorista Joyer├¡a\"\n}\n\n/** ÔÇöÔÇöÔÇö CRM (historial por tel├®fono) ÔÇöÔÇöÔÇö */\nfunction upsertCRMFromFactura(f: Factura) {\n  const tel = (f.cliente.telefono ?? \"\").replace(/\\D/g, \"\")\n  if (!tel) return // si no hay tel├®fono, no se puede mapear al CRM\n\n  let c = store.crm.find((x) => x.phone === tel)\n  if (!c) {\n    c = {\n      phone: tel,\n      nombre: f.cliente.nombre,\n      canal: \"WhatsApp\",\n      etiquetas: [],\n      historial: [],\n    }\n    store.crm.push(c)\n  } else if (!c.nombre && f.cliente.nombre) {\n    c.nombre = f.cliente.nombre\n  }\n  c.historial.unshift({\n    fecha: f.emision,\n    descripcion:\n      f.items.length > 1 ? `${f.items[0].descripcion} +${f.items.length - 1}` : (f.items[0]?.descripcion ?? \"Compra\"),\n    total: f.total,\n    numeroFactura: f.numero,\n  })\n}\n\n/** ÔÇöÔÇöÔÇö CREAR FACTURA -> VENTA, PAGO, CLIENTE, CRM ÔÇöÔÇöÔÇö */\nexport function createFactura(input: Omit<Factura, \"createdAt\">) {\n  const factura: Factura = { ...input, createdAt: new Date().toISOString() }\n  store.facturas.push(factura)\n\n  const ventaId = next(\"VT-\", store.ventas, \"id\")\n  const producto = input.items[0]?.descripcion ?? (input.items.length > 1 ? \"Varios items\" : \"Producto\")\n  const venta: Venta = {\n    id: ventaId,\n    factura: input.numero,\n    cliente: input.cliente.nombre,\n    ciudad: input.cliente.ciudad,\n    producto,\n    total: input.total,\n    metodo: input.metodo,\n    estado: input.estado,\n    transportadora: input.transportadora,\n    guia: input.guia,\n    envio: \"Despachado\",\n    createdAt: new Date().toISOString(),\n  }\n  store.ventas.push(venta)\n\n  const pago: Pago = {\n    id: next(\"PAY-\", store.pagos),\n    pedido: input.numero,\n    cliente: input.cliente.nombre,\n    metodo: input.metodo,\n    estado: input.estado === \"Pagado\" ? \"Pagado\" : \"Pendiente\",\n    monto: input.total,\n    fecha: input.emision,\n  }\n  store.pagos.push(pago)\n\n  upsertClienteFromFactura(factura)\n  upsertCRMFromFactura(factura)\n\n  return { factura, venta, pago }\n}\n\n/** ÔÇöÔÇöÔÇö UPDATE ESTADO ÔÇöÔÇöÔÇö */\nexport function updateFacturaEstado(numero: string, estado: EstadoFactura, metodo?: MetodoPago) {\n  store.facturas = store.facturas.map((f) => (f.numero === numero ? { ...f, estado, metodo: metodo ?? f.metodo } : f))\n  store.ventas = store.ventas.map((v) => (v.factura === numero ? { ...v, estado, metodo: metodo ?? v.metodo } : v))\n  store.pagos = store.pagos.map((p) =>\n    p.pedido === numero\n      ? {\n          ...p,\n          estado: estado === \"Pagado\" ? \"Pagado\" : \"Pendiente\",\n          metodo: metodo ?? p.metodo,\n        }\n      : p,\n  )\n}\n\n/** ÔÇöÔÇöÔÇö DEVOLUCI├ôN ÔÇöÔÇöÔÇö */\nexport function marcarVentaDevueltaPorFactura(numero: string, motivo?: string) {\n  const fac = store.facturas.find((f) => f.numero === numero)\n  if (!fac) return\n  const dev: Devolucion = {\n    id: next(\"DEV-\", store.devoluciones),\n    factura: numero,\n    motivo,\n    total: fac.total,\n    fecha: new Date().toISOString().slice(0, 10),\n  }\n  store.devoluciones.push(dev)\n  updateFacturaEstado(numero, \"Devuelto\")\n  store.ventas = store.ventas.filter((v) => v.factura !== numero)\n}\n\n/** ÔÇöÔÇöÔÇö ENV├ìOS ÔÇöÔÇöÔÇö */\nexport function updateEnvioPorGuia(guia: string, estado: EstadoEnvio) {\n  store.ventas = store.ventas.map((v) => (v.guia === guia ? { ...v, envio: estado } : v))\n}\n\n/** ÔÇöÔÇöÔÇö SELECTS ÔÇöÔÇöÔÇö */\nexport const DB = {\n  get: () => store,\n  getVentas: () => store.ventas,\n  getFacturas: () => store.facturas,\n  getPagos: () => store.pagos,\n  getDevols: () => store.devoluciones,\n  getClientes: () => store.clientes,\n  getCRMByPhone: (phone: string) => store.crm.find((c) => c.phone === phone.replace(/\\D/g, \"\")),\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/supabase/client.ts",
        "content": "import { createBrowserClient } from \"@supabase/ssr\"\n\nexport function createClient() {\n  const url = process.env.SUPABASE_SUPABASE_NEXT_PUBLIC_SUPABASE_URL\n  const key = process.env.SUPABASE_NEXT_PUBLIC_SUPABASE_ANON_KEY_ANON_KEY\n\n  if (!url || !key) {\n    throw new Error(\n      \"Missing Supabase environment variables. Please ensure SUPABASE_NEXT_PUBLIC_SUPABASE_URL and SUPABASE_NEXT_PUBLIC_SUPABASE_ANON_KEY are set in your environment.\",\n    )\n  }\n\n  return createBrowserClient(url, key)\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/supabase/middleware.ts",
        "content": "import { createServerClient } from \"@supabase/ssr\"\nimport { NextResponse, type NextRequest } from \"next/server\"\n\nexport async function updateSession(request: NextRequest) {\n  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n    return NextResponse.next({\n      request,\n    })\n  }\n\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) => supabaseResponse.cookies.set(name, value, options))\n        },\n      },\n    },\n  )\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  return supabaseResponse\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/supabase/server.ts",
        "content": "import { createServerClient as createSupabaseServerClient } from \"@supabase/ssr\"\nimport { cookies } from \"next/headers\"\n\nexport async function createServerClient() {\n  const url = process.env.SUPABASE_SUPABASE_NEXT_PUBLIC_SUPABASE_URL\n  const key = process.env.SUPABASE_NEXT_PUBLIC_SUPABASE_ANON_KEY_ANON_KEY\n\n  if (!url || !key) {\n    throw new Error(\n      \"Missing Supabase environment variables. Please ensure NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY are set in your environment.\",\n    )\n  }\n\n  const cookieStore = await cookies()\n\n  return createSupabaseServerClient(url, key, {\n    cookies: {\n      getAll() {\n        return cookieStore.getAll()\n      },\n      setAll(cookiesToSet) {\n        try {\n          cookiesToSet.forEach(({ name, value, options }) => cookieStore.set(name, value, options))\n        } catch {}\n      },\n    },\n  })\n}\n\nexport const createClient = createServerClient\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/theme-context.tsx",
        "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"white\" | \"black\" | \"auto\"\n\ntype ThemeContextType = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined)\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(\"white\")\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    setMounted(true)\n    const savedTheme = localStorage.getItem(\"dashboard-theme\") as Theme\n    if (savedTheme) {\n      setTheme(savedTheme)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!mounted) return\n\n    localStorage.setItem(\"dashboard-theme\", theme)\n\n    // Aplicar el tema al documento\n    const root = document.documentElement\n    root.setAttribute(\"data-theme\", theme)\n\n    // Si es auto, detectar preferencia del sistema\n    if (theme === \"auto\") {\n      const isDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n      root.setAttribute(\"data-theme\", isDark ? \"black\" : \"white\")\n    }\n  }, [theme, mounted])\n\n  if (!mounted) {\n    return <>{children}</>\n  }\n\n  return <ThemeContext.Provider value={{ theme, setTheme }}>{children}</ThemeContext.Provider>\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext)\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n  }\n  return context\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/types.ts",
        "content": "// lib/types.ts\nexport type AccountType = \"Detal\" | \"Mayor\"\n\nexport type MetaCampaign = {\n  id: string\n  name: string\n  accountType: AccountType\n  dailyBudget: number\n  spendTotal: number\n  status: \"Activa\" | \"Pausada\"\n  deliveryLabel: \"Activa\" | \"Pausada\"\n  negativesPct?: number\n  lastUpdated: string\n}\n\nexport type CRMConversation = {\n  id: string\n  campaignId: string\n  startedAt: string\n  customerPhone: string\n  status: \"Abierta\" | \"Pedido Completo\" | \"Cerrada\"\n}\n\nexport type OrderItem = {\n  sku: string\n  title: string\n  unitPrice: number\n  qty: number\n  returnedQty?: number\n  discountPerUnit?: number\n}\n\nexport type Order = {\n  id: string\n  conversationId?: string\n  utmCampaignId?: string\n  customerPhone: string\n  createdAt: string\n  items: OrderItem[]\n  shippingCost: number\n  otherFees?: number\n  currency: \"COP\" | string\n}\n\nexport type CampaignRow = {\n  id: string\n  name: string\n  status: \"Activa\" | \"Pausada\"\n  deliveryLabel: \"Activa\" | \"Pausada\"\n  accountType: AccountType\n  meta: {\n    dailyBudget: number\n    spendTotal: number\n  }\n  crm: {\n    conversations: number\n    completedOrders: number\n  }\n  sales: {\n    revenue: number\n  }\n  negativesPct?: number\n  lastUpdated: string\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/utils.ts",
        "content": "import { clsx, type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "lib/ventasStore.ts",
        "content": "// lib/ventasStore.ts\nexport type MetodoPago = \"Efectivo\" | \"Transferencia\" | \"Contraentrega\"\nexport type EstadoPago = \"Pagado\" | \"Pendiente Pago\"\n\nexport type Venta = {\n  id: string // VT-001\n  cliente: string\n  fecha: string // YYYY-MM-DD\n  producto: string\n  total: number // en COP\n  estado: EstadoPago\n  metodo: MetodoPago\n  transportadora: string\n  guia: string\n  evidenciaUrl?: string // link/archivo\n  vendedor: string\n  factura?: string // FAC-2025-0001\n}\n\nlet ventas: Venta[] = [\n  {\n    id: \"VT-002\",\n    cliente: \"Carlos Rodr├¡guez\",\n    fecha: \"2025-01-07\",\n    producto: \"Anillo de Plata\",\n    total: 125000,\n    estado: \"Pendiente Pago\",\n    metodo: \"Efectivo\",\n    transportadora: \"Coordinadora\",\n    guia: \"1714816\",\n    evidenciaUrl: undefined,\n    vendedor: \"Ana L├│pez\",\n    factura: \"FAC-2025-0002\",\n  },\n  {\n    id: \"VT-001\",\n    cliente: \"Mar├¡a Gonz├ílez\",\n    fecha: \"2025-01-07\",\n    producto: \"Bal├¡n de Oro 18k\",\n    total: 285000,\n    estado: \"Pendiente Pago\",\n    metodo: \"Transferencia\",\n    transportadora: \"Servientrega\",\n    guia: \"1714815\",\n    evidenciaUrl: undefined,\n    vendedor: \"Juan P├®rez\",\n    factura: \"FAC-2025-0001\",\n  },\n  {\n    id: \"VT-004\",\n    cliente: \"Pedro S├ínchez\",\n    fecha: \"2025-01-06\",\n    producto: \"Aretes de Oro\",\n    total: 320000,\n    estado: \"Pendiente Pago\",\n    metodo: \"Transferencia\",\n    transportadora: \"Servientrega\",\n    guia: \"1714818\",\n    evidenciaUrl: undefined,\n    vendedor: \"Ana L├│pez\",\n    factura: undefined,\n  },\n  {\n    id: \"VT-003\",\n    cliente: \"Laura Mart├¡nez\",\n    fecha: \"2025-01-06\",\n    producto: \"Bal├¡n Premium\",\n    total: 450000,\n    estado: \"Pendiente Pago\",\n    metodo: \"Contraentrega\",\n    transportadora: \"SERVIENTREGA\",\n    guia: \"1714817\",\n    evidenciaUrl: undefined,\n    vendedor: \"Juan P├®rez\",\n    factura: undefined,\n  },\n  {\n    id: \"VT-006\",\n    cliente: \"Diego Torres\",\n    fecha: \"2025-01-05\",\n    producto: \"Pulsera de Oro\",\n    total: 280000,\n    estado: \"Pendiente Pago\",\n    metodo: \"Contraentrega\",\n    transportadora: \"ENVIA\",\n    guia: \"1714829\",\n    evidenciaUrl: undefined,\n    vendedor: \"Ana L├│pez\",\n    factura: undefined,\n  },\n  {\n    id: \"VT-005\",\n    cliente: \"Sof├¡a Ram├¡rez\",\n    fecha: \"2025-01-05\",\n    producto: \"Cadena de Plata\",\n    total: 190000,\n    estado: \"Pendiente Pago\",\n    metodo: \"Efectivo\",\n    transportadora: \"Coordinadora\",\n    guia: \"1714819\",\n    evidenciaUrl: undefined,\n    vendedor: \"Juan P├®rez\",\n    factura: undefined,\n  },\n  {\n    id: \"VT-007\",\n    cliente: \"Valentina Cruz\",\n    fecha: \"2025-01-04\",\n    producto: \"Anillo de Compromiso\",\n    total: 850000,\n    estado: \"Pendiente Pago\",\n    metodo: \"Transferencia\",\n    transportadora: \"Servientrega\",\n    guia: \"1714821\",\n    evidenciaUrl: undefined,\n    vendedor: \"Juan P├®rez\",\n    factura: undefined,\n  },\n]\n\nexport function listVentas() {\n  return ventas\n}\n\nexport function replaceEvidence(ventaId: string, url: string) {\n  ventas = ventas.map((v) => (v.id === ventaId ? { ...v, evidenciaUrl: url } : v))\n  return ventas.find((v) => v.id === ventaId)\n}\n\n/** Sincroniza un cambio que viene desde Facturaci├│n */\nexport function applyFacturaUpdate(input: {\n  factura: string // FAC-2025-0001\n  estadoPago: EstadoPago // \"Pagado\" | \"Pendiente Pago\"\n  metodo?: MetodoPago // opcional si cambia\n  evidenciaUrl?: string // opcional\n}) {\n  ventas = ventas.map((v) =>\n    v.factura === input.factura\n      ? {\n          ...v,\n          estado: input.estadoPago,\n          metodo: input.metodo ?? v.metodo,\n          evidenciaUrl: input.evidenciaUrl ?? v.evidenciaUrl,\n        }\n      : v,\n  )\n  return ventas\n}\n",
        "type": "registry:lib"
      },
      {
        "path": "middleware.ts",
        "content": "// The @supabase/ssr package is causing import errors in the development environment\n// Uncomment this when Supabase authentication is needed\n\n// import { updateSession } from \"@/lib/supabase/middleware\"\nimport type { NextRequest } from \"next/server\"\n\nexport async function middleware(request: NextRequest) {\n  // Temporarily bypassing Supabase session update\n  // return await updateSession(request)\n\n  // Just pass through the request without any modifications\n  return\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - images - .svg, .png, .jpg, .jpeg, .gif, .webp\n     */\n    \"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\n  ],\n}\n",
        "type": "registry:block",
        "target": "~/middleware.ts"
      },
      {
        "path": "next.config.mjs",
        "content": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  images: {\n    unoptimized: true,\n  },\n}\n\nexport default nextConfig\n",
        "type": "registry:block",
        "target": "~/next.config.mjs"
      },
      {
        "path": "postcss.config.mjs",
        "content": "/** @type {import('postcss-load-config').Config} */\nconst config = {\n  plugins: {\n    '@tailwindcss/postcss': {},\n  },\n}\n\nexport default config\n",
        "type": "registry:block",
        "target": "~/postcss.config.mjs"
      },
      {
        "path": "scripts/001_create_sales_tables.sql",
        "content": "-- Tabla de ventas\nCREATE TABLE IF NOT EXISTS public.sales (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  sale_id TEXT UNIQUE NOT NULL,\n  client_name TEXT NOT NULL,\n  client_phone TEXT,\n  client_email TEXT,\n  sale_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  products JSONB NOT NULL,\n  total DECIMAL(10, 2) NOT NULL,\n  status TEXT NOT NULL CHECK (status IN ('completada', 'pendiente', 'cancelada')),\n  payment_method TEXT NOT NULL CHECK (payment_method IN ('efectivo', 'transferencia', 'tarjeta', 'contraentrega')),\n  seller_name TEXT NOT NULL,\n  photo_evidence TEXT,\n  shipping_company TEXT,\n  tracking_number TEXT,\n  mipaquete_code TEXT,\n  is_return BOOLEAN DEFAULT FALSE,\n  return_date TIMESTAMP WITH TIME ZONE,\n  notes TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Tabla para tracking de devoluciones\nCREATE TABLE IF NOT EXISTS public.return_tracking (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  sale_id UUID REFERENCES public.sales(id) ON DELETE CASCADE,\n  mipaquete_code TEXT NOT NULL,\n  last_check TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  status TEXT NOT NULL,\n  tracking_data JSONB,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- ├ìndices para mejorar el rendimiento\nCREATE INDEX IF NOT EXISTS idx_sales_status ON public.sales(status);\nCREATE INDEX IF NOT EXISTS idx_sales_payment_method ON public.sales(payment_method);\nCREATE INDEX IF NOT EXISTS idx_sales_sale_date ON public.sales(sale_date);\nCREATE INDEX IF NOT EXISTS idx_sales_mipaquete_code ON public.sales(mipaquete_code);\nCREATE INDEX IF NOT EXISTS idx_return_tracking_mipaquete_code ON public.return_tracking(mipaquete_code);\n\n-- Habilitar RLS\nALTER TABLE public.sales ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.return_tracking ENABLE ROW LEVEL SECURITY;\n\n-- Pol├¡ticas RLS (permitir acceso completo por ahora, ajustar seg├║n necesidades de autenticaci├│n)\nCREATE POLICY \"Allow all operations on sales\" ON public.sales FOR ALL USING (true) WITH CHECK (true);\nCREATE POLICY \"Allow all operations on return_tracking\" ON public.return_tracking FOR ALL USING (true) WITH CHECK (true);\n\n-- Funci├│n para actualizar updated_at autom├íticamente\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Trigger para actualizar updated_at\nCREATE TRIGGER update_sales_updated_at BEFORE UPDATE ON public.sales\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n",
        "type": "registry:block",
        "target": "~/scripts/001_create_sales_tables.sql"
      },
      {
        "path": "scripts/002_add_photo_uploaded_at.sql",
        "content": "-- Agregar columna para fecha de carga de evidencia fotogr├ífica\nALTER TABLE sales \nADD COLUMN IF NOT EXISTS photo_uploaded_at TIMESTAMP WITH TIME ZONE;\n\n-- Actualizar registros existentes con evidencia para establecer una fecha\nUPDATE sales \nSET photo_uploaded_at = updated_at \nWHERE photo_evidence IS NOT NULL AND photo_uploaded_at IS NULL;\n\n-- Crear ├¡ndice para mejorar consultas por fecha de carga\nCREATE INDEX IF NOT EXISTS idx_sales_photo_uploaded_at ON sales(photo_uploaded_at);\n",
        "type": "registry:block",
        "target": "~/scripts/002_add_photo_uploaded_at.sql"
      },
      {
        "path": "scripts/002_seed_sample_data.sql",
        "content": "-- Reemplazando datos de ejemplo con l├│gica correcta de estados\n-- Este archivo ahora solo referencia al script principal de datos\n-- Los datos de ejemplo se crean en 015_clear_and_recreate_sample_data.sql\n\n-- L├ôGICA DE ESTADOS:\n-- - Efectivo o Transferencia ÔåÆ Estado inicial: PAGADO (porque ya se pag├│)\n-- - Contraentrega ÔåÆ Estado inicial: PENDIENTE PAGO (porque se paga al recibir)\n-- - Cuando se entrega ÔåÆ Estado puede cambiar a: ENTREGADO\n\n-- Para recrear los datos de ejemplo, ejecutar:\n-- scripts/015_clear_and_recreate_sample_data.sql\n",
        "type": "registry:block",
        "target": "~/scripts/002_seed_sample_data.sql"
      },
      {
        "path": "scripts/003_add_mipaquete_payment_fields.sql",
        "content": "-- Agregar campo para marcar ventas de contraentrega como pagadas por MiPaquete\nALTER TABLE public.sales \nADD COLUMN IF NOT EXISTS paid_by_mipaquete BOOLEAN DEFAULT FALSE,\nADD COLUMN IF NOT EXISTS payment_date TIMESTAMP WITH TIME ZONE;\n\n-- ├ìndice para mejorar consultas de pagos de MiPaquete\nCREATE INDEX IF NOT EXISTS idx_sales_paid_by_mipaquete ON public.sales(paid_by_mipaquete);\nCREATE INDEX IF NOT EXISTS idx_sales_payment_date ON public.sales(payment_date);\n",
        "type": "registry:block",
        "target": "~/scripts/003_add_mipaquete_payment_fields.sql"
      },
      {
        "path": "scripts/003_create_invoices_tables.sql",
        "content": "-- Eliminando tablas existentes para recrearlas correctamente\nDROP TABLE IF EXISTS public.invoice_items CASCADE;\nDROP TABLE IF EXISTS public.invoices CASCADE;\nDROP FUNCTION IF EXISTS generate_invoice_number() CASCADE;\nDROP FUNCTION IF EXISTS update_updated_at_column() CASCADE;\n\n-- Tabla de facturas con invoice_number como clave primaria\nCREATE TABLE public.invoices (\n  invoice_number TEXT PRIMARY KEY,\n  client_name TEXT NOT NULL,\n  client_nit TEXT,\n  client_email TEXT,\n  client_phone TEXT,\n  client_address TEXT,\n  issue_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  due_date TIMESTAMP WITH TIME ZONE,\n  subtotal NUMERIC(12, 2) NOT NULL DEFAULT 0,\n  tax_rate NUMERIC(5, 2) DEFAULT 19.00,\n  tax_amount NUMERIC(12, 2) NOT NULL DEFAULT 0,\n  total NUMERIC(12, 2) NOT NULL DEFAULT 0,\n  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('paid', 'pending', 'overdue', 'cancelled')),\n  payment_method TEXT CHECK (payment_method IN ('efectivo', 'transferencia', 'tarjeta', 'contraentrega', 'credito')),\n  payment_date TIMESTAMP WITH TIME ZONE,\n  notes TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Tabla de items de factura\nCREATE TABLE public.invoice_items (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  invoice_id TEXT NOT NULL REFERENCES public.invoices(invoice_number) ON DELETE CASCADE,\n  description TEXT NOT NULL,\n  quantity NUMERIC(10, 2) NOT NULL DEFAULT 1,\n  unit_price NUMERIC(12, 2) NOT NULL DEFAULT 0,\n  total NUMERIC(12, 2) NOT NULL DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- ├ìndices para mejorar el rendimiento\nCREATE INDEX idx_invoices_client_name ON public.invoices(client_name);\nCREATE INDEX idx_invoices_status ON public.invoices(status);\nCREATE INDEX idx_invoices_issue_date ON public.invoices(issue_date);\nCREATE INDEX idx_invoice_items_invoice_id ON public.invoice_items(invoice_id);\n\n-- Funci├│n para actualizar updated_at autom├íticamente\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = NOW();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Trigger para actualizar updated_at\nCREATE TRIGGER update_invoices_updated_at\n  BEFORE UPDATE ON public.invoices\n  FOR EACH ROW\n  EXECUTE FUNCTION update_updated_at_column();\n\n-- Funci├│n para generar n├║mero de factura autom├ítico\nCREATE OR REPLACE FUNCTION generate_invoice_number()\nRETURNS TEXT AS $$\nDECLARE\n  year_part TEXT;\n  sequence_num INTEGER;\n  new_invoice_number TEXT;\nBEGIN\n  year_part := TO_CHAR(NOW(), 'YYYY');\n  \n  SELECT COALESCE(MAX(CAST(SUBSTRING(invoice_number FROM 'FAC-' || year_part || '-(.*)') AS INTEGER)), 0) + 1\n  INTO sequence_num\n  FROM public.invoices\n  WHERE invoice_number LIKE 'FAC-' || year_part || '-%';\n  \n  new_invoice_number := 'FAC-' || year_part || '-' || LPAD(sequence_num::TEXT, 4, '0');\n  \n  RETURN new_invoice_number;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Datos de ejemplo con manejo correcto de conflictos\nINSERT INTO public.invoices (invoice_number, client_name, client_nit, client_email, client_phone, issue_date, due_date, subtotal, tax_amount, total, status, payment_method)\nVALUES \n  ('FAC-2025-0001', 'Mar├¡a Gonz├ílez', '900123456-7', 'maria@example.com', '3001234567', NOW() - INTERVAL '5 days', NOW() + INTERVAL '25 days', 250000, 47500, 297500, 'paid', 'transferencia'),\n  ('FAC-2025-0002', 'Carlos Rodr├¡guez', '900234567-8', 'carlos@example.com', '3002345678', NOW() - INTERVAL '3 days', NOW() + INTERVAL '27 days', 180000, 34200, 214200, 'pending', 'credito'),\n  ('FAC-2025-0003', 'Laura Mart├¡nez', '900345678-9', 'laura@example.com', '3003456789', NOW() - INTERVAL '35 days', NOW() - INTERVAL '5 days', 420000, 79800, 499800, 'overdue', 'credito')\nON CONFLICT (invoice_number) DO NOTHING;\n\n-- Items de ejemplo sin ON CONFLICT ya que id es UUID autogenerado\nINSERT INTO public.invoice_items (invoice_id, description, quantity, unit_price, total)\nSELECT 'FAC-2025-0001', 'Anillo de Plata', 2, 125000, 250000\nWHERE NOT EXISTS (SELECT 1 FROM public.invoice_items WHERE invoice_id = 'FAC-2025-0001');\n\nINSERT INTO public.invoice_items (invoice_id, description, quantity, unit_price, total)\nSELECT 'FAC-2025-0002', 'Cadena de Oro 18k', 1, 180000, 180000\nWHERE NOT EXISTS (SELECT 1 FROM public.invoice_items WHERE invoice_id = 'FAC-2025-0002');\n\nINSERT INTO public.invoice_items (invoice_id, description, quantity, unit_price, total)\nSELECT 'FAC-2025-0003', 'Aretes de Oro', 1, 420000, 420000\nWHERE NOT EXISTS (SELECT 1 FROM public.invoice_items WHERE invoice_id = 'FAC-2025-0003');\n",
        "type": "registry:block",
        "target": "~/scripts/003_create_invoices_tables.sql"
      },
      {
        "path": "scripts/004_add_mipaquete_status.sql",
        "content": "-- Agregar columna para el estado de MiPaquete\nALTER TABLE public.sales ADD COLUMN IF NOT EXISTS mipaquete_status TEXT;\n\n-- Agregar columna para la transportadora\nALTER TABLE public.sales ADD COLUMN IF NOT EXISTS mipaquete_carrier TEXT;\n\n-- Actualizar el check constraint para incluir m├ís estados\nALTER TABLE public.sales DROP CONSTRAINT IF EXISTS sales_status_check;\nALTER TABLE public.sales ADD CONSTRAINT sales_status_check \n  CHECK (status IN ('completada', 'pendiente', 'cancelada', 'en_transito', 'entregada', 'devolucion'));\n",
        "type": "registry:block",
        "target": "~/scripts/004_add_mipaquete_status.sql"
      },
      {
        "path": "scripts/005_add_invoice_to_sales.sql",
        "content": "-- Agregar columna invoice_number a la tabla sales\nALTER TABLE public.sales \nADD COLUMN IF NOT EXISTS invoice_number TEXT REFERENCES public.invoices(invoice_number) ON DELETE SET NULL;\n\n-- Crear ├¡ndice para mejorar el rendimiento\nCREATE INDEX IF NOT EXISTS idx_sales_invoice_number ON public.sales(invoice_number);\n\n-- Comentario para documentar la relaci├│n\nCOMMENT ON COLUMN public.sales.invoice_number IS 'N├║mero de factura asociado a esta venta';\n",
        "type": "registry:block",
        "target": "~/scripts/005_add_invoice_to_sales.sql"
      },
      {
        "path": "scripts/006_link_invoices_to_sales.sql",
        "content": "-- Vincular facturas existentes con ventas correspondientes bas├índose en el nombre del cliente\nUPDATE public.sales \nSET invoice_number = 'FAC-2025-0001'\nWHERE client_name = 'Mar├¡a Gonz├ílez' AND invoice_number IS NULL;\n\nUPDATE public.sales \nSET invoice_number = 'FAC-2025-0002'\nWHERE client_name = 'Carlos Rodr├¡guez' AND invoice_number IS NULL;\n\nUPDATE public.sales \nSET invoice_number = 'FAC-2025-0003'\nWHERE client_name = 'Laura Mart├¡nez' AND invoice_number IS NULL;\n",
        "type": "registry:block",
        "target": "~/scripts/006_link_invoices_to_sales.sql"
      },
      {
        "path": "scripts/007_add_pdf_url_to_invoices.sql",
        "content": "-- Agregar columna para almacenar la URL del PDF de la factura en Vercel Blob\nALTER TABLE invoices ADD COLUMN IF NOT EXISTS pdf_url TEXT;\n\n-- Agregar ├¡ndice para b├║squedas r├ípidas por URL\nCREATE INDEX IF NOT EXISTS idx_invoices_pdf_url ON invoices(pdf_url);\n",
        "type": "registry:block",
        "target": "~/scripts/007_add_pdf_url_to_invoices.sql"
      },
      {
        "path": "scripts/008_update_invoice_status_to_three_states.sql",
        "content": "-- Actualizar la tabla de facturas para usar solo 3 estados: PAGADO, PENDIENTE, DEVOLUCION\nALTER TABLE public.invoices DROP CONSTRAINT IF EXISTS invoices_status_check;\n\n-- Actualizar estados existentes\nUPDATE public.invoices SET status = 'PENDIENTE' WHERE status IN ('pending', 'overdue');\nUPDATE public.invoices SET status = 'PAGADO' WHERE status = 'paid';\nUPDATE public.invoices SET status = 'DEVOLUCION' WHERE status = 'cancelled';\n\n-- Agregar nueva restricci├│n con solo 3 estados\nALTER TABLE public.invoices \nADD CONSTRAINT invoices_status_check \nCHECK (status IN ('PAGADO', 'PENDIENTE', 'DEVOLUCION'));\n\n-- Actualizar el valor por defecto\nALTER TABLE public.invoices ALTER COLUMN status SET DEFAULT 'PENDIENTE';\n",
        "type": "registry:block",
        "target": "~/scripts/008_update_invoice_status_to_three_states.sql"
      },
      {
        "path": "scripts/009_sync_invoice_sales_status.sql",
        "content": "-- Actualizar la tabla de ventas para usar los mismos 3 estados que las facturas\nALTER TABLE public.sales DROP CONSTRAINT IF EXISTS sales_status_check;\n\nALTER TABLE public.sales ADD CONSTRAINT sales_status_check \nCHECK (status IN ('PAGADO', 'PENDIENTE', 'DEVOLUCION'));\n\n-- Migrar los estados existentes de ventas a los nuevos estados\nUPDATE public.sales \nSET status = CASE \n  WHEN LOWER(status) IN ('completada', 'entregado') THEN 'PAGADO'\n  WHEN LOWER(status) IN ('pendiente', 'procesando') THEN 'PENDIENTE'\n  WHEN LOWER(status) IN ('cancelada', 'devolucion', 'novedad') THEN 'DEVOLUCION'\n  ELSE 'PENDIENTE'\nEND;\n\n-- Crear funci├│n para sincronizar el estado de la factura con la venta\nCREATE OR REPLACE FUNCTION sync_invoice_status_to_sale()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Actualizar el estado de la venta asociada cuando cambia el estado de la factura\n  UPDATE public.sales\n  SET status = NEW.status\n  WHERE invoice_number = NEW.invoice_number;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Crear trigger para sincronizar autom├íticamente\nDROP TRIGGER IF EXISTS sync_invoice_to_sale_trigger ON public.invoices;\nCREATE TRIGGER sync_invoice_to_sale_trigger\nAFTER UPDATE OF status ON public.invoices\nFOR EACH ROW\nWHEN (OLD.status IS DISTINCT FROM NEW.status)\nEXECUTE FUNCTION sync_invoice_status_to_sale();\n\n-- Sincronizar estados actuales de facturas a ventas\nUPDATE public.sales s\nSET status = i.status\nFROM public.invoices i\nWHERE s.invoice_number = i.invoice_number\nAND s.status != i.status;\n",
        "type": "registry:block",
        "target": "~/scripts/009_sync_invoice_sales_status.sql"
      },
      {
        "path": "scripts/010_update_payment_methods_to_three.sql",
        "content": "-- Actualizar m├®todos de pago a solo 3 opciones: efectivo, transferencia, contraentrega\n-- Migrar \"credito\" y \"tarjeta\" a \"contraentrega\"\n\n-- Actualizar tabla de ventas\nALTER TABLE public.sales DROP CONSTRAINT IF EXISTS sales_payment_method_check;\n\n-- Migrar datos existentes\nUPDATE public.sales \nSET payment_method = 'contraentrega' \nWHERE payment_method IN ('credito', 'tarjeta');\n\n-- Agregar nueva constraint con solo 3 m├®todos\nALTER TABLE public.sales \nADD CONSTRAINT sales_payment_method_check \nCHECK (payment_method IN ('efectivo', 'transferencia', 'contraentrega'));\n\n-- Actualizar tabla de facturas\nALTER TABLE public.invoices DROP CONSTRAINT IF EXISTS invoices_payment_method_check;\n\n-- Migrar datos existentes en facturas\nUPDATE public.invoices \nSET payment_method = 'contraentrega' \nWHERE payment_method IN ('credito', 'tarjeta');\n\n-- Agregar nueva constraint con solo 3 m├®todos\nALTER TABLE public.invoices \nADD CONSTRAINT invoices_payment_method_check \nCHECK (payment_method IN ('efectivo', 'transferencia', 'contraentrega'));\n\n-- Comentario explicativo\nCOMMENT ON COLUMN public.sales.payment_method IS 'M├®todo de pago: efectivo, transferencia, o contraentrega (cr├®dito)';\nCOMMENT ON COLUMN public.invoices.payment_method IS 'M├®todo de pago: efectivo, transferencia, o contraentrega (cr├®dito)';\n",
        "type": "registry:block",
        "target": "~/scripts/010_update_payment_methods_to_three.sql"
      },
      {
        "path": "scripts/011_add_shipping_info_to_invoices.sql",
        "content": "-- Agregar columnas de gu├¡a y transportadora a la tabla de facturas\nALTER TABLE public.invoices\nADD COLUMN IF NOT EXISTS guia TEXT NOT NULL DEFAULT '',\nADD COLUMN IF NOT EXISTS transportadora TEXT NOT NULL DEFAULT '';\n\n-- Actualizar facturas existentes con datos de ejemplo\nUPDATE public.invoices\nSET \n  guia = CASE \n    WHEN invoice_number = 'FAC-2025-0001' THEN 'GUIA-2025-001'\n    WHEN invoice_number = 'FAC-2025-0002' THEN 'GUIA-2025-002'\n    WHEN invoice_number = 'FAC-2025-0003' THEN 'GUIA-2025-003'\n    ELSE 'GUIA-' || SUBSTRING(invoice_number FROM 9)\n  END,\n  transportadora = CASE \n    WHEN invoice_number = 'FAC-2025-0001' THEN 'Servientrega'\n    WHEN invoice_number = 'FAC-2025-0002' THEN 'Coordinadora'\n    WHEN invoice_number = 'FAC-2025-0003' THEN 'Interrapidisimo'\n    ELSE 'Coordinadora'\n  END\nWHERE guia = '' OR transportadora = '';\n\n-- Crear ├¡ndice para b├║squedas por gu├¡a\nCREATE INDEX IF NOT EXISTS idx_invoices_guia ON public.invoices(guia);\nCREATE INDEX IF NOT EXISTS idx_invoices_transportadora ON public.invoices(transportadora);\n",
        "type": "registry:block",
        "target": "~/scripts/011_add_shipping_info_to_invoices.sql"
      },
      {
        "path": "scripts/012_update_invoice_status_and_add_location.sql",
        "content": "-- Actualizar estados de facturas a ENTREGADO, PENDIENTE PAGO, PAGADO\n-- Agregar campos de ciudad y barrio\n\n-- Agregar columnas de ciudad y barrio\nALTER TABLE public.invoices \nADD COLUMN IF NOT EXISTS ciudad TEXT,\nADD COLUMN IF NOT EXISTS barrio TEXT;\n\n-- Actualizar el constraint de status para los nuevos estados\nALTER TABLE public.invoices \nDROP CONSTRAINT IF EXISTS invoices_status_check;\n\nALTER TABLE public.invoices \nADD CONSTRAINT invoices_status_check \nCHECK (status IN ('ENTREGADO', 'PENDIENTE PAGO', 'PAGADO'));\n\n-- Migrar estados existentes a los nuevos\nUPDATE public.invoices \nSET status = CASE \n  WHEN status IN ('paid', 'PAGADO') THEN 'PAGADO'\n  WHEN status IN ('pending', 'PENDIENTE', 'overdue') THEN 'PENDIENTE PAGO'\n  WHEN status IN ('cancelled', 'DEVOLUCION') THEN 'PENDIENTE PAGO'\n  ELSE 'PENDIENTE PAGO'\nEND;\n\n-- Actualizar facturas de ejemplo con datos de ciudad y barrio\nUPDATE public.invoices \nSET ciudad = 'C├║cuta', barrio = 'Centro'\nWHERE invoice_number = 'FAC-2025-0001';\n\nUPDATE public.invoices \nSET ciudad = 'Villa del Rosario', barrio = 'Lomitas del Trapiche'\nWHERE invoice_number = 'FAC-2025-0002';\n\nUPDATE public.invoices \nSET ciudad = 'C├║cuta', barrio = 'La Libertad'\nWHERE invoice_number = 'FAC-2025-0003';\n\n-- Actualizar la tabla de ventas para usar los mismos estados\nALTER TABLE public.sales \nDROP CONSTRAINT IF EXISTS sales_status_check;\n\nALTER TABLE public.sales \nADD CONSTRAINT sales_status_check \nCHECK (status IN ('ENTREGADO', 'PENDIENTE PAGO', 'PAGADO'));\n\n-- Migrar estados de ventas\nUPDATE public.sales \nSET status = CASE \n  WHEN status IN ('Completada', 'Entregado', 'ENTREGADO') THEN 'ENTREGADO'\n  WHEN status IN ('Pendiente', 'PENDIENTE') THEN 'PENDIENTE PAGO'\n  WHEN status IN ('PAGADO') THEN 'PAGADO'\n  ELSE 'PENDIENTE PAGO'\nEND;\n\n-- Actualizar el trigger para sincronizar estados entre facturas y ventas\nDROP TRIGGER IF EXISTS sync_invoice_status_to_sale ON public.invoices;\nDROP FUNCTION IF EXISTS sync_invoice_status_to_sale();\n\nCREATE OR REPLACE FUNCTION sync_invoice_status_to_sale()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Actualizar el estado de la venta asociada cuando cambia el estado de la factura\n  UPDATE public.sales\n  SET status = NEW.status\n  WHERE invoice_number = NEW.invoice_number;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER sync_invoice_status_to_sale\nAFTER UPDATE OF status ON public.invoices\nFOR EACH ROW\nEXECUTE FUNCTION sync_invoice_status_to_sale();\n",
        "type": "registry:block",
        "target": "~/scripts/012_update_invoice_status_and_add_location.sql"
      },
      {
        "path": "scripts/013_fix_sales_status_sync_with_invoices.sql",
        "content": "-- Script para sincronizar correctamente los estados entre ventas y facturas\n-- Los nuevos estados son: ENTREGADO, PENDIENTE PAGO, PAGADO\n\n-- Paso 1: Actualizar los estados de las ventas que tienen facturas asociadas\n-- El estado de la venta debe ser el mismo que el de su factura\nUPDATE public.sales s\nSET status = i.status\nFROM public.invoices i\nWHERE s.invoice_id = i.invoice_id\nAND s.status != i.status;\n\n-- Paso 2: Para las ventas sin factura, asignar estado basado en el m├®todo de pago\n-- Si es efectivo o transferencia -> PAGADO\n-- Si es contraentrega -> PENDIENTE PAGO\nUPDATE public.sales\nSET status = CASE \n  WHEN payment_method IN ('efectivo', 'transferencia') THEN 'PAGADO'\n  WHEN payment_method = 'contraentrega' THEN 'PENDIENTE PAGO'\n  ELSE status\nEND\nWHERE invoice_id IS NULL;\n\n-- Paso 3: Actualizar datos de ejemplo para que coincidan con las facturas\n-- VT-001 tiene factura FAC-2025-0001\nUPDATE public.sales \nSET status = (SELECT status FROM public.invoices WHERE invoice_number = 'FAC-2025-0001')\nWHERE sale_id = 'VT-001';\n\n-- VT-002 tiene factura FAC-2025-0002\nUPDATE public.sales \nSET status = (SELECT status FROM public.invoices WHERE invoice_number = 'FAC-2025-0002')\nWHERE sale_id = 'VT-002';\n\n-- VT-003 tiene factura FAC-2025-0003\nUPDATE public.sales \nSET status = (SELECT status FROM public.invoices WHERE invoice_number = 'FAC-2025-0003')\nWHERE sale_id = 'VT-003';\n\n-- Paso 4: Recrear el trigger para sincronizaci├│n autom├ítica\nDROP TRIGGER IF EXISTS sync_invoice_status_to_sale ON public.invoices;\nDROP FUNCTION IF EXISTS sync_invoice_status_to_sale();\n\nCREATE OR REPLACE FUNCTION sync_invoice_status_to_sale()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Cuando se actualiza el estado de una factura, actualizar el estado de la venta asociada\n  IF NEW.status IS DISTINCT FROM OLD.status THEN\n    UPDATE public.sales\n    SET status = NEW.status\n    WHERE invoice_id = NEW.invoice_id;\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER sync_invoice_status_to_sale\nAFTER UPDATE OF status ON public.invoices\nFOR EACH ROW\nEXECUTE FUNCTION sync_invoice_status_to_sale();\n\n-- Paso 5: Crear trigger para asignar estado inicial al crear factura\nDROP TRIGGER IF EXISTS set_initial_invoice_status ON public.invoices;\nDROP FUNCTION IF EXISTS set_initial_invoice_status();\n\nCREATE OR REPLACE FUNCTION set_initial_invoice_status()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Si no se especifica un estado, asignarlo basado en el m├®todo de pago\n  IF NEW.status IS NULL THEN\n    NEW.status = CASE \n      WHEN NEW.payment_method IN ('efectivo', 'transferencia') THEN 'PAGADO'\n      WHEN NEW.payment_method = 'contraentrega' THEN 'PENDIENTE PAGO'\n      ELSE 'PENDIENTE PAGO'\n    END;\n  END IF;\n  \n  -- Actualizar el estado de la venta asociada si existe\n  IF NEW.sale_id IS NOT NULL THEN\n    UPDATE public.sales\n    SET status = NEW.status\n    WHERE sale_id = NEW.sale_id;\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER set_initial_invoice_status\nBEFORE INSERT ON public.invoices\nFOR EACH ROW\nEXECUTE FUNCTION set_initial_invoice_status();\n",
        "type": "registry:block",
        "target": "~/scripts/013_fix_sales_status_sync_with_invoices.sql"
      },
      {
        "path": "scripts/014_fix_all_status_final.sql",
        "content": "-- Script definitivo para corregir TODOS los estados del sistema\n-- Solo existen 3 estados v├ílidos: ENTREGADO, PENDIENTE PAGO, PAGADO\n\n-- PASO 1: Actualizar la tabla de ventas para usar SOLO los 3 estados v├ílidos\nALTER TABLE public.sales DROP CONSTRAINT IF EXISTS sales_status_check;\nALTER TABLE public.sales ADD CONSTRAINT sales_status_check \n  CHECK (status IN ('entregado', 'pendiente pago', 'pagado'));\n\n-- PASO 2: Actualizar TODAS las ventas existentes a los nuevos estados\n-- Mapeo de estados antiguos a nuevos:\n-- 'completada' -> 'entregado'\n-- 'pendiente' -> 'pendiente pago'\n-- 'entregada' -> 'entregado'\n-- cualquier otro -> 'pendiente pago'\n\nUPDATE public.sales\nSET status = CASE \n  WHEN LOWER(status) IN ('completada', 'entregada', 'entregado') THEN 'entregado'\n  WHEN LOWER(status) IN ('pendiente', 'pendiente pago') THEN 'pendiente pago'\n  WHEN LOWER(status) IN ('pagado', 'pagada') THEN 'pagado'\n  ELSE 'pendiente pago'\nEND;\n\n-- PASO 3: Sincronizar estados de ventas con sus facturas (si existen)\n-- El estado de la factura es el estado maestro\nUPDATE public.sales s\nSET status = i.status\nFROM public.invoices i\nWHERE s.sale_id = i.sale_id\n  AND i.status IS NOT NULL;\n\n-- PASO 4: Recrear el trigger para mantener sincronizaci├│n autom├ítica\nDROP TRIGGER IF EXISTS sync_invoice_status_to_sale ON public.invoices;\nDROP FUNCTION IF EXISTS sync_invoice_status_to_sale();\n\nCREATE OR REPLACE FUNCTION sync_invoice_status_to_sale()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Cuando se actualiza el estado de una factura, actualizar la venta asociada\n  IF NEW.status IS DISTINCT FROM OLD.status THEN\n    UPDATE public.sales\n    SET status = NEW.status\n    WHERE sale_id = NEW.sale_id;\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER sync_invoice_status_to_sale\nAFTER UPDATE OF status ON public.invoices\nFOR EACH ROW\nEXECUTE FUNCTION sync_invoice_status_to_sale();\n\n-- PASO 5: Actualizar datos de ejemplo para que coincidan con facturas\n-- VT-001 tiene factura FAC-2025-0001\n-- VT-002 tiene factura FAC-2025-0002  \n-- VT-003 tiene factura FAC-2025-0003\n\n-- Verificar y actualizar basado en las facturas existentes\nUPDATE public.sales s\nSET status = (\n  SELECT i.status \n  FROM public.invoices i \n  WHERE i.sale_id = s.sale_id \n  LIMIT 1\n)\nWHERE EXISTS (\n  SELECT 1 FROM public.invoices i WHERE i.sale_id = s.sale_id\n);\n",
        "type": "registry:block",
        "target": "~/scripts/014_fix_all_status_final.sql"
      },
      {
        "path": "scripts/015_clear_and_recreate_sample_data.sql",
        "content": "-- Limpiar todos los datos de ejemplo existentes\nDELETE FROM public.invoice_items;\nDELETE FROM public.invoices;\nDELETE FROM public.sales;\n\n-- Reiniciar las secuencias si existen\n-- (Esto asegura que los IDs comiencen desde 1 nuevamente)\n\n-- Crear facturas de ejemplo con la l├│gica correcta de estados\n-- REGLA: \n-- - Efectivo o Transferencia ÔåÆ Estado: PAGADO (porque ya se pag├│)\n-- - Contraentrega ÔåÆ Estado: PENDIENTE PAGO (porque se paga al recibir)\n\nINSERT INTO public.invoices (\n  invoice_number, \n  sale_id, \n  client_name, \n  client_nit, \n  client_email, \n  client_phone, \n  client_address,\n  city,\n  neighborhood,\n  issue_date, \n  due_date, \n  subtotal, \n  tax, \n  total, \n  status, \n  payment_method,\n  tracking_number,\n  shipping_company,\n  notes\n) VALUES\n-- Factura 1: Transferencia ÔåÆ PAGADO\n('FAC-2025-0001', 'VT-001', 'Mar├¡a Gonz├ílez', '1234567890', 'maria.gonzalez@email.com', '3001234567', \n 'Calle 45 #23-10', 'Bogot├í', 'Chapinero', \n '2025-01-07', '2025-01-22', 285000, 0, 285000, \n 'pagado', 'transferencia', 'SERV-2025-001', 'Servientrega', \n 'Cliente frecuente - Entrega prioritaria'),\n\n-- Factura 2: Efectivo ÔåÆ PAGADO\n('FAC-2025-0002', 'VT-002', 'Carlos Rodr├¡guez', '9876543210', 'carlos.rodriguez@email.com', '3009876543',\n 'Carrera 15 #67-89', 'Medell├¡n', 'El Poblado',\n '2025-01-07', '2025-01-22', 125000, 0, 125000,\n 'pagado', 'efectivo', 'COORD-2025-001', 'Coordinadora',\n 'Pago en efectivo recibido'),\n\n-- Factura 3: Contraentrega ÔåÆ PENDIENTE PAGO\n('FAC-2025-0003', 'VT-003', 'Laura Mart├¡nez', '5555666677', 'laura.martinez@email.com', '3015551234',\n 'Avenida 68 #45-12', 'Cali', 'Ciudad Jard├¡n',\n '2025-01-06', '2025-01-21', 450000, 0, 450000,\n 'pendiente pago', 'contraentrega', 'INTER-2025-001', 'Interrapidisimo',\n 'Pago contra entrega - Verificar al entregar'),\n\n-- Factura 4: Transferencia ÔåÆ PAGADO (ya entregado)\n('FAC-2025-0004', 'VT-004', 'Pedro S├ínchez', '1122334455', 'pedro.sanchez@email.com', '3007778888',\n 'Calle 100 #15-20', 'Barranquilla', 'El Prado',\n '2025-01-06', '2025-01-21', 320000, 0, 320000,\n 'entregado', 'transferencia', 'SERV-2025-002', 'Servientrega',\n 'Entrega confirmada - Cliente satisfecho'),\n\n-- Factura 5: Efectivo ÔåÆ PAGADO\n('FAC-2025-0005', 'VT-005', 'Sof├¡a Ram├¡rez', '9988776655', 'sofia.ramirez@email.com', '3012223333',\n 'Carrera 7 #32-41', 'Cartagena', 'Bocagrande',\n '2025-01-05', '2025-01-20', 190000, 0, 190000,\n 'pagado', 'efectivo', 'COORD-2025-002', 'Coordinadora',\n 'Pago en efectivo - Factura entregada'),\n\n-- Factura 6: Contraentrega ÔåÆ PENDIENTE PAGO\n('FAC-2025-0006', 'VT-006', 'Diego Torres', '4433221100', 'diego.torres@email.com', '3018889999',\n 'Calle 85 #50-30', 'Bucaramanga', 'Cabecera',\n '2025-01-05', '2025-01-20', 280000, 0, 280000,\n 'pendiente pago', 'contraentrega', 'INTER-2025-002', 'Interrapidisimo',\n 'Contraentrega - Cobrar al entregar');\n\n-- Crear los items de las facturas\nINSERT INTO public.invoice_items (invoice_id, description, quantity, unit_price, total) VALUES\n-- Items para Factura 1\n((SELECT id FROM public.invoices WHERE invoice_number = 'FAC-2025-0001'), 'Bal├¡n de Oro 18k', 2, 142500, 285000),\n\n-- Items para Factura 2\n((SELECT id FROM public.invoices WHERE invoice_number = 'FAC-2025-0002'), 'Anillo de Plata 925', 1, 125000, 125000),\n\n-- Items para Factura 3\n((SELECT id FROM public.invoices WHERE invoice_number = 'FAC-2025-0003'), 'Bal├¡n Premium', 3, 150000, 450000),\n\n-- Items para Factura 4\n((SELECT id FROM public.invoices WHERE invoice_number = 'FAC-2025-0004'), 'Aretes de Oro 18k', 1, 320000, 320000),\n\n-- Items para Factura 5\n((SELECT id FROM public.invoices WHERE invoice_number = 'FAC-2025-0005'), 'Cadena de Plata 925', 2, 95000, 190000),\n\n-- Items para Factura 6\n((SELECT id FROM public.invoices WHERE invoice_number = 'FAC-2025-0006'), 'Pulsera de Oro 18k', 1, 280000, 280000);\n\n-- Crear las ventas asociadas a las facturas\n-- Las ventas heredan autom├íticamente el estado de sus facturas\nINSERT INTO public.sales (\n  sale_id, \n  client_name, \n  client_phone, \n  client_email, \n  sale_date, \n  products, \n  total, \n  status, \n  payment_method, \n  seller_name, \n  shipping_company, \n  tracking_number,\n  invoice_number\n) VALUES\n('VT-001', 'Mar├¡a Gonz├ílez', '3001234567', 'maria.gonzalez@email.com', \n '2025-01-07 10:30:00', \n '[{\"name\": \"Bal├¡n de Oro 18k\", \"quantity\": 2, \"price\": 142500}]', \n 285000, 'pagado', 'transferencia', 'Juan P├®rez', \n 'Servientrega', 'SERV-2025-001', 'FAC-2025-0001'),\n\n('VT-002', 'Carlos Rodr├¡guez', '3009876543', 'carlos.rodriguez@email.com', \n '2025-01-07 14:20:00', \n '[{\"name\": \"Anillo de Plata 925\", \"quantity\": 1, \"price\": 125000}]', \n 125000, 'pagado', 'efectivo', 'Ana L├│pez', \n 'Coordinadora', 'COORD-2025-001', 'FAC-2025-0002'),\n\n('VT-003', 'Laura Mart├¡nez', '3015551234', 'laura.martinez@email.com', \n '2025-01-06 09:15:00', \n '[{\"name\": \"Bal├¡n Premium\", \"quantity\": 3, \"price\": 150000}]', \n 450000, 'pendiente pago', 'contraentrega', 'Juan P├®rez', \n 'Interrapidisimo', 'INTER-2025-001', 'FAC-2025-0003'),\n\n('VT-004', 'Pedro S├ínchez', '3007778888', 'pedro.sanchez@email.com', \n '2025-01-06 16:45:00', \n '[{\"name\": \"Aretes de Oro 18k\", \"quantity\": 1, \"price\": 320000}]', \n 320000, 'entregado', 'transferencia', 'Ana L├│pez', \n 'Servientrega', 'SERV-2025-002', 'FAC-2025-0004'),\n\n('VT-005', 'Sof├¡a Ram├¡rez', '3012223333', 'sofia.ramirez@email.com', \n '2025-01-05 11:00:00', \n '[{\"name\": \"Cadena de Plata 925\", \"quantity\": 2, \"price\": 95000}]', \n 190000, 'pagado', 'efectivo', 'Juan P├®rez', \n 'Coordinadora', 'COORD-2025-002', 'FAC-2025-0005'),\n\n('VT-006', 'Diego Torres', '3018889999', 'diego.torres@email.com', \n '2025-01-05 13:30:00', \n '[{\"name\": \"Pulsera de Oro 18k\", \"quantity\": 1, \"price\": 280000}]', \n 280000, 'pendiente pago', 'contraentrega', 'Ana L├│pez', \n 'Interrapidisimo', 'INTER-2025-002', 'FAC-2025-0006');\n",
        "type": "registry:block",
        "target": "~/scripts/015_clear_and_recreate_sample_data.sql"
      },
      {
        "path": "scripts/016_final_fix_add_location_and_fix_data.sql",
        "content": "-- Script final para corregir la base de datos y los datos de ejemplo\n-- Este script:\n-- 1. Agrega las columnas ciudad y barrio a invoices\n-- 2. Limpia todos los datos de ejemplo\n-- 3. Crea nuevos datos de ejemplo con la l├│gica correcta\n-- 4. Crea el trigger para sincronizar estados entre facturas y ventas\n\n-- Paso 1: Agregar columnas de ubicaci├│n a invoices si no existen\nDO $$ \nBEGIN\n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns \n                   WHERE table_name = 'invoices' AND column_name = 'ciudad') THEN\n        ALTER TABLE invoices ADD COLUMN ciudad TEXT;\n    END IF;\n    \n    IF NOT EXISTS (SELECT 1 FROM information_schema.columns \n                   WHERE table_name = 'invoices' AND column_name = 'barrio') THEN\n        ALTER TABLE invoices ADD COLUMN barrio TEXT;\n    END IF;\nEND $$;\n\n-- Paso 2: Eliminar todos los datos de ejemplo existentes\nDELETE FROM invoice_items;\nDELETE FROM invoices;\nDELETE FROM sales;\n\n-- Paso 3: Crear trigger para sincronizar estados entre facturas y ventas\nDROP TRIGGER IF EXISTS sync_invoice_status_to_sale ON invoices;\nDROP FUNCTION IF EXISTS sync_invoice_status_to_sale();\n\nCREATE OR REPLACE FUNCTION sync_invoice_status_to_sale()\nRETURNS TRIGGER AS $$\nBEGIN\n    -- Actualizar el estado de la venta cuando cambia el estado de la factura\n    UPDATE sales \n    SET status = NEW.status,\n        updated_at = NOW()\n    WHERE invoice_number = NEW.invoice_number;\n    \n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER sync_invoice_status_to_sale\nAFTER INSERT OR UPDATE OF status ON invoices\nFOR EACH ROW\nEXECUTE FUNCTION sync_invoice_status_to_sale();\n\n-- Paso 4: Crear nuevas facturas de ejemplo con datos correctos\n-- Factura 1: Pago por Transferencia = Estado PAGADO\nINSERT INTO invoices (\n    invoice_number, client_name, client_nit, client_email, client_phone, \n    client_address, ciudad, barrio, issue_date, due_date, \n    subtotal, tax_rate, tax_amount, total, \n    status, payment_method, payment_date,\n    guia, transportadora,\n    notes, created_at, updated_at\n) VALUES (\n    'FAC-2025-0001',\n    'Mar├¡a Gonz├ílez',\n    '1090460001',\n    'maria.gonzalez@email.com',\n    '3001234567',\n    'Calle 45 #23-10',\n    'Bogot├í',\n    'Chapinero',\n    '2025-01-07',\n    '2025-01-21',\n    239495.80,\n    19,\n    45504.20,\n    285000,\n    'PAGADO',\n    'transferencia',\n    '2025-01-07',\n    'GUIA-2025-0001',\n    'Servientrega',\n    'Cliente frecuente',\n    NOW(),\n    NOW()\n);\n\n-- Items para factura 1\nINSERT INTO invoice_items (id, invoice_id, description, quantity, unit_price, total, created_at)\nVALUES \n    (gen_random_uuid(), 'FAC-2025-0001', 'Bal├¡n de Oro 18k', 1, 239495.80, 239495.80, NOW());\n\n-- Factura 2: Pago por Efectivo = Estado PAGADO\nINSERT INTO invoices (\n    invoice_number, client_name, client_nit, client_email, client_phone, \n    client_address, ciudad, barrio, issue_date, due_date, \n    subtotal, tax_rate, tax_amount, total, \n    status, payment_method, payment_date,\n    guia, transportadora,\n    notes, created_at, updated_at\n) VALUES (\n    'FAC-2025-0002',\n    'Carlos Rodr├¡guez',\n    '1090460002',\n    'carlos.rodriguez@email.com',\n    '3009876543',\n    'Av 1 9 53 lomitas del trapiche',\n    'C├║cuta',\n    'Centro',\n    '2025-01-07',\n    '2025-01-21',\n    105042,\n    19,\n    19958,\n    125000,\n    'PAGADO',\n    'efectivo',\n    '2025-01-07',\n    'GUIA-2025-0002',\n    'Coordinadora',\n    'Pago en efectivo al momento de la compra',\n    NOW(),\n    NOW()\n);\n\n-- Items para factura 2\nINSERT INTO invoice_items (id, invoice_id, description, quantity, unit_price, total, created_at)\nVALUES \n    (gen_random_uuid(), 'FAC-2025-0002', 'Anillo de Plata', 1, 105042, 105042, NOW());\n\n-- Factura 3: Pago por Contraentrega = Estado PENDIENTE PAGO\nINSERT INTO invoices (\n    invoice_number, client_name, client_nit, client_email, client_phone, \n    client_address, ciudad, barrio, issue_date, due_date, \n    subtotal, tax_rate, tax_amount, total, \n    status, payment_method, payment_date,\n    guia, transportadora,\n    notes, created_at, updated_at\n) VALUES (\n    'FAC-2025-0003',\n    'Laura Mart├¡nez',\n    '1090460003',\n    'laura.martinez@email.com',\n    '3012345678',\n    'Carrera 15 #30-45',\n    'Medell├¡n',\n    'El Poblado',\n    '2025-01-06',\n    '2025-01-20',\n    378151.26,\n    19,\n    71848.74,\n    450000,\n    'PENDIENTE PAGO',\n    'contraentrega',\n    NULL,\n    'GUIA-2025-0003',\n    'Servientrega',\n    'Pago contra entrega',\n    NOW(),\n    NOW()\n);\n\n-- Items para factura 3\nINSERT INTO invoice_items (id, invoice_id, description, quantity, unit_price, total, created_at)\nVALUES \n    (gen_random_uuid(), 'FAC-2025-0003', 'Bal├¡n Premium', 1, 378151.26, 378151.26, NOW());\n\n-- Factura 4: Pago por Transferencia = Estado ENTREGADO (ya se entreg├│)\nINSERT INTO invoices (\n    invoice_number, client_name, client_nit, client_email, client_phone, \n    client_address, ciudad, barrio, issue_date, due_date, \n    subtotal, tax_rate, tax_amount, total, \n    status, payment_method, payment_date,\n    guia, transportadora,\n    notes, created_at, updated_at\n) VALUES (\n    'FAC-2025-0004',\n    'Pedro S├ínchez',\n    '1090460004',\n    'pedro.sanchez@email.com',\n    '3015678901',\n    'Calle 80 #12-34',\n    'Cali',\n    'Granada',\n    '2025-01-06',\n    '2025-01-20',\n    268907.56,\n    19,\n    51092.44,\n    320000,\n    'ENTREGADO',\n    'transferencia',\n    '2025-01-06',\n    'GUIA-2025-0004',\n    'Servientrega',\n    'Pedido entregado exitosamente',\n    NOW(),\n    NOW()\n);\n\n-- Items para factura 4\nINSERT INTO invoice_items (id, invoice_id, description, quantity, unit_price, total, created_at)\nVALUES \n    (gen_random_uuid(), 'FAC-2025-0004', 'Aretes de Oro', 1, 268907.56, 268907.56, NOW());\n\n-- Factura 5: Pago por Contraentrega = Estado PENDIENTE PAGO\nINSERT INTO invoices (\n    invoice_number, client_name, client_nit, client_email, client_phone, \n    client_address, ciudad, barrio, issue_date, due_date, \n    subtotal, tax_rate, tax_amount, total, \n    status, payment_method, payment_date,\n    guia, transportadora,\n    notes, created_at, updated_at\n) VALUES (\n    'FAC-2025-0005',\n    'Diego Torres',\n    '1090460005',\n    'diego.torres@email.com',\n    '3018765432',\n    'Avenida 5 #20-15',\n    'Barranquilla',\n    'El Prado',\n    '2025-01-05',\n    '2025-01-19',\n    235294.12,\n    19,\n    44705.88,\n    280000,\n    'PENDIENTE PAGO',\n    'contraentrega',\n    NULL,\n    'GUIA-2025-0005',\n    'Envia',\n    'Pendiente de entrega',\n    NOW(),\n    NOW()\n);\n\n-- Items para factura 5\nINSERT INTO invoice_items (id, invoice_id, description, quantity, unit_price, total, created_at)\nVALUES \n    (gen_random_uuid(), 'FAC-2025-0005', 'Pulsera de Oro', 1, 235294.12, 235294.12, NOW());\n\n-- Paso 5: Crear ventas asociadas a las facturas\n-- Las ventas se crean con el mismo estado que sus facturas\nINSERT INTO sales (\n    id, sale_id, client_name, client_phone, client_email,\n    sale_date, products, total, status, payment_method,\n    seller_name, shipping_company, tracking_number,\n    invoice_number, created_at, updated_at\n) VALUES\n-- Venta 1: Asociada a FAC-2025-0001 (PAGADO)\n(\n    gen_random_uuid(),\n    'VT-001',\n    'Mar├¡a Gonz├ílez',\n    '3001234567',\n    'maria.gonzalez@email.com',\n    '2025-01-07',\n    '[{\"name\": \"Bal├¡n de Oro 18k\", \"quantity\": 1, \"price\": 285000}]'::jsonb,\n    285000,\n    'PAGADO',\n    'transferencia',\n    'Juan P├®rez',\n    'Servientrega',\n    '1714015',\n    'FAC-2025-0001',\n    NOW(),\n    NOW()\n),\n-- Venta 2: Asociada a FAC-2025-0002 (PAGADO)\n(\n    gen_random_uuid(),\n    'VT-002',\n    'Carlos Rodr├¡guez',\n    '3009876543',\n    'carlos.rodriguez@email.com',\n    '2025-01-07',\n    '[{\"name\": \"Anillo de Plata\", \"quantity\": 1, \"price\": 125000}]'::jsonb,\n    125000,\n    'PAGADO',\n    'efectivo',\n    'Ana L├│pez',\n    'Coordinadora',\n    '1714016',\n    'FAC-2025-0002',\n    NOW(),\n    NOW()\n),\n-- Venta 3: Asociada a FAC-2025-0003 (PENDIENTE PAGO)\n(\n    gen_random_uuid(),\n    'VT-003',\n    'Laura Mart├¡nez',\n    '3012345678',\n    'laura.martinez@email.com',\n    '2025-01-06',\n    '[{\"name\": \"Bal├¡n Premium\", \"quantity\": 1, \"price\": 450000}]'::jsonb,\n    450000,\n    'PENDIENTE PAGO',\n    'contraentrega',\n    'Juan P├®rez',\n    'Servientrega',\n    '1714017',\n    'FAC-2025-0003',\n    NOW(),\n    NOW()\n),\n-- Venta 4: Asociada a FAC-2025-0004 (ENTREGADO)\n(\n    gen_random_uuid(),\n    'VT-004',\n    'Pedro S├ínchez',\n    '3015678901',\n    'pedro.sanchez@email.com',\n    '2025-01-06',\n    '[{\"name\": \"Aretes de Oro\", \"quantity\": 1, \"price\": 320000}]'::jsonb,\n    320000,\n    'ENTREGADO',\n    'transferencia',\n    'Ana L├│pez',\n    'Servientrega',\n    '1714018',\n    'FAC-2025-0004',\n    NOW(),\n    NOW()\n),\n-- Venta 5: Asociada a FAC-2025-0005 (PENDIENTE PAGO)\n(\n    gen_random_uuid(),\n    'VT-005',\n    'Diego Torres',\n    '3018765432',\n    'diego.torres@email.com',\n    '2025-01-05',\n    '[{\"name\": \"Pulsera de Oro\", \"quantity\": 1, \"price\": 280000}]'::jsonb,\n    280000,\n    'PENDIENTE PAGO',\n    'contraentrega',\n    'Ana L├│pez',\n    'Envia',\n    '1714020',\n    'FAC-2025-0005',\n    NOW(),\n    NOW()\n);\n",
        "type": "registry:block",
        "target": "~/scripts/016_final_fix_add_location_and_fix_data.sql"
      },
      {
        "path": "scripts/017_add_ciudad_barrio_and_fix_iva.sql",
        "content": "-- Agregar columnas de ciudad y barrio a la tabla de facturas\nALTER TABLE invoices \nADD COLUMN IF NOT EXISTS ciudad TEXT,\nADD COLUMN IF NOT EXISTS barrio TEXT;\n\n-- Actualizar facturas existentes con datos de ejemplo\nUPDATE invoices SET ciudad = 'C├║cuta', barrio = 'Centro' WHERE invoice_number = 'FAC-2025-002';\nUPDATE invoices SET ciudad = 'Bogot├í', barrio = 'Chapinero' WHERE invoice_number = 'FAC-2025-001';\nUPDATE invoices SET ciudad = 'Medell├¡n', barrio = 'El Poblado' WHERE invoice_number = 'FAC-2025-003';\n\n-- Comentario: Las columnas ciudad y barrio ahora son parte de la tabla de facturas\n-- y se mostrar├ín en la columna \"TRANSPORTADORA / CIUDAD\" de la tabla\n",
        "type": "registry:block",
        "target": "~/scripts/017_add_ciudad_barrio_and_fix_iva.sql"
      },
      {
        "path": "scripts/018_update_status_to_devolucion.sql",
        "content": "-- Actualizar los estados del sistema a: PAGADO, PENDIENTE PAGO, DEVOLUCION\n-- Este script actualiza la restricci├│n de estados y migra los datos existentes\n\n-- 1. Eliminar la restricci├│n anterior de estados\nALTER TABLE invoices DROP CONSTRAINT IF EXISTS invoices_status_check;\nALTER TABLE sales DROP CONSTRAINT IF EXISTS sales_status_check;\n\n-- 2. Agregar la nueva restricci├│n con los 3 estados correctos\nALTER TABLE invoices ADD CONSTRAINT invoices_status_check \n  CHECK (status IN ('PAGADO', 'PENDIENTE PAGO', 'DEVOLUCION'));\n\nALTER TABLE sales ADD CONSTRAINT sales_status_check \n  CHECK (status IN ('PAGADO', 'PENDIENTE PAGO', 'DEVOLUCION'));\n\n-- 3. Migrar los estados existentes\nUPDATE invoices SET status = 'DEVOLUCION' WHERE LOWER(status) IN ('entregado', 'devolucion', 'devoluci├│n');\nUPDATE invoices SET status = 'PAGADO' WHERE LOWER(status) = 'pagado';\nUPDATE invoices SET status = 'PENDIENTE PAGO' WHERE LOWER(status) IN ('pendiente pago', 'pendiente');\n\nUPDATE sales SET status = 'DEVOLUCION' WHERE LOWER(status) IN ('entregado', 'devolucion', 'devoluci├│n') OR is_return = true;\nUPDATE sales SET status = 'PAGADO' WHERE LOWER(status) = 'pagado';\nUPDATE sales SET status = 'PENDIENTE PAGO' WHERE LOWER(status) IN ('pendiente pago', 'pendiente', 'completada');\n\n-- 4. Actualizar el trigger para sincronizar estados entre facturas y ventas\nCREATE OR REPLACE FUNCTION sync_invoice_status_to_sale()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Si la factura tiene una venta asociada, actualizar el estado de la venta\n  IF NEW.sale_id IS NOT NULL THEN\n    UPDATE sales \n    SET status = NEW.status\n    WHERE id = NEW.sale_id;\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Recrear el trigger\nDROP TRIGGER IF EXISTS trigger_sync_invoice_status ON invoices;\nCREATE TRIGGER trigger_sync_invoice_status\n  AFTER INSERT OR UPDATE OF status ON invoices\n  FOR EACH ROW\n  EXECUTE FUNCTION sync_invoice_status_to_sale();\n\n-- 5. Comentario explicativo\nCOMMENT ON CONSTRAINT invoices_status_check ON invoices IS \n  'Estados v├ílidos: PAGADO (ya se recibi├│ el pago), PENDIENTE PAGO (contraentrega/cr├®dito), DEVOLUCION (producto devuelto)';\n\nCOMMENT ON CONSTRAINT sales_status_check ON sales IS \n  'Estados v├ílidos: PAGADO (ya se recibi├│ el pago), PENDIENTE PAGO (contraentrega/cr├®dito), DEVOLUCION (producto devuelto)';\n",
        "type": "registry:block",
        "target": "~/scripts/018_update_status_to_devolucion.sql"
      },
      {
        "path": "scripts/019_add_reference_to_invoice_items.sql",
        "content": "-- Agregar columna de referencia a invoice_items\nALTER TABLE invoice_items\nADD COLUMN IF NOT EXISTS reference TEXT;\n\n-- Actualizar datos de ejemplo con referencias\nUPDATE invoice_items\nSET reference = CASE \n  WHEN description LIKE '%Anillo%' THEN 'REF-001'\n  WHEN description LIKE '%Balin%' THEN 'REF-002'\n  WHEN description LIKE '%Aretes%' THEN 'REF-003'\n  WHEN description LIKE '%Pulsera%' THEN 'REF-004'\n  WHEN description LIKE '%Cadena%' THEN 'REF-005'\n  ELSE NULL\nEND;\n",
        "type": "registry:block",
        "target": "~/scripts/019_add_reference_to_invoice_items.sql"
      },
      {
        "path": "scripts/020_update_invoice_numbering_to_10001.sql",
        "content": "-- Actualizar la funci├│n de generaci├│n de n├║meros de factura para empezar desde 10001\n\nDROP FUNCTION IF EXISTS generate_invoice_number() CASCADE;\n\nCREATE OR REPLACE FUNCTION generate_invoice_number()\nRETURNS TEXT AS $$\nDECLARE\n  year_part TEXT;\n  sequence_num INTEGER;\n  new_invoice_number TEXT;\nBEGIN\n  year_part := TO_CHAR(NOW(), 'YYYY');\n  \n  -- Cambiar la numeraci├│n para empezar desde 10001 en lugar de 0001\n  SELECT COALESCE(MAX(CAST(SUBSTRING(invoice_number FROM 'FAC-' || year_part || '-(.*)') AS INTEGER)), 10000) + 1\n  INTO sequence_num\n  FROM public.invoices\n  WHERE invoice_number LIKE 'FAC-' || year_part || '-%';\n  \n  -- Usar 5 d├¡gitos en lugar de 4 para acomodar n├║meros desde 10001\n  new_invoice_number := 'FAC-' || year_part || '-' || LPAD(sequence_num::TEXT, 5, '0');\n  \n  RETURN new_invoice_number;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Eliminar datos de ejemplo antiguos\nDELETE FROM public.invoice_items;\nDELETE FROM public.invoices;\n\n-- Crear nuevos datos de ejemplo con numeraci├│n desde 10001\nINSERT INTO public.invoices (\n  invoice_number,\n  client_name,\n  client_nit,\n  client_email,\n  client_phone,\n  client_address,\n  ciudad,\n  barrio,\n  issue_date,\n  due_date,\n  subtotal,\n  tax_rate,\n  tax_amount,\n  total,\n  status,\n  payment_method,\n  guia,\n  transportadora,\n  notes\n) VALUES\n-- Factura 1: PAGADO (Transferencia)\n(\n  'FAC-2025-10001',\n  'Mar├¡a Gonz├ílez',\n  '900123456-7',\n  'maria.gonzalez@email.com',\n  '3001234567',\n  'Calle 123 #45-67',\n  'Bogot├í',\n  'Chapinero',\n  NOW() - INTERVAL '7 days',\n  NOW() + INTERVAL '23 days',\n  210084.03,\n  19.00,\n  39915.97,\n  250000.00,\n  'PAGADO',\n  'Transferencia',\n  'GUIA-2025-001',\n  'Servientrega',\n  'Pago confirmado por transferencia bancaria'\n),\n-- Factura 2: PAGADO (Efectivo)\n(\n  'FAC-2025-10002',\n  'Carlos Rodr├¡guez',\n  '900234567-8',\n  'carlos.rodriguez@email.com',\n  '3009876543',\n  'Carrera 45 #12-34',\n  'C├║cuta',\n  'Centro',\n  NOW() - INTERVAL '5 days',\n  NOW() + INTERVAL '25 days',\n  105042.02,\n  19.00,\n  19957.98,\n  125000.00,\n  'PAGADO',\n  'Efectivo',\n  'GUIA-2025-002',\n  'Coordinadora',\n  'Pago recibido en efectivo'\n),\n-- Factura 3: PENDIENTE PAGO (Contraentrega)\n(\n  'FAC-2025-10003',\n  'Laura Mart├¡nez',\n  '900345678-9',\n  'laura.martinez@email.com',\n  '3015551234',\n  'Avenida 67 #89-12',\n  'Medell├¡n',\n  'El Poblado',\n  NOW() - INTERVAL '3 days',\n  NOW() + INTERVAL '27 days',\n  378151.26,\n  19.00,\n  71848.74,\n  450000.00,\n  'PENDIENTE PAGO',\n  'Contraentrega',\n  'GUIA-2025-003',\n  'Interrapidisimo',\n  'Pago pendiente - Contraentrega'\n);\n\n-- Insertar items de las facturas\nINSERT INTO public.invoice_items (invoice_id, description, referencia, quantity, unit_price, total)\nVALUES\n-- Items de factura 10001\n('FAC-2025-10001', 'Bal├¡n de Oro 18k', 'BAL-ORO-001', 1, 210084.03, 210084.03),\n\n-- Items de factura 10002\n('FAC-2025-10002', 'Anillo de Plata 925', 'ANI-PLA-002', 1, 105042.02, 105042.02),\n\n-- Items de factura 10003\n('FAC-2025-10003', 'Bal├¡n Premium', 'BAL-PRE-003', 1, 378151.26, 378151.26);\n\n-- Actualizar las ventas para que coincidan con las nuevas facturas\nDELETE FROM public.sales;\n\nINSERT INTO public.sales (\n  sale_id,\n  client_name,\n  client_nit,\n  client_email,\n  client_phone,\n  client_address,\n  sale_date,\n  total_amount,\n  status,\n  payment_method,\n  notes,\n  transportadora,\n  guia,\n  invoice_number,\n  seller_name\n) VALUES\n-- Venta 1: Asociada a FAC-2025-10001 (PAGADO)\n(\n  'VT-001',\n  'Mar├¡a Gonz├ílez',\n  '900123456-7',\n  'maria.gonzalez@email.com',\n  '3001234567',\n  'Calle 123 #45-67',\n  NOW() - INTERVAL '7 days',\n  250000.00,\n  'PAGADO',\n  'Transferencia',\n  'Venta completada',\n  'Servientrega',\n  'GUIA-2025-001',\n  'FAC-2025-10001',\n  'Juan P├®rez'\n),\n-- Venta 2: Asociada a FAC-2025-10002 (PAGADO)\n(\n  'VT-002',\n  'Carlos Rodr├¡guez',\n  '900234567-8',\n  'carlos.rodriguez@email.com',\n  '3009876543',\n  'Carrera 45 #12-34',\n  NOW() - INTERVAL '5 days',\n  125000.00,\n  'PAGADO',\n  'Efectivo',\n  'Venta completada',\n  'Coordinadora',\n  'GUIA-2025-002',\n  'FAC-2025-10002',\n  'Ana L├│pez'\n),\n-- Venta 3: Asociada a FAC-2025-10003 (PENDIENTE PAGO)\n(\n  'VT-003',\n  'Laura Mart├¡nez',\n  '900345678-9',\n  'laura.martinez@email.com',\n  '3015551234',\n  'Avenida 67 #89-12',\n  NOW() - INTERVAL '3 days',\n  450000.00,\n  'PENDIENTE PAGO',\n  'Contraentrega',\n  'Pago pendiente',\n  'Interrapidisimo',\n  'GUIA-2025-003',\n  'FAC-2025-10003',\n  'Juan P├®rez'\n);\n",
        "type": "registry:block",
        "target": "~/scripts/020_update_invoice_numbering_to_10001.sql"
      },
      {
        "path": "scripts/021_change_invoice_number_format_simple.sql",
        "content": "-- Cambiar el formato de n├║mero de factura a formato simple: 100001, 100002, etc.\n\n-- Eliminar la funci├│n anterior\nDROP FUNCTION IF EXISTS generate_invoice_number() CASCADE;\n\n-- Crear nueva funci├│n para generar n├║meros simples empezando desde 100001\nCREATE OR REPLACE FUNCTION generate_invoice_number()\nRETURNS TEXT AS $$\nDECLARE\n  sequence_num INTEGER;\n  new_invoice_number TEXT;\nBEGIN\n  -- Obtener el n├║mero m├ís alto actual y sumarle 1\n  -- Si no hay facturas, empezar desde 100001\n  SELECT COALESCE(MAX(CAST(invoice_number AS INTEGER)), 100000) + 1\n  INTO sequence_num\n  FROM public.invoices\n  WHERE invoice_number ~ '^\\d+$'; -- Solo n├║meros\n  \n  new_invoice_number := sequence_num::TEXT;\n  \n  RETURN new_invoice_number;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Eliminar datos de ejemplo antiguos\nDELETE FROM public.invoice_items;\nDELETE FROM public.invoices;\n\n-- Insertar nuevos datos de ejemplo con el formato correcto\nINSERT INTO public.invoices (invoice_number, client_name, client_nit, client_email, client_phone, issue_date, due_date, subtotal, tax_amount, total, status, payment_method)\nVALUES \n  ('100001', 'Mar├¡a Gonz├ílez', '900123456-7', 'maria@example.com', '3001234567', NOW() - INTERVAL '5 days', NOW() + INTERVAL '25 days', 250000, 47500, 297500, 'PAGADO', 'transferencia'),\n  ('100002', 'Carlos Rodr├¡guez', '900234567-8', 'carlos@example.com', '3002345678', NOW() - INTERVAL '3 days', NOW() + INTERVAL '27 days', 180000, 34200, 214200, 'PENDIENTE PAGO', 'contraentrega'),\n  ('100003', 'Laura Mart├¡nez', '900345678-9', 'laura@example.com', '3003456789', NOW() - INTERVAL '35 days', NOW() - INTERVAL '5 days', 420000, 79800, 499800, 'PENDIENTE PAGO', 'contraentrega');\n\n-- Insertar items de ejemplo\nINSERT INTO public.invoice_items (invoice_id, description, quantity, unit_price, total)\nVALUES \n  ('100001', 'Anillo de Plata', 2, 125000, 250000),\n  ('100002', 'Cadena de Oro 18k', 1, 180000, 180000),\n  ('100003', 'Aretes de Oro', 1, 420000, 420000);\n",
        "type": "registry:block",
        "target": "~/scripts/021_change_invoice_number_format_simple.sql"
      },
      {
        "path": "scripts/021_create_sales_table_final.sql",
        "content": "-- Script para crear la tabla sales con todos los campos necesarios\n-- Este script incluye todas las migraciones previas en una sola tabla\n\nCREATE TABLE IF NOT EXISTS public.sales (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  sale_id TEXT UNIQUE NOT NULL,\n  client_name TEXT NOT NULL,\n  client_phone TEXT,\n  client_email TEXT,\n  sale_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  products JSONB NOT NULL,\n  total DECIMAL(10, 2) NOT NULL,\n  status TEXT NOT NULL CHECK (status IN ('PAGADO', 'PENDIENTE PAGO', 'DEVOLUCION')),\n  payment_method TEXT NOT NULL CHECK (payment_method IN ('efectivo', 'transferencia', 'contraentrega')),\n  seller_name TEXT NOT NULL,\n  photo_evidence TEXT,\n  photo_uploaded_at TIMESTAMP WITH TIME ZONE,\n  shipping_company TEXT,\n  tracking_number TEXT,\n  mipaquete_code TEXT,\n  mipaquete_status TEXT,\n  mipaquete_carrier TEXT,\n  is_return BOOLEAN DEFAULT FALSE,\n  return_date TIMESTAMP WITH TIME ZONE,\n  paid_by_mipaquete BOOLEAN DEFAULT FALSE,\n  payment_date TIMESTAMP WITH TIME ZONE,\n  invoice_number TEXT,\n  notes TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Tabla para tracking de devoluciones\nCREATE TABLE IF NOT EXISTS public.return_tracking (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  sale_id UUID REFERENCES public.sales(id) ON DELETE CASCADE,\n  mipaquete_code TEXT NOT NULL,\n  last_check TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  status TEXT NOT NULL,\n  tracking_data JSONB,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- ├ìndices para mejorar el rendimiento\nCREATE INDEX IF NOT EXISTS idx_sales_status ON public.sales(status);\nCREATE INDEX IF NOT EXISTS idx_sales_payment_method ON public.sales(payment_method);\nCREATE INDEX IF NOT EXISTS idx_sales_sale_date ON public.sales(sale_date);\nCREATE INDEX IF NOT EXISTS idx_sales_mipaquete_code ON public.sales(mipaquete_code);\nCREATE INDEX IF NOT EXISTS idx_sales_paid_by_mipaquete ON public.sales(paid_by_mipaquete);\nCREATE INDEX IF NOT EXISTS idx_sales_payment_date ON public.sales(payment_date);\nCREATE INDEX IF NOT EXISTS idx_sales_invoice_number ON public.sales(invoice_number);\nCREATE INDEX IF NOT EXISTS idx_sales_photo_uploaded_at ON public.sales(photo_uploaded_at);\nCREATE INDEX IF NOT EXISTS idx_return_tracking_mipaquete_code ON public.return_tracking(mipaquete_code);\n\n-- Habilitar RLS\nALTER TABLE public.sales ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.return_tracking ENABLE ROW LEVEL SECURITY;\n\n-- Pol├¡ticas RLS (permitir acceso completo por ahora)\nDROP POLICY IF EXISTS \"Allow all operations on sales\" ON public.sales;\nCREATE POLICY \"Allow all operations on sales\" ON public.sales FOR ALL USING (true) WITH CHECK (true);\n\nDROP POLICY IF EXISTS \"Allow all operations on return_tracking\" ON public.return_tracking;\nCREATE POLICY \"Allow all operations on return_tracking\" ON public.return_tracking FOR ALL USING (true) WITH CHECK (true);\n\n-- Funci├│n para actualizar updated_at autom├íticamente\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Trigger para actualizar updated_at\nDROP TRIGGER IF EXISTS update_sales_updated_at ON public.sales;\nCREATE TRIGGER update_sales_updated_at BEFORE UPDATE ON public.sales\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\n-- Comentarios para documentaci├│n\nCOMMENT ON TABLE public.sales IS 'Tabla principal de ventas con todos los campos necesarios para el sistema';\nCOMMENT ON COLUMN public.sales.status IS 'Estados v├ílidos: PAGADO (ya se recibi├│ el pago), PENDIENTE PAGO (contraentrega/cr├®dito), DEVOLUCION (producto devuelto)';\nCOMMENT ON COLUMN public.sales.payment_method IS 'M├®todos de pago: efectivo, transferencia, contraentrega';\nCOMMENT ON COLUMN public.sales.invoice_number IS 'N├║mero de factura asociado a esta venta';\n",
        "type": "registry:block",
        "target": "~/scripts/021_create_sales_table_final.sql"
      },
      {
        "path": "scripts/022_create_expenses_table.sql",
        "content": "-- Crear tabla de gastos\nCREATE TABLE IF NOT EXISTS expenses (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  expense_date TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),\n  receipt_number TEXT,\n  provider TEXT NOT NULL,\n  category TEXT NOT NULL CHECK (category IN ('FIJOS', 'VARIABLES', 'MARKETING', 'LOGISTICA', 'OTROS')),\n  payment_method TEXT NOT NULL CHECK (payment_method IN ('EFECTIVO', 'TRANSFERENCIA', 'CONTRAENTREGA')),\n  status TEXT NOT NULL CHECK (status IN ('PAGADO', 'PENDIENTE PAGO', 'DEVOLUCION')),\n  amount NUMERIC(10, 2) NOT NULL,\n  notes TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Crear ├¡ndices para mejorar el rendimiento\nCREATE INDEX IF NOT EXISTS idx_expenses_date ON expenses(expense_date);\nCREATE INDEX IF NOT EXISTS idx_expenses_category ON expenses(category);\nCREATE INDEX IF NOT EXISTS idx_expenses_status ON expenses(status);\n\n-- Insertar datos de ejemplo\nINSERT INTO expenses (expense_date, receipt_number, provider, category, payment_method, status, amount, notes) VALUES\n  (NOW() - INTERVAL '5 days', 'REC-001', 'Proveedor ABC', 'FIJOS', 'TRANSFERENCIA', 'PAGADO', 500000, 'Arriendo local'),\n  (NOW() - INTERVAL '3 days', 'REC-002', 'Proveedor XYZ', 'VARIABLES', 'EFECTIVO', 'PAGADO', 150000, 'Materiales'),\n  (NOW() - INTERVAL '2 days', 'REC-003', 'Marketing Digital', 'MARKETING', 'TRANSFERENCIA', 'PAGADO', 300000, 'Publicidad Facebook'),\n  (NOW() - INTERVAL '1 day', 'REC-004', 'Coordinadora', 'LOGISTICA', 'TRANSFERENCIA', 'PAGADO', 80000, 'Env├¡os'),\n  (NOW(), 'REC-005', 'Proveedor 123', 'OTROS', 'EFECTIVO', 'PENDIENTE PAGO', 120000, 'Varios');\n",
        "type": "registry:block",
        "target": "~/scripts/022_create_expenses_table.sql"
      },
      {
        "path": "scripts/022_fix_sales_table_now.sql",
        "content": "-- SCRIPT DE EMERGENCIA: Crear tabla sales inmediatamente\n-- Este script soluciona el error \"Could not find the table 'public.sales'\"\n\n-- Eliminar tabla si existe (para empezar limpio)\nDROP TABLE IF EXISTS public.return_tracking CASCADE;\nDROP TABLE IF EXISTS public.sales CASCADE;\n\n-- Crear tabla sales con todos los campos\nCREATE TABLE public.sales (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  sale_id TEXT UNIQUE NOT NULL,\n  client_name TEXT NOT NULL,\n  client_phone TEXT,\n  client_email TEXT,\n  sale_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  products JSONB NOT NULL,\n  total DECIMAL(10, 2) NOT NULL,\n  status TEXT NOT NULL CHECK (status IN ('PAGADO', 'PENDIENTE PAGO', 'DEVOLUCION')),\n  payment_method TEXT NOT NULL CHECK (payment_method IN ('efectivo', 'transferencia', 'contraentrega')),\n  seller_name TEXT NOT NULL,\n  photo_evidence TEXT,\n  photo_uploaded_at TIMESTAMP WITH TIME ZONE,\n  shipping_company TEXT,\n  tracking_number TEXT,\n  mipaquete_code TEXT,\n  mipaquete_status TEXT,\n  mipaquete_carrier TEXT,\n  is_return BOOLEAN DEFAULT FALSE,\n  return_date TIMESTAMP WITH TIME ZONE,\n  paid_by_mipaquete BOOLEAN DEFAULT FALSE,\n  payment_date TIMESTAMP WITH TIME ZONE,\n  invoice_number TEXT,\n  notes TEXT,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Tabla para tracking de devoluciones\nCREATE TABLE public.return_tracking (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  sale_id UUID REFERENCES public.sales(id) ON DELETE CASCADE,\n  mipaquete_code TEXT NOT NULL,\n  last_check TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  status TEXT NOT NULL,\n  tracking_data JSONB,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- ├ìndices\nCREATE INDEX idx_sales_status ON public.sales(status);\nCREATE INDEX idx_sales_payment_method ON public.sales(payment_method);\nCREATE INDEX idx_sales_sale_date ON public.sales(sale_date);\nCREATE INDEX idx_sales_mipaquete_code ON public.sales(mipaquete_code);\nCREATE INDEX idx_sales_paid_by_mipaquete ON public.sales(paid_by_mipaquete);\nCREATE INDEX idx_return_tracking_mipaquete_code ON public.return_tracking(mipaquete_code);\n\n-- Habilitar RLS\nALTER TABLE public.sales ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.return_tracking ENABLE ROW LEVEL SECURITY;\n\n-- Pol├¡ticas RLS\nCREATE POLICY \"Allow all operations on sales\" ON public.sales FOR ALL USING (true) WITH CHECK (true);\nCREATE POLICY \"Allow all operations on return_tracking\" ON public.return_tracking FOR ALL USING (true) WITH CHECK (true);\n\n-- Funci├│n para actualizar updated_at\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Trigger\nCREATE TRIGGER update_sales_updated_at BEFORE UPDATE ON public.sales\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n",
        "type": "registry:block",
        "target": "~/scripts/022_fix_sales_table_now.sql"
      },
      {
        "path": "scripts/023_create_sales_table_final_fix.sql",
        "content": "-- Soluci├│n definitiva: Crear tabla public.sales\n-- Basado en la estructura recomendada para el dashboard\n\n-- 1. Limpiar cualquier versi├│n anterior\nDROP VIEW IF EXISTS public.sales CASCADE;\nDROP TABLE IF EXISTS public.sales CASCADE;\n\n-- 2. Crear tabla sales con todos los campos necesarios\nCREATE TABLE public.sales (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),\n  \n  -- Informaci├│n del cliente\n  client_name TEXT,\n  client_phone TEXT,\n  client_address TEXT,\n  city TEXT,\n  \n  -- Informaci├│n de productos\n  products JSONB DEFAULT '[]'::jsonb,\n  \n  -- Informaci├│n financiera\n  payment_method TEXT,\n  total_amount NUMERIC(12,2) NOT NULL DEFAULT 0,\n  shipping_amount NUMERIC(12,2) NOT NULL DEFAULT 0,\n  revenue_no_shipping NUMERIC(12,2) GENERATED ALWAYS AS \n    (COALESCE(total_amount, 0) - COALESCE(shipping_amount, 0)) STORED,\n  \n  -- Estado de la venta\n  status TEXT DEFAULT 'pendiente',\n  is_return BOOLEAN NOT NULL DEFAULT false,\n  \n  -- Informaci├│n de env├¡o (MiPaquete)\n  mipaquete_code TEXT,\n  mipaquete_status TEXT,\n  paid_by_mipaquete BOOLEAN DEFAULT false,\n  carrier TEXT,\n  \n  -- Facturaci├│n\n  invoice_number TEXT,\n  \n  -- Marketing y atribuci├│n\n  campaign_id TEXT,\n  utm_source TEXT,\n  utm_medium TEXT,\n  utm_campaign TEXT,\n  \n  -- Evidencia\n  evidence_url TEXT,\n  \n  -- Auditor├¡a\n  updated_at TIMESTAMPTZ DEFAULT now()\n);\n\n-- 3. Crear ├¡ndices para mejorar el rendimiento\nCREATE INDEX idx_sales_created_at ON public.sales(created_at DESC);\nCREATE INDEX idx_sales_city ON public.sales(city);\nCREATE INDEX idx_sales_status ON public.sales(status);\nCREATE INDEX idx_sales_payment_method ON public.sales(payment_method);\nCREATE INDEX idx_sales_mipaquete_code ON public.sales(mipaquete_code);\nCREATE INDEX idx_sales_campaign_id ON public.sales(campaign_id);\nCREATE INDEX idx_sales_is_return ON public.sales(is_return);\n\n-- 4. Habilitar Row Level Security\nALTER TABLE public.sales ENABLE ROW LEVEL SECURITY;\n\n-- 5. Crear pol├¡ticas de acceso (permisivas para desarrollo)\nCREATE POLICY \"Permitir lectura a todos\" ON public.sales\n  FOR SELECT USING (true);\n\nCREATE POLICY \"Permitir inserci├│n a todos\" ON public.sales\n  FOR INSERT WITH CHECK (true);\n\nCREATE POLICY \"Permitir actualizaci├│n a todos\" ON public.sales\n  FOR UPDATE USING (true);\n\nCREATE POLICY \"Permitir eliminaci├│n a todos\" ON public.sales\n  FOR DELETE USING (true);\n\n-- 6. Crear funci├│n para actualizar updated_at autom├íticamente\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = now();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- 7. Crear trigger para actualizar updated_at\nCREATE TRIGGER update_sales_updated_at\n  BEFORE UPDATE ON public.sales\n  FOR EACH ROW\n  EXECUTE FUNCTION update_updated_at_column();\n\n-- 8. Insertar datos de ejemplo para pruebas\nINSERT INTO public.sales (\n  client_name, client_phone, city, payment_method, \n  total_amount, shipping_amount, status, products\n) VALUES\n  ('Juan P├®rez', '3001234567', 'Bogot├í', 'contraentrega', 150000, 15000, 'entregado', '[{\"name\":\"Producto A\",\"quantity\":2,\"price\":67500}]'::jsonb),\n  ('Mar├¡a Garc├¡a', '3009876543', 'Medell├¡n', 'transferencia', 200000, 20000, 'pendiente', '[{\"name\":\"Producto B\",\"quantity\":1,\"price\":200000}]'::jsonb),\n  ('Carlos L├│pez', '3005551234', 'Cali', 'contraentrega', 180000, 18000, 'en_transito', '[{\"name\":\"Producto C\",\"quantity\":3,\"price\":60000}]'::jsonb),\n  ('Ana Mart├¡nez', '3007778888', 'Barranquilla', 'transferencia', 250000, 25000, 'entregado', '[{\"name\":\"Producto D\",\"quantity\":1,\"price\":250000}]'::jsonb),\n  ('Luis Rodr├¡guez', '3002223333', 'Cartagena', 'contraentrega', 120000, 12000, 'pendiente', '[{\"name\":\"Producto E\",\"quantity\":2,\"price\":60000}]'::jsonb);\n\nCOMMENT ON TABLE public.sales IS 'Tabla principal de ventas del dashboard';\n",
        "type": "registry:block",
        "target": "~/scripts/023_create_sales_table_final_fix.sql"
      },
      {
        "path": "scripts/024_create_sales_with_cache_reload.sql",
        "content": "-- ============================================================================\n-- SOLUCI├ôN DEFINITIVA: Crear tabla sales y recargar cach├® de PostgREST\n-- ============================================================================\n-- Este script soluciona el error \"Could not find the table 'public.sales' in the schema cache\"\n-- creando la tabla y forzando a PostgREST a recargar su cach├® de esquema.\n\n-- 1) Limpia cualquier resto previo\nDROP VIEW IF EXISTS public.sales CASCADE;\nDROP TABLE IF EXISTS public.sales CASCADE;\n\n-- 2) Crea la tabla sales con todos los campos necesarios\nCREATE TABLE public.sales (\n  -- Identificaci├│n y timestamps\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),\n  sale_date TIMESTAMPTZ NOT NULL DEFAULT now(),\n  updated_at TIMESTAMPTZ DEFAULT now(),\n  \n  -- Informaci├│n del cliente\n  customer_name TEXT NOT NULL,\n  customer_phone TEXT,\n  customer_email TEXT,\n  customer_address TEXT,\n  city TEXT NOT NULL,\n  department TEXT,\n  \n  -- Productos y montos\n  products JSONB NOT NULL DEFAULT '[]'::jsonb,\n  total_amount NUMERIC(12,2) NOT NULL DEFAULT 0,\n  shipping_amount NUMERIC(12,2) NOT NULL DEFAULT 0,\n  \n  -- C├ílculo de ingresos sin env├¡o (para m├®tricas)\n  revenue_no_shipping NUMERIC(12,2) GENERATED ALWAYS AS (total_amount - shipping_amount) STORED,\n  \n  -- Informaci├│n de pago\n  payment_method TEXT NOT NULL CHECK (payment_method IN ('contraentrega', 'efectivo', 'transferencia')),\n  payment_date TIMESTAMPTZ,\n  paid_by_mipaquete BOOLEAN DEFAULT false,\n  \n  -- Informaci├│n de env├¡o y log├¡stica\n  mipaquete_code TEXT,\n  mipaquete_status TEXT,\n  transportadora TEXT,\n  guia TEXT,\n  \n  -- Estado y devoluciones\n  estado TEXT DEFAULT 'pendiente',\n  is_return BOOLEAN DEFAULT false,\n  return_date TIMESTAMPTZ,\n  return_reason TEXT,\n  \n  -- Facturaci├│n y campa├▒a\n  invoice_number TEXT,\n  campaign_id TEXT,\n  evidencia TEXT\n);\n\n-- 3) Crear ├¡ndices para mejorar rendimiento\nCREATE INDEX idx_sales_sale_date ON public.sales(sale_date DESC);\nCREATE INDEX idx_sales_city ON public.sales(city);\nCREATE INDEX idx_sales_payment_method ON public.sales(payment_method);\nCREATE INDEX idx_sales_is_return ON public.sales(is_return);\nCREATE INDEX idx_sales_mipaquete_code ON public.sales(mipaquete_code) WHERE mipaquete_code IS NOT NULL;\nCREATE INDEX idx_sales_estado ON public.sales(estado);\nCREATE INDEX idx_sales_campaign_id ON public.sales(campaign_id) WHERE campaign_id IS NOT NULL;\n\n-- 4) Asegurar exposici├│n del esquema y permisos para REST API\nGRANT USAGE ON SCHEMA public TO anon, authenticated;\nGRANT ALL ON public.sales TO anon, authenticated;\n\n-- 5) Habilitar Row Level Security (RLS)\nALTER TABLE public.sales ENABLE ROW LEVEL SECURITY;\n\n-- 6) Crear pol├¡ticas RLS permisivas (ajustar seg├║n necesidades de seguridad)\nCREATE POLICY \"Permitir lectura p├║blica de ventas\"\n  ON public.sales FOR SELECT\n  TO anon, authenticated\n  USING (true);\n\nCREATE POLICY \"Permitir inserci├│n p├║blica de ventas\"\n  ON public.sales FOR INSERT\n  TO anon, authenticated\n  WITH CHECK (true);\n\nCREATE POLICY \"Permitir actualizaci├│n p├║blica de ventas\"\n  ON public.sales FOR UPDATE\n  TO anon, authenticated\n  USING (true)\n  WITH CHECK (true);\n\nCREATE POLICY \"Permitir eliminaci├│n p├║blica de ventas\"\n  ON public.sales FOR DELETE\n  TO anon, authenticated\n  USING (true);\n\n-- 7) ­ƒöÑ CR├ìTICO: Forzar a PostgREST a recargar el schema cache\n-- Esto soluciona el error \"Could not find the table 'public.sales' in the schema cache\"\nSELECT pg_notify('pgrst', 'reload schema');\n\n-- 8) Crear funci├│n para actualizar updated_at autom├íticamente\nCREATE OR REPLACE FUNCTION public.update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = now();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- 9) Crear trigger para actualizar updated_at\nCREATE TRIGGER update_sales_updated_at\n  BEFORE UPDATE ON public.sales\n  FOR EACH ROW\n  EXECUTE FUNCTION public.update_updated_at_column();\n\n-- ============================================================================\n-- VERIFICACI├ôN: Despu├®s de ejecutar este script, prueba con:\n-- ============================================================================\n-- SELECT COUNT(*) FROM public.sales;\n-- \n-- O desde tu aplicaci├│n, el endpoint /api/sales deber├¡a funcionar sin errores.\n",
        "type": "registry:block",
        "target": "~/scripts/024_create_sales_with_cache_reload.sql"
      },
      {
        "path": "scripts/025_fix_sales_table_definitivo.sql",
        "content": "-- ==========================================================\n--  SOLUCI├ôN DEFINITIVA: Crear tabla public.sales\n--  Esto elimina el error 404 de PostgREST y hace que\n--  /rest/v1/sales funcione inmediatamente\n-- ==========================================================\n\n-- Habilitar extensi├│n para UUIDs\nCREATE EXTENSION IF NOT EXISTS pgcrypto;\n\n-- Eliminar tabla existente si hay conflictos\nDROP TABLE IF EXISTS public.sales CASCADE;\n\n-- ==========================================================\n--  1. Crear tabla public.sales con todas las columnas\n-- ==========================================================\nCREATE TABLE public.sales (\n  id                   UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  created_at           TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n  \n  -- Informaci├│n de la venta\n  city                 TEXT,                         -- Ciudad (usado por Geograf├¡a)\n  payment_method       TEXT,                         -- contraentrega, transferencia, etc.\n  is_return            BOOLEAN NOT NULL DEFAULT false,\n  mipaquete_code       TEXT,                         -- C├│digo de gu├¡a log├¡stica\n  \n  -- Montos\n  total_amount         NUMERIC(12,2) NOT NULL DEFAULT 0,   -- Total con env├¡o\n  shipping_amount      NUMERIC(12,2) NOT NULL DEFAULT 0,   -- Costo de env├¡o\n  \n  -- Marketing\n  campaign_id          TEXT,                         -- ID/Nombre de campa├▒a\n  \n  -- ­ƒÆí Columna calculada: Ingresos SIN env├¡o (dato real para reportes)\n  revenue_no_shipping  NUMERIC(12,2) GENERATED ALWAYS AS\n      (COALESCE(total_amount, 0) - COALESCE(shipping_amount, 0)) STORED,\n  \n  -- Campos adicionales de la aplicaci├│n\n  client_name          TEXT,\n  client_phone         TEXT,\n  client_address       TEXT,\n  products             JSONB,                        -- Array de productos\n  status               TEXT DEFAULT 'pendiente',     -- pendiente, pagada, devolucion\n  invoice_number       TEXT,                         -- N├║mero de factura\n  notes                TEXT,                         -- Notas adicionales\n  \n  -- Campos de MiPaquete\n  paid_by_mipaquete    BOOLEAN DEFAULT false,\n  mipaquete_status     TEXT,\n  \n  -- Auditor├¡a\n  updated_at           TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- ==========================================================\n--  2. Crear ├¡ndices para mejorar rendimiento\n-- ==========================================================\nCREATE INDEX IF NOT EXISTS idx_sales_created_at \n  ON public.sales(created_at);\n\nCREATE INDEX IF NOT EXISTS idx_sales_city \n  ON public.sales(city);\n\nCREATE INDEX IF NOT EXISTS idx_sales_payment_method \n  ON public.sales(payment_method);\n\nCREATE INDEX IF NOT EXISTS idx_sales_is_return \n  ON public.sales(is_return);\n\nCREATE INDEX IF NOT EXISTS idx_sales_mipaquete \n  ON public.sales(mipaquete_code);\n\nCREATE INDEX IF NOT EXISTS idx_sales_campaign \n  ON public.sales(campaign_id);\n\nCREATE INDEX IF NOT EXISTS idx_sales_status \n  ON public.sales(status);\n\n-- ==========================================================\n--  3. Otorgar permisos para REST (PostgREST)\n-- ==========================================================\nGRANT USAGE ON SCHEMA public TO anon, authenticated;\nGRANT SELECT ON public.sales TO anon, authenticated;\n\n-- Permitir INSERT, UPDATE, DELETE para service_role (backend)\nGRANT INSERT, UPDATE, DELETE ON public.sales TO service_role;\n\n-- ==========================================================\n--  4. Habilitar Row Level Security (RLS) con pol├¡ticas\n-- ==========================================================\nALTER TABLE public.sales ENABLE ROW LEVEL SECURITY;\n\n-- Pol├¡tica: Permitir SELECT a todos (anon y authenticated)\nDROP POLICY IF EXISTS sales_select_anyone ON public.sales;\nCREATE POLICY sales_select_anyone\n  ON public.sales\n  FOR SELECT\n  TO anon, authenticated\n  USING (true);\n\n-- Pol├¡tica: Permitir todas las operaciones a service_role\nDROP POLICY IF EXISTS sales_write_service_role ON public.sales;\nCREATE POLICY sales_write_service_role\n  ON public.sales\n  FOR ALL\n  TO service_role\n  USING (true)\n  WITH CHECK (true);\n\n-- ==========================================================\n--  5. ­ƒöæ CLAVE: Forzar recarga del schema cache de PostgREST\n--     Esto hace que el endpoint /rest/v1/sales sea visible\n--     inmediatamente sin necesidad de reiniciar\n-- ==========================================================\nSELECT pg_notify('pgrst', 'reload schema');\n\n-- ==========================================================\n--  6. (OPCIONAL) Insertar datos de prueba\n--     Descomenta estas l├¡neas si quieres ver datos inmediatamente\n-- ==========================================================\n/*\nINSERT INTO public.sales (\n  city, payment_method, is_return, mipaquete_code, \n  total_amount, shipping_amount, campaign_id,\n  client_name, client_phone, status\n)\nVALUES\n  ('Bogot├í', 'contraentrega', false, 'MP-TEST-001', \n   180000, 10000, 'cmp_whatsapp_mayor',\n   'Juan P├®rez', '3001234567', 'pagada'),\n  \n  ('Medell├¡n', 'transferencia', false, 'MP-TEST-002', \n   250000, 15000, 'cmp_balines_aug',\n   'Mar├¡a Garc├¡a', '3109876543', 'pagada'),\n  \n  ('Cali', 'contraentrega', false, 'MP-TEST-003', \n   120000, 8000, 'cmp_whatsapp_mayor',\n   'Carlos L├│pez', '3201112233', 'pendiente'),\n  \n  ('Barranquilla', 'transferencia', false, 'MP-TEST-004', \n   300000, 12000, 'cmp_balines_aug',\n   'Ana Mart├¡nez', '3154445566', 'pagada');\n*/\n\n-- ==========================================================\n--  Ô£à LISTO: El endpoint /rest/v1/sales ahora existe y funciona\n--  Tu p├ígina de Geograf├¡a cargar├í correctamente\n-- ==========================================================\n",
        "type": "registry:block",
        "target": "~/scripts/025_fix_sales_table_definitivo.sql"
      },
      {
        "path": "scripts/EJECUTAR_EN_SUPABASE.sql",
        "content": "-- =========================================================\n-- SCRIPT DEFINITIVO PARA CREAR TABLA SALES EN SUPABASE\n-- =========================================================\n-- INSTRUCCIONES:\n-- 1. Ve a tu proyecto de Supabase ÔåÆ SQL Editor\n-- 2. Copia y pega TODO este script\n-- 3. Haz clic en \"Run\" para ejecutarlo\n-- 4. Despu├®s ve a Project Settings ÔåÆ API y haz clic en \"Reload schema\"\n-- =========================================================\n\n-- Extensiones necesarias para UUID\ncreate extension if not exists \"pgcrypto\";\ncreate extension if not exists \"uuid-ossp\";\n\n-- =========================================================\n-- TABLA PRINCIPAL: public.sales\n-- =========================================================\ncreate table if not exists public.sales (\n  id                uuid primary key default gen_random_uuid(),\n  order_id          text unique,                     -- ID interno de la venta / pedido\n  campaign_id       text,                            -- id de campa├▒a de Meta (si aplica)\n  campaign_name     text,                            -- nombre de campa├▒a (para reportes)\n  adset_id          text,                            -- ad set\n  ad_id             text,                            -- anuncio\n  customer_phone    text,                            -- clave para amarrar con CRM\n  customer_name     text,\n  city              text,                            -- ciudad para Geograf├¡a\n  department        text,                            -- depto/estado opcional\n  -- Separaci├│n de valores para excluir el env├¡o en los ingresos:\n  subtotal          numeric(12,2) not null default 0,  -- valor de productos SIN env├¡o\n  shipping_cost     numeric(12,2) not null default 0,  -- costo de env├¡o (se excluye de ingresos)\n  total             numeric(12,2) generated always as (subtotal + shipping_cost) stored, -- total solo de referencia\n  payment_method    text check (payment_method in ('transferencia','efectivo','contraentrega')),\n  is_return         boolean not null default false,     -- devoluciones\n  mipaquete_code    text,                               -- gu├¡a de MiPaquete (para tracking)\n  created_at        timestamptz not null default now()\n);\n\ncomment on table public.sales is 'Ventas (subtotal sin env├¡o). Compatible con /rest/v1/sales usados por la app.';\ncomment on column public.sales.subtotal is 'Valor de productos SIN env├¡o (esto se usa para ingresos).';\ncomment on column public.sales.shipping_cost is 'Costo de env├¡o (NO se usa para ingresos).';\ncomment on column public.sales.payment_method is 'transferencia | efectivo | contraentrega';\n\n-- =========================================================\n-- ├ìNDICES PARA MEJORAR RENDIMIENTO\n-- =========================================================\ncreate index if not exists sales_created_at_idx on public.sales (created_at desc);\ncreate index if not exists sales_city_idx       on public.sales (city);\ncreate index if not exists sales_campaign_idx   on public.sales (campaign_id);\ncreate index if not exists sales_payment_method_idx on public.sales (payment_method);\ncreate index if not exists sales_is_return_idx  on public.sales (is_return);\n\n-- =========================================================\n-- VISTA PARA GEOGRAF├ìA (ventas por ciudad)\n-- =========================================================\ncreate or replace view public.sales_geo as\nselect\n  coalesce(city, 'Sin ciudad') as city,\n  count(*)                     as orders,\n  sum(subtotal)::numeric(12,2) as revenue,  -- SOLO subtotal (sin env├¡o)\n  min(created_at)              as first_sale_at,\n  max(created_at)              as last_sale_at\nfrom public.sales\nwhere is_return = false\ngroup by 1;\n\ncomment on view public.sales_geo is 'Agregados por ciudad (orders, revenue=subtotal) para el mapa/choropleth.';\n\n-- =========================================================\n-- RLS (Row Level Security) + POL├ìTICAS\n-- =========================================================\nalter table public.sales enable row level security;\n\n-- Eliminar pol├¡ticas existentes si existen (para evitar duplicados)\ndrop policy if exists sales_select_all on public.sales;\ndrop policy if exists sales_upsert_service on public.sales;\ndrop policy if exists sales_update_service on public.sales;\ndrop policy if exists sales_delete_service on public.sales;\n\n-- Pol├¡tica de lectura para anon y authenticated\ncreate policy sales_select_all\n  on public.sales\n  for select\n  to anon, authenticated\n  using (true);\n\n-- Pol├¡ticas de escritura para service_role\ncreate policy sales_upsert_service\n  on public.sales\n  for insert\n  to service_role\n  with check (true);\n\ncreate policy sales_update_service\n  on public.sales\n  for update\n  to service_role\n  using (true)\n  with check (true);\n\ncreate policy sales_delete_service\n  on public.sales\n  for delete\n  to service_role\n  using (true);\n\n-- =========================================================\n-- PERMISOS EXPL├ìCITOS\n-- =========================================================\ngrant select on public.sales to anon, authenticated;\ngrant select on public.sales_geo to anon, authenticated;\ngrant insert, update, delete on public.sales to service_role;\n\n-- =========================================================\n-- DATOS DE PRUEBA (OPCIONAL - puedes comentar si no los necesitas)\n-- =========================================================\ninsert into public.sales (order_id, campaign_id, campaign_name, customer_phone, customer_name, city, department, subtotal, shipping_cost, payment_method, is_return, mipaquete_code)\nvalues\n  ('ORD-001', '12023344568701113', 'Mensajes Mayor', '3001112233', 'Juan P├®rez', 'Bogot├í', 'Cundinamarca', 180000, 10000, 'contraentrega', false, 'MP1791809'),\n  ('ORD-002', '120232224011150113', 'Balines WhatsApp', '3002223344', 'Mar├¡a Garc├¡a', 'Medell├¡n', 'Antioquia', 250000, 12000, 'transferencia', false, 'MP1791810'),\n  ('ORD-003', '12023344568701113', 'Mensajes Mayor', '3003334455', 'Carlos L├│pez', 'Cali', 'Valle del Cauca', 150000, 8000, 'efectivo', false, 'MP1791811'),\n  ('ORD-004', '120232224011150113', 'Balines WhatsApp', '3004445566', 'Ana Mart├¡nez', 'Barranquilla', 'Atl├íntico', 200000, 15000, 'contraentrega', false, 'MP1791812'),\n  ('ORD-005', '12023344568701113', 'Mensajes Mayor', '3005556677', 'Luis Rodr├¡guez', 'Cartagena', 'Bol├¡var', 175000, 18000, 'transferencia', false, 'MP1791813'),\n  ('ORD-006', '120232224011150113', 'Balines WhatsApp', '3006667788', 'Laura S├ínchez', 'Bogot├í', 'Cundinamarca', 220000, 10000, 'contraentrega', true, 'MP1791814'), -- Devoluci├│n\n  ('ORD-007', '12023344568701113', 'Mensajes Mayor', '3007778899', 'Pedro G├│mez', 'Medell├¡n', 'Antioquia', 190000, 12000, 'efectivo', false, 'MP1791815'),\n  ('ORD-008', '120232224011150113', 'Balines WhatsApp', '3008889900', 'Sof├¡a Torres', 'Cali', 'Valle del Cauca', 280000, 8000, 'transferencia', false, 'MP1791816'),\n  ('ORD-009', '12023344568701113', 'Mensajes Mayor', '3009990011', 'Diego Ram├¡rez', 'Bucaramanga', 'Santander', 160000, 14000, 'contraentrega', false, 'MP1791817'),\n  ('ORD-010', '120232224011150113', 'Balines WhatsApp', '3000001122', 'Valentina Cruz', 'Pereira', 'Risaralda', 210000, 11000, 'transferencia', false, 'MP1791818')\non conflict (order_id) do nothing;\n\n-- =========================================================\n-- MENSAJE DE CONFIRMACI├ôN\n-- =========================================================\ndo $$\nbegin\n  raise notice 'Ô£à Tabla public.sales creada exitosamente';\n  raise notice 'Ô£à Vista public.sales_geo creada';\n  raise notice 'Ô£à ├ìndices creados';\n  raise notice 'Ô£à RLS y pol├¡ticas configuradas';\n  raise notice 'Ô£à % registros de prueba insertados', (select count(*) from public.sales);\n  raise notice '';\n  raise notice '­ƒöä SIGUIENTE PASO: Ve a Project Settings ÔåÆ API y haz clic en \"Reload schema\"';\n  raise notice '­ƒôè Luego prueba: /rest/v1/sales?select=*';\n  raise notice '­ƒù║´©Å  Y tambi├®n: /rest/v1/sales_geo?select=*';\nend $$;\n",
        "type": "registry:block",
        "target": "~/scripts/EJECUTAR_EN_SUPABASE.sql"
      },
      {
        "path": "scripts/next-fix-route-collisions.mjs",
        "content": "#!/usr/bin/env node\n/**\n * next-fix-route-collisions.mjs\n *\n * Corrige colisiones de rutas en Next.js (App Router) causadas por\n * p├íginas duplicadas que resuelven al mismo path, por ejemplo:\n *  - app/(dashboard)/ventas/page.tsx\n *  - app/ventas/page.tsx\n *\n * Estrategia:\n *  - Escanea la carpeta `app/` buscando archivos `page.*` (ts, tsx, js, jsx).\n *  - Calcula la ruta \"normalizada\" (ignora segmentos de grupo: (foo)).\n *  - Si hay m├ís de un `page.*` para la misma ruta, se prioriza el que est├í dentro\n *    de un route group (e.g. `(dashboard)`) y se renombra el duplicado ra├¡z\n *    a `page.shadow.<ext>` para evitar la colisi├│n.\n *  - No elimina nada. Es reversible.\n *\n * Seguro para CI: Si no existen colisiones no hace nada; si ya se\n * resolvieron anteriormente, detecta los `.shadow.` y no cambia nada.\n */\nimport fs from 'node:fs';\nimport path from 'node:path';\n\nconst APP_DIR = path.resolve('app');\nconst VALID_EXT = new Set(['.tsx', '.ts', '.jsx', '.js']);\n\nfunction exists(p) {\n  try { fs.accessSync(p); return true; } catch { return false; }\n}\n\nfunction walk(dir) {\n  const out = [];\n  if (!exists(dir)) return out;\n  for (const entry of fs.readdirSync(dir, { withFileTypes: true })) {\n    const full = path.join(dir, entry.name);\n    if (entry.isDirectory()) out.push(...walk(full));\n    else out.push(full);\n  }\n  return out;\n}\n\nfunction isPageFile(file) {\n  const bn = path.basename(file);\n  const ext = path.extname(file);\n  if (!VALID_EXT.has(ext)) return false;\n  if (!/^page(\\.shadow)?\\.[tj]sx?$/.test(bn)) return false;\n  // Ignorar API y non-app\n  return file.includes(`${path.sep}app${path.sep}`);\n}\n\n// Normaliza el path p├║blico removiendo los grupos (segmentos entre par├®ntesis)\nfunction routeFromFile(file) {\n  // app/.../segment/page.tsx  ->  /segment\n  const rel = path.relative(APP_DIR, path.dirname(file)); // sin \"page.ext\"\n  const parts = rel.split(path.sep).filter(Boolean);\n  const normalized = parts\n    .filter(seg => !(seg.startsWith('(') && seg.endsWith(')'))) // quita groups\n    .map(seg => seg) // futuro: manejar [id], [...slug], etc. si fuera necesario\n    .join('/');\n  return '/' + normalized; // / para ra├¡z\n}\n\nfunction isInsideGroup(file) {\n  const rel = path.relative(APP_DIR, path.dirname(file));\n  return rel.split(path.sep).some(seg => seg.startsWith('(') && seg.endsWith(')'));\n}\n\nfunction main() {\n  if (!exists(APP_DIR)) {\n    console.log('[next-fix-route-collisions] No se encontr├│ carpeta \"app/\". Nada que hacer.');\n    return;\n  }\n\n  const files = walk(APP_DIR).filter(isPageFile);\n  if (files.length === 0) {\n    console.log('[next-fix-route-collisions] No se encontraron archivos page.*. Nada que hacer.');\n    return;\n  }\n\n  // Agrupar por ruta p├║blica\n  const byRoute = new Map();\n  for (const f of files) {\n    const route = routeFromFile(f);\n    if (!byRoute.has(route)) byRoute.set(route, []);\n    byRoute.get(route).push(f);\n  }\n\n  const actions = [];\n  for (const [route, list] of byRoute.entries()) {\n    // Ignorar si solo hay uno\n    if (list.length <= 1) continue;\n\n    // Filtrar los que ya son .shadow.\n    const nonShadow = list.filter(f => !path.basename(f).startsWith('page.shadow.'));\n    if (nonShadow.length <= 1) continue; // ya resuelto\n\n    // Preferir el que est├® dentro de grupo\n    const withGroup = nonShadow.filter(isInsideGroup);\n    const withoutGroup = nonShadow.filter(f => !isInsideGroup(f));\n\n    if (withGroup.length >= 1 && withoutGroup.length >= 1) {\n      // Renombrar los \"sin grupo\" a page.shadow.ext\n      for (const f of withoutGroup) {\n        const dir = path.dirname(f);\n        const ext = path.extname(f);\n        const shadow = path.join(dir, `page.shadow${ext}`);\n        if (!exists(shadow)) {\n          fs.renameSync(f, shadow);\n          actions.push(`rename: ${f} -> ${shadow}`);\n        }\n      }\n    } else if (nonShadow.length > 1) {\n      // Varios duplicados sin grupos; conservar el primero y sombreados los dem├ís\n      const [keep, ...rest] = nonShadow;\n      for (const f of rest) {\n        const dir = path.dirname(f);\n        const ext = path.extname(f);\n        const shadow = path.join(dir, `page.shadow${ext}`);\n        if (!exists(shadow)) {\n          fs.renameSync(f, shadow);\n          actions.push(`rename: ${f} -> ${shadow}`);\n        }\n      }\n    }\n  }\n\n  if (actions.length === 0) {\n    console.log('[next-fix-route-collisions] OK: no se detectaron colisiones o ya est├ín resueltas.');\n  } else {\n    console.log('[next-fix-route-collisions] Resultado:');\n    for (const a of actions) console.log('  ÔÇó ' + a);\n    console.log('  (No se elimin├│ nada. Es reversible).');\n  }\n}\n\ntry {\n  main();\n} catch (err) {\n  console.error('[next-fix-route-collisions] ERROR:', err?.message || err);\n  // no botar el build: si algo falla, no impedir la instalaci├│n\n  process.exit(0);\n}\n",
        "type": "registry:block",
        "target": "~/scripts/next-fix-route-collisions.mjs"
      },
      {
        "path": "scripts/setup_database.py",
        "content": "import os\nimport sys\n\n# Leer las variables de entorno\nsupabase_url = os.environ.get('NEXT_PUBLIC_SUPABASE_URL')\nsupabase_key = os.environ.get('SUPABASE_SERVICE_ROLE_KEY')\n\nif not supabase_url or not supabase_key:\n    print(\"ÔØî Error: Faltan variables de entorno\")\n    print(\"\\nNecesitas configurar:\")\n    print(\"  - NEXT_PUBLIC_SUPABASE_URL\")\n    print(\"  - SUPABASE_SERVICE_ROLE_KEY\")\n    print(\"\\nVe a la secci├│n 'Vars' en el sidebar izquierdo para agregarlas.\")\n    sys.exit(1)\n\ntry:\n    from supabase import create_client\n    \n    # Crear cliente de Supabase\n    supabase = create_client(supabase_url, supabase_key)\n    \n    # Leer el script SQL\n    with open('scripts/001_create_sales_tables.sql', 'r', encoding='utf-8') as f:\n        sql_script = f.read()\n    \n    print(\"­ƒöä Ejecutando script SQL para crear tablas...\")\n    \n    # Ejecutar el script SQL\n    # Nota: Supabase Python no tiene un m├®todo directo para ejecutar SQL raw\n    # Necesitamos usar la API REST directamente\n    import requests\n    \n    # Extraer el proyecto ID de la URL\n    project_ref = supabase_url.replace('https://', '').split('.')[0]\n    \n    # URL de la API de Supabase para ejecutar SQL\n    sql_url = f\"https://{project_ref}.supabase.co/rest/v1/rpc/exec_sql\"\n    \n    headers = {\n        'apikey': supabase_key,\n        'Authorization': f'Bearer {supabase_key}',\n        'Content-Type': 'application/json'\n    }\n    \n    print(\"\\nÔÜá´©Å  IMPORTANTE:\")\n    print(\"Este script necesita que ejecutes el SQL manualmente en Supabase.\")\n    print(\"\\nPasos:\")\n    print(\"1. Ve a tu proyecto en Supabase Dashboard\")\n    print(\"2. Abre el SQL Editor\")\n    print(\"3. Copia y pega el contenido de 'scripts/001_create_sales_tables.sql'\")\n    print(\"4. Ejecuta el script\")\n    print(\"\\nO usa el siguiente comando si tienes Supabase CLI instalado:\")\n    print(f\"  supabase db execute --file scripts/001_create_sales_tables.sql\")\n    \n    print(\"\\nÔ£à Una vez ejecutado el script, recarga la p├ígina de ventas.\")\n    \nexcept ImportError:\n    print(\"ÔØî Error: No se pudo importar la librer├¡a de Supabase\")\n    print(\"\\nEste script requiere la librer├¡a 'supabase' de Python.\")\n    print(\"Sin embargo, para este proyecto, es m├ís f├ícil ejecutar el SQL directamente.\")\n    print(\"\\nPor favor, ejecuta el script SQL manualmente:\")\n    print(\"1. Abre scripts/001_create_sales_tables.sql\")\n    print(\"2. Copia todo el contenido\")\n    print(\"3. Ve a tu Supabase Dashboard > SQL Editor\")\n    print(\"4. Pega y ejecuta el script\")\nexcept Exception as e:\n    print(f\"ÔØî Error: {str(e)}\")\n    sys.exit(1)\n",
        "type": "registry:block",
        "target": "~/scripts/setup_database.py"
      },
      {
        "path": "styles/globals.css",
        "content": "@import 'tailwindcss';\n@import 'tw-animate-css';\n\n@custom-variant dark (&:is(.dark *));\n\n:root {\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --destructive-foreground: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --radius: 0.625rem;\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.145 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.145 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.985 0 0);\n  --primary-foreground: oklch(0.205 0 0);\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.396 0.141 25.723);\n  --destructive-foreground: oklch(0.637 0.237 25.331);\n  --border: oklch(0.269 0 0);\n  --input: oklch(0.269 0 0);\n  --ring: oklch(0.439 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(0.269 0 0);\n  --sidebar-ring: oklch(0.439 0 0);\n}\n\n@theme inline {\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --color-card: var(--card);\n  --color-card-foreground: var(--card-foreground);\n  --color-popover: var(--popover);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-primary: var(--primary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-secondary: var(--secondary);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-muted: var(--muted);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-accent: var(--accent);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-destructive: var(--destructive);\n  --color-destructive-foreground: var(--destructive-foreground);\n  --color-border: var(--border);\n  --color-input: var(--input);\n  --color-ring: var(--ring);\n  --color-chart-1: var(--chart-1);\n  --color-chart-2: var(--chart-2);\n  --color-chart-3: var(--chart-3);\n  --color-chart-4: var(--chart-4);\n  --color-chart-5: var(--chart-5);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n  --color-sidebar: var(--sidebar);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-ring: var(--sidebar-ring);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n",
        "type": "registry:block",
        "target": "~/styles/globals.css"
      },
      {
        "path": "tsconfig.json",
        "content": "{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"target\": \"ES6\",\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n",
        "type": "registry:block",
        "target": "~/tsconfig.json"
      },
      {
        "path": "public/placeholder-logo.png",
        "content": "",
        "type": "registry:block",
        "target": "~/public/placeholder-logo.png"
      },
      {
        "path": "public/placeholder-logo.svg",
        "content": "",
        "type": "registry:block",
        "target": "~/public/placeholder-logo.svg"
      },
      {
        "path": "public/placeholder-user.jpg",
        "content": "",
        "type": "registry:block",
        "target": "~/public/placeholder-user.jpg"
      },
      {
        "path": "public/placeholder.jpg",
        "content": "",
        "type": "registry:block",
        "target": "~/public/placeholder.jpg"
      },
      {
        "path": "public/placeholder.svg",
        "content": "",
        "type": "registry:block",
        "target": "~/public/placeholder.svg"
      },
      {
        "path": "vercel.json",
        "content": "{\n  \"buildCommand\": \"node scripts/next-fix-route-collisions.mjs && pnpm run build\"\n}\n",
        "type": "registry:block",
        "target": "~/vercel.json"
      },
      {
        "path": "package.json",
        "content": "{\n  \"name\": \"my-v0-project\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"build\": \"next build\",\n    \"dev\": \"next dev\",\n    \"lint\": \"eslint .\",\n    \"start\": \"next start\",\n    \"prebuild\": \"node scripts/next-fix-route-collisions.mjs\",\n    \"postinstall\": \"node scripts/next-fix-route-collisions.mjs\"\n  },\n  \"dependencies\": {\n    \"@emotion/is-prop-valid\": \"latest\",\n    \"@hookform/resolvers\": \"^3.10.0\",\n    \"@radix-ui/react-accordion\": \"latest\",\n    \"@radix-ui/react-alert-dialog\": \"latest\",\n    \"@radix-ui/react-aspect-ratio\": \"latest\",\n    \"@radix-ui/react-avatar\": \"latest\",\n    \"@radix-ui/react-checkbox\": \"latest\",\n    \"@radix-ui/react-collapsible\": \"latest\",\n    \"@radix-ui/react-context-menu\": \"latest\",\n    \"@radix-ui/react-dialog\": \"latest\",\n    \"@radix-ui/react-dropdown-menu\": \"latest\",\n    \"@radix-ui/react-hover-card\": \"latest\",\n    \"@radix-ui/react-label\": \"latest\",\n    \"@radix-ui/react-menubar\": \"latest\",\n    \"@radix-ui/react-navigation-menu\": \"latest\",\n    \"@radix-ui/react-popover\": \"latest\",\n    \"@radix-ui/react-progress\": \"latest\",\n    \"@radix-ui/react-radio-group\": \"latest\",\n    \"@radix-ui/react-scroll-area\": \"latest\",\n    \"@radix-ui/react-select\": \"latest\",\n    \"@radix-ui/react-separator\": \"latest\",\n    \"@radix-ui/react-slider\": \"latest\",\n    \"@radix-ui/react-slot\": \"latest\",\n    \"@radix-ui/react-switch\": \"latest\",\n    \"@radix-ui/react-tabs\": \"latest\",\n    \"@radix-ui/react-toast\": \"latest\",\n    \"@radix-ui/react-toggle\": \"latest\",\n    \"@radix-ui/react-toggle-group\": \"latest\",\n    \"@radix-ui/react-tooltip\": \"latest\",\n    \"@supabase/ssr\": \"latest\",\n    \"@supabase/supabase-js\": \"latest\",\n    \"@vercel/analytics\": \"1.3.1\",\n    \"@vercel/blob\": \"latest\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"axios\": \"latest\",\n    \"chart.js\": \"latest\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"cmdk\": \"latest\",\n    \"date-fns\": \"4.1.0\",\n    \"embla-carousel-react\": \"latest\",\n    \"framer-motion\": \"latest\",\n    \"geist\": \"^1.3.1\",\n    \"input-otp\": \"latest\",\n    \"leaflet\": \"latest\",\n    \"lucide-react\": \"^0.454.0\",\n    \"next\": \"15.2.4\",\n    \"next-themes\": \"latest\",\n    \"react\": \"^19\",\n    \"react-chartjs-2\": \"latest\",\n    \"react-day-picker\": \"latest\",\n    \"react-dom\": \"^19\",\n    \"react-hook-form\": \"latest\",\n    \"react-leaflet\": \"latest\",\n    \"react-resizable-panels\": \"latest\",\n    \"recharts\": \"latest\",\n    \"sonner\": \"latest\",\n    \"swr\": \"latest\",\n    \"tailwind-merge\": \"^2.5.5\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"uuid\": \"latest\",\n    \"vaul\": \"latest\",\n    \"zod\": \"3.25.76\"\n  },\n  \"devDependencies\": {\n    \"@tailwindcss/postcss\": \"^4.1.9\",\n    \"@types/node\": \"^22\",\n    \"@types/react\": \"^19\",\n    \"@types/react-dom\": \"^19\",\n    \"postcss\": \"^8.5\",\n    \"tailwindcss\": \"^4.1.9\",\n    \"tw-animate-css\": \"1.3.3\",\n    \"typescript\": \"^5\"\n  }\n}\n",
        "type": "registry:block",
        "target": "~/package.json"
      },
      {
        "path": "app/providers.tsx",
        "content": "\"use client\"\n\nimport type * as React from \"react\"\nimport { ThemeProvider } from \"@/lib/theme-context\"\nimport { FiscalYearProvider } from \"@/lib/fiscal-year-context\"\n\ntype Props = {\n  children: React.ReactNode\n}\n\nexport default function Providers({ children }: Props) {\n  return (\n    <ThemeProvider>\n      <FiscalYearProvider>{children}</FiscalYearProvider>\n    </ThemeProvider>\n  )\n}\n",
        "type": "registry:block",
        "target": "~/app/providers.tsx"
      },
      {
        "path": "app/layout.tsx",
        "content": "import type React from \"react\"\nimport type { Metadata } from \"next\"\nimport { Inter, Playfair_Display } from \"next/font/google\"\n// import { Analytics } from \"@vercel/analytics/next\"\nimport \"./globals.css\"\nimport { Suspense } from \"react\"\nimport Providers from \"./providers\"\n\nconst inter = Inter({\n  subsets: [\"latin\"],\n  variable: \"--font-sans\",\n  display: \"swap\",\n})\n\nconst playfair = Playfair_Display({\n  subsets: [\"latin\"],\n  variable: \"--font-serif\",\n  display: \"swap\",\n})\n\nexport const metadata: Metadata = {\n  title: \"Dashboard de Ventas\",\n  description: \"Sistema de gesti├│n de ventas con integraci├│n MiPaquete\",\n  generator: \"v0.app\",\n}\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"es\" suppressHydrationWarning>\n      <body className={`${inter.variable} ${playfair.variable} font-sans antialiased`}>\n        <Providers>\n          <Suspense fallback={<div>Loading...</div>}>{children}</Suspense>\n        </Providers>\n        {/* <Analytics /> */}\n      </body>\n    </html>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/layout.tsx"
      },
      {
        "path": "app/(dashboard)/configuracion/page.tsx",
        "content": "\"use client\"\n\nimport { useState, useMemo, useEffect } from \"react\"\nimport { motion } from \"framer-motion\"\nimport {\n  Settings,\n  Users,\n  Globe,\n  Building2,\n  CreditCard,\n  Bell,\n  Shield,\n  Plug,\n  FileText,\n  Download,\n  Upload,\n  Sliders,\n  Save,\n  RotateCcw,\n  RefreshCw,\n  Plus,\n  Edit,\n  Trash2,\n  Eye,\n  EyeOff,\n  AlertCircle,\n  X,\n} from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { useTheme } from \"@/lib/theme-context\"\nimport { useFiscalYear } from \"@/lib/fiscal-year-context\"\n// import { put } from \"@vercel/blob\" // Eliminar import de put de @vercel/blob\nimport { uploadLogo } from \"@/app/actions/upload-logo\" // y agregar import de uploadLogo\n\ntype Role = \"admin\" | \"manager\" | \"analyst\" | \"viewer\" | \"asesor\" // Agregado rol \"asesor\"\ntype Perm = \"read\" | \"create\" | \"update\" | \"delete\"\ntype Module = \"ventas\" | \"pagos\" | \"gastos\" | \"cogs\" | \"clientes\" | \"geografia\" | \"config\"\n\ntype User = {\n  id: string\n  name: string\n  email: string\n  role: Role\n  active: boolean\n  lastAccess: string\n}\n\ntype RolePerm = {\n  role: Role\n  module: Module\n  perms: Perm[]\n}\n\ntype Localization = {\n  timezone: string\n  dateFormat: \"DD/MM/YYYY\" | \"MM/DD/YYYY\"\n  timeFormat: \"24h\" | \"12h\"\n  currency: \"COP\" | \"USD\" | \"EUR\"\n  thousandSep: string\n  decimalSep: string\n  rounding: \"peso\" | \"unidad\" | \"centena\"\n}\n\ntype PaymentsConfig = {\n  requireTransferReceipt: boolean\n  transferSubs: {\n    bancolombia: boolean\n    nequi: boolean\n    daviplata: boolean\n    davivienda: boolean\n    [key: string]: boolean // Permitir entidades personalizadas\n  }\n  customBanks: string[] // Lista de bancos personalizados\n  allowAddExpensesOnClosedMonths: boolean\n  lockSalesOnClosedMonths: boolean\n}\n\ntype Branding = {\n  company: string\n  nit: string\n  address: string\n  phone: string\n  email: string\n  primary: string\n  sidebarColor: string // Agregado color de sidebar\n  logoUrl?: string\n}\n\ntype NotificationPref = {\n  channel: \"email\" | \"whatsapp\" | \"inapp\"\n  event: string\n  enabled: boolean\n  roleScope: Role[]\n}\n\ntype Audit = {\n  id: string\n  at: string\n  user: string\n  module: Module\n  action: string\n  ip: string\n  summary: string\n}\n\ntype Integration = {\n  provider: string\n  keyMasked: string\n  enabled: boolean\n  isCustom?: boolean\n}\n\nconst mockUsers: User[] = [\n  {\n    id: \"1\",\n    name: \"Admin Principal\",\n    email: \"admin@galle.com\",\n    role: \"admin\",\n    active: true,\n    lastAccess: \"2025-01-16 10:30\",\n  },\n  {\n    id: \"2\",\n    name: \"Mar├¡a Gonz├ílez\",\n    email: \"maria@galle.com\",\n    role: \"manager\",\n    active: true,\n    lastAccess: \"2025-01-16 09:15\",\n  },\n  {\n    id: \"3\",\n    name: \"Carlos P├®rez\",\n    email: \"carlos@galle.com\",\n    role: \"analyst\",\n    active: true,\n    lastAccess: \"2025-01-15 16:45\",\n  },\n  { id: \"4\", name: \"Ana L├│pez\", email: \"ana@galle.com\", role: \"viewer\", active: false, lastAccess: \"2025-01-10 14:20\" },\n]\n\nconst mockRolePerms: RolePerm[] = [\n  { role: \"admin\", module: \"ventas\", perms: [\"read\", \"create\", \"update\", \"delete\"] },\n  { role: \"admin\", module: \"pagos\", perms: [\"read\", \"create\", \"update\", \"delete\"] },\n  { role: \"admin\", module: \"gastos\", perms: [\"read\", \"create\", \"update\", \"delete\"] },\n  { role: \"admin\", module: \"cogs\", perms: [\"read\", \"create\", \"update\", \"delete\"] },\n  { role: \"admin\", module: \"clientes\", perms: [\"read\", \"create\", \"update\", \"delete\"] },\n  { role: \"admin\", module: \"geografia\", perms: [\"read\", \"create\", \"update\", \"delete\"] },\n  { role: \"admin\", module: \"config\", perms: [\"read\", \"create\", \"update\", \"delete\"] },\n  { role: \"manager\", module: \"ventas\", perms: [\"read\", \"create\", \"update\"] },\n  { role: \"manager\", module: \"pagos\", perms: [\"read\", \"create\", \"update\"] },\n  { role: \"manager\", module: \"gastos\", perms: [\"read\", \"create\"] },\n  { role: \"manager\", module: \"clientes\", perms: [\"read\", \"create\", \"update\"] },\n  { role: \"analyst\", module: \"ventas\", perms: [\"read\"] },\n  { role: \"analyst\", module: \"pagos\", perms: [\"read\"] },\n  { role: \"analyst\", module: \"clientes\", perms: [\"read\"] },\n  { role: \"viewer\", module: \"ventas\", perms: [\"read\"] },\n  { role: \"asesor\", module: \"ventas\", perms: [\"read\", \"create\"] },\n  { role: \"asesor\", module: \"clientes\", perms: [\"read\", \"create\", \"update\"] },\n  { role: \"asesor\", module: \"geografia\", perms: [\"read\"] },\n]\n\nconst mockAudit: Audit[] = [\n  {\n    id: \"1\",\n    at: \"2025-01-16 10:30:15\",\n    user: \"Admin Principal\",\n    module: \"pagos\",\n    action: \"create\",\n    ip: \"192.168.1.100\",\n    summary: \"Agreg├│ pago ORD-2025-001\",\n  },\n  {\n    id: \"2\",\n    at: \"2025-01-16 09:15:22\",\n    user: \"Mar├¡a Gonz├ílez\",\n    module: \"gastos\",\n    action: \"update\",\n    ip: \"192.168.1.101\",\n    summary: \"Edit├│ gasto de n├│mina\",\n  },\n  {\n    id: \"3\",\n    at: \"2025-01-15 16:45:30\",\n    user: \"Carlos P├®rez\",\n    module: \"clientes\",\n    action: \"read\",\n    ip: \"192.168.1.102\",\n    summary: \"Consult├│ lista de clientes\",\n  },\n  {\n    id: \"4\",\n    at: \"2025-01-15 14:20:10\",\n    user: \"Admin Principal\",\n    module: \"config\",\n    action: \"update\",\n    ip: \"192.168.1.100\",\n    summary: \"Cambi├│ configuraci├│n de pagos\",\n  },\n]\n\nconst mockIntegrations: Integration[] = [\n  { provider: \"supabase\", keyMasked: \"eyJhb...****...xyz\", enabled: true },\n  { provider: \"meta\", keyMasked: \"EAABw...****...123\", enabled: false },\n  { provider: \"mipaquete\", keyMasked: \"mp_sk...****...abc\", enabled: true },\n]\n\nconst mockNotifications: NotificationPref[] = [\n  { channel: \"email\", event: \"Pago recibido\", enabled: true, roleScope: [\"admin\", \"manager\"] },\n  { channel: \"whatsapp\", event: \"Pago pendiente (MiPaquete)\", enabled: true, roleScope: [\"admin\"] },\n  { channel: \"inapp\", event: \"Gasto agregado\", enabled: true, roleScope: [\"admin\", \"manager\", \"analyst\"] },\n  { channel: \"email\", event: \"Mes cerrado\", enabled: true, roleScope: [\"admin\"] },\n  { channel: \"inapp\", event: \"COGS actualizado\", enabled: false, roleScope: [\"admin\", \"manager\"] },\n]\n\nexport default function ConfiguracionPage() {\n  const [activeSection, setActiveSection] = useState(\"general\")\n  const [hasChanges, setHasChanges] = useState(false)\n  const [showUserDialog, setShowUserDialog] = useState(false)\n  const [showPasswordFields, setShowPasswordFields] = useState<Record<string, boolean>>({})\n  const [integrations, setIntegrations] = useState<Integration[]>(mockIntegrations)\n  const [showAddIntegrationDialog, setShowAddIntegrationDialog] = useState(false)\n  const [newIntegration, setNewIntegration] = useState({\n    provider: \"\",\n    key: \"\",\n    enabled: true,\n  })\n\n  const { theme, setTheme } = useTheme()\n  const { fiscalYear, setFiscalYear } = useFiscalYear()\n  const [sidebarTheme, setSidebarThemeState] = useState(\"onyx-soft-gold\")\n\n  const [logoUrl, setLogoUrl] = useState<string>(\"\")\n  const [isUploadingLogo, setIsUploadingLogo] = useState(false)\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"sidebarTheme\")\n    if (savedTheme) {\n      setSidebarThemeState(savedTheme)\n    } else {\n      localStorage.setItem(\"sidebarTheme\", \"onyx-soft-gold\")\n      setSidebarThemeState(\"onyx-soft-gold\")\n    }\n\n    const savedLogo = localStorage.getItem(\"logoUrl\")\n    if (savedLogo) {\n      setLogoUrl(savedLogo)\n    }\n  }, [])\n\n  const setSidebarTheme = (theme: string) => {\n    setSidebarThemeState(theme)\n    localStorage.setItem(\"sidebarTheme\", theme)\n    // Disparar evento personalizado para que el Sidebar se actualice\n    window.dispatchEvent(new CustomEvent(\"sidebarThemeChange\", { detail: { theme } }))\n  }\n\n  const [localization, setLocalization] = useState<Localization>({\n    timezone: \"America/Bogota\",\n    dateFormat: \"DD/MM/YYYY\",\n    timeFormat: \"24h\",\n    currency: \"COP\",\n    thousandSep: \".\",\n    decimalSep: \",\",\n    rounding: \"peso\",\n  })\n\n  const [branding, setBranding] = useState<Branding>({\n    company: \"GALLE Joyer├¡a\",\n    nit: \"900.123.456-7\",\n    address: \"Calle 123 #45-67\",\n    phone: \"+57 300 123 4567\",\n    email: \"contacto@galle.com\",\n    primary: \"#C8A96A\",\n    sidebarColor: \"#8B6914\", // Mantener para compatibilidad\n  })\n\n  const luxuryColors = [\n    {\n      name: \"Onyx & Soft Gold\",\n      theme: \"onyx-soft-gold\",\n      preview: \"#111213\",\n      description: \"Dark gris con dorado suave\",\n    },\n    {\n      name: \"Charcoal & Pale Brass\",\n      theme: \"charcoal-brass\",\n      preview: \"#16171A\",\n      description: \"Carb├│n con lat├│n p├ílido\",\n    },\n    {\n      name: \"Midnight Navy & Butter Gold\",\n      theme: \"navy-butter\",\n      preview: \"#0D1726\",\n      description: \"Azul medianoche con dorado mantequilla\",\n    },\n    {\n      name: \"Emerald & Champagne\",\n      theme: \"emerald-champagne\",\n      preview: \"#12201B\",\n      description: \"Esmeralda con champagne\",\n    },\n    {\n      name: \"Burgundy & Rose-Gold\",\n      theme: \"burgundy-rose\",\n      preview: \"#31161B\",\n      description: \"Borgo├▒a con oro rosa\",\n    },\n    {\n      name: \"Sapphire & Honey Gold\",\n      theme: \"sapphire-honey\",\n      preview: \"#0E2143\",\n      description: \"Zafiro con dorado miel\",\n    },\n    {\n      name: \"Amethyst & Mist Platinum\",\n      theme: \"amethyst-platinum\",\n      preview: \"#1E1630\",\n      description: \"Amatista con platino niebla\",\n    },\n    {\n      name: \"Forest & Soft Gold\",\n      theme: \"forest-gold\",\n      preview: \"#14221A\",\n      description: \"Bosque con dorado suave\",\n    },\n    {\n      name: \"White-Luxury\",\n      theme: \"white-luxury\",\n      preview: \"#FFFFFF\",\n      description: \"Blanco luxury pastel\",\n    },\n    {\n      name: \"Ivory & Latte\",\n      theme: \"ivory-latte\",\n      preview: \"#FAFAF6\",\n      description: \"Marfil con latte\",\n    },\n  ]\n\n  const [importDestination, setImportDestination] = useState<string>(\"\")\n  const [showDestinationDialog, setShowDestinationDialog] = useState(false)\n\n  const [paymentsConfig, setPaymentsConfig] = useState<PaymentsConfig>({\n    requireTransferReceipt: true,\n    transferSubs: {\n      bancolombia: true,\n      nequi: true,\n      daviplata: true,\n      davivienda: false,\n    },\n    customBanks: [], // Inicializar lista de bancos personalizados\n    allowAddExpensesOnClosedMonths: false,\n    lockSalesOnClosedMonths: true,\n  })\n\n  const [systemPrefs, setSystemPrefs] = useState({\n    theme: \"white\",\n    density: \"comoda\",\n    highContrast: false,\n    reduceAnimations: false,\n    language: \"es\",\n  })\n\n  const sections = [\n    { id: \"general\", name: \"General\", icon: Settings },\n    { id: \"usuarios\", name: \"Usuarios & Roles\", icon: Users },\n    { id: \"localizacion\", name: \"Localizaci├│n\", icon: Globe },\n    { id: \"empresa\", name: \"Empresa & Branding\", icon: Building2 },\n    { id: \"pagos\", name: \"Pagos\", icon: CreditCard },\n    { id: \"notificaciones\", name: \"Notificaciones\", icon: Bell },\n    { id: \"seguridad\", name: \"Seguridad\", icon: Shield },\n    { id: \"integraciones\", name: \"Integraciones\", icon: Plug },\n    { id: \"auditoria\", name: \"Auditor├¡a\", icon: FileText },\n    { id: \"importar\", name: \"Importar/Exportar\", icon: Upload },\n    { id: \"preferencias\", name: \"Preferencias\", icon: Sliders },\n  ]\n\n  const previewNumber = useMemo(() => {\n    const num = 1234567.89\n    return `${localization.currency} ${num.toLocaleString(\"es-CO\", {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    })}`\n  }, [localization])\n\n  const previewDate = useMemo(() => {\n    const date = new Date()\n    return localization.dateFormat === \"DD/MM/YYYY\"\n      ? `${date.getDate().toString().padStart(2, \"0\")}/${(date.getMonth() + 1).toString().padStart(2, \"0\")}/${date.getFullYear()}`\n      : `${(date.getMonth() + 1).toString().padStart(2, \"0\")}/${date.getDate().toString().padStart(2, \"0\")}/${date.getFullYear()}`\n  }, [localization])\n\n  const [showAddBankDialog, setShowAddBankDialog] = useState(false) // Estado para di├ílogo de agregar banco\n  const [newBankName, setNewBankName] = useState(\"\") // Nombre del nuevo banco\n  const [excelFile, setExcelFile] = useState<File | null>(null) // Archivo Excel para importar\n  const [excelPreview, setExcelPreview] = useState<any[]>([]) // Preview de datos del Excel\n\n  const handleLogoUpload = async (file: File) => {\n    try {\n      setIsUploadingLogo(true)\n\n      // Crear FormData y agregar el archivo\n      const formData = new FormData()\n      formData.append(\"file\", file)\n\n      // Llamar a la Server Action\n      const result = await uploadLogo(formData)\n\n      if (result.success && result.url) {\n        setLogoUrl(result.url)\n        localStorage.setItem(\"logoUrl\", result.url)\n        // Disparar evento para que el Sidebar se actualice\n        window.dispatchEvent(new CustomEvent(\"logoChange\", { detail: { url: result.url } }))\n        setHasChanges(true)\n      } else {\n        console.error(\"[v0] Error al subir logo:\", result.error)\n        alert(`Error al subir el logo: ${result.error || \"Error desconocido\"}`)\n      }\n    } catch (error) {\n      console.error(\"[v0] Error al subir logo:\", error)\n      alert(\"Error al subir el logo. Por favor intenta de nuevo.\")\n    } finally {\n      setIsUploadingLogo(false)\n    }\n  }\n\n  const handleRemoveLogo = () => {\n    setLogoUrl(\"\")\n    localStorage.removeItem(\"logoUrl\")\n    window.dispatchEvent(new CustomEvent(\"logoChange\", { detail: { url: \"\" } }))\n    setHasChanges(true)\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header */}\n      <div className=\"border-b border-gray-200 bg-white px-8 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"font-serif text-4xl font-bold text-gray-900\">Configuraci├│n</h1>\n            <p className=\"mt-1 text-sm text-gray-600\">Administra todos los aspectos del sistema</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <RotateCcw className=\"mr-2 h-4 w-4\" />\n              Deshacer\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <RefreshCw className=\"mr-2 h-4 w-4\" />\n              Reiniciar\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex\">\n        {/* Sidebar de navegaci├│n */}\n        <aside className=\"sticky top-0 h-screen w-64 border-r border-gray-200 bg-gray-50 p-4\">\n          <nav className=\"space-y-1\">\n            {sections.map((section) => {\n              const Icon = section.icon\n              const isActive = activeSection === section.id\n              return (\n                <button\n                  key={section.id}\n                  onClick={() => setActiveSection(section.id)}\n                  className={`flex w-full items-center gap-3 rounded-xl px-4 py-3 text-sm font-medium transition-all ${\n                    isActive ? \"bg-[#C8A96A] text-white shadow-lg\" : \"text-gray-700 hover:bg-gray-100\"\n                  }`}\n                >\n                  <Icon className=\"h-5 w-5\" />\n                  {section.name}\n                </button>\n              )\n            })}\n          </nav>\n        </aside>\n\n        {/* Panel principal */}\n        <main className=\"flex-1 p-8\">\n          <div className=\"mx-auto max-w-5xl space-y-8\">\n            {/* A. General */}\n            {activeSection === \"general\" && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.12 }}\n              >\n                <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n                  <h2 className=\"font-serif text-2xl font-bold text-gray-900\">General</h2>\n                  <p className=\"mt-1 text-sm text-gray-600\">Estado del sistema y reglas de negocio</p>\n                  <Separator className=\"my-6\" />\n\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label>A├▒o fiscal</Label>\n                      <Select\n                        value={fiscalYear.toString()}\n                        onValueChange={(value) => {\n                          setFiscalYear(Number.parseInt(value, 10))\n                          setHasChanges(true)\n                        }}\n                      >\n                        <SelectTrigger className=\"mt-2\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {Array.from({ length: 2040 - 2023 + 1 }, (_, i) => 2023 + i).map((year) => (\n                            <SelectItem key={year} value={year.toString()}>\n                              {year}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <p className=\"mt-2 text-xs text-gray-500\">\n                        El a├▒o seleccionado se aplicar├í autom├íticamente en todo el dashboard\n                      </p>\n                    </div>\n\n                    <div>\n                      <Label>Mes en curso</Label>\n                      <Select defaultValue=\"octubre-2025\">\n                        <SelectTrigger className=\"mt-2\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"octubre-2025\">Octubre 2025 (Abierto)</SelectItem>\n                          <SelectItem value=\"septiembre-2025\">Septiembre 2025 (Cerrado)</SelectItem>\n                          <SelectItem value=\"agosto-2025\">Agosto 2025 (Cerrado)</SelectItem>\n                          <SelectItem value=\"julio-2025\">Julio 2025 (Cerrado)</SelectItem>\n                          <SelectItem value=\"junio-2025\">Junio 2025 (Cerrado)</SelectItem>\n                          <SelectItem value=\"mayo-2025\">Mayo 2025 (Cerrado)</SelectItem>\n                          <SelectItem value=\"abril-2025\">Abril 2025 (Cerrado)</SelectItem>\n                          <SelectItem value=\"marzo-2025\">Marzo 2025 (Cerrado)</SelectItem>\n                          <SelectItem value=\"febrero-2025\">Febrero 2025 (Cerrado)</SelectItem>\n                          <SelectItem value=\"enero-2025\">Enero 2025 (Cerrado)</SelectItem>\n                          <SelectItem value=\"diciembre-2024\">Diciembre 2024 (Cerrado)</SelectItem>\n                          <SelectItem value=\"noviembre-2024\">Noviembre 2024 (Cerrado)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"space-y-4\">\n                      <h3 className=\"font-semibold text-gray-900\">Reglas de negocio</h3>\n\n                      <div className=\"flex items-center justify-between rounded-xl bg-gray-50 p-4\">\n                        <div>\n                          <p className=\"font-medium text-gray-900\">Comprobante obligatorio en Transferencias</p>\n                          <p className=\"text-sm text-gray-600\">\n                            Requiere adjuntar comprobante al agregar pagos por transferencia\n                          </p>\n                        </div>\n                        <Switch\n                          checked={paymentsConfig.requireTransferReceipt}\n                          onCheckedChange={(checked) => {\n                            setPaymentsConfig({ ...paymentsConfig, requireTransferReceipt: checked })\n                            setHasChanges(true)\n                          }}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between rounded-xl bg-gray-50 p-4\">\n                        <div>\n                          <p className=\"font-medium text-gray-900\">Permitir gastos en meses cerrados</p>\n                          <p className=\"text-sm text-gray-600\">Permite agregar gastos en meses ya cerrados</p>\n                        </div>\n                        <Switch\n                          checked={paymentsConfig.allowAddExpensesOnClosedMonths}\n                          onCheckedChange={(checked) => {\n                            setPaymentsConfig({ ...paymentsConfig, allowAddExpensesOnClosedMonths: checked })\n                            setHasChanges(true)\n                          }}\n                        />\n                      </div>\n\n                      <div className=\"flex items-center justify-between rounded-xl bg-gray-50 p-4\">\n                        <div>\n                          <p className=\"font-medium text-gray-900\">Bloquear edici├│n de ventas en meses cerrados</p>\n                          <p className=\"text-sm text-gray-600\">Impide modificar ventas de meses ya cerrados</p>\n                        </div>\n                        <Switch\n                          checked={paymentsConfig.lockSalesOnClosedMonths}\n                          onCheckedChange={(checked) => {\n                            setPaymentsConfig({ ...paymentsConfig, lockSalesOnClosedMonths: checked })\n                            setHasChanges(true)\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* B. Usuarios & Roles */}\n            {activeSection === \"usuarios\" && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.12 }}\n                className=\"space-y-6\"\n              >\n                {/* Tabla de usuarios */}\n                <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h2 className=\"font-serif text-2xl font-bold text-gray-900\">Usuarios</h2>\n                      <p className=\"mt-1 text-sm text-gray-600\">Gestiona los usuarios del sistema</p>\n                    </div>\n                    <Dialog open={showUserDialog} onOpenChange={setShowUserDialog}>\n                      <DialogTrigger asChild>\n                        <Button className=\"bg-[#C8A96A] hover:bg-[#B8996A]\">\n                          <Plus className=\"mr-2 h-4 w-4\" />\n                          Crear Usuario\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-2xl\">\n                        <DialogHeader>\n                          <DialogTitle className=\"font-serif text-2xl\">Crear Usuario</DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-4 py-4\">\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <Label>Nombre completo</Label>\n                              <Input className=\"mt-2\" placeholder=\"Juan P├®rez\" />\n                            </div>\n                            <div>\n                              <Label>Email</Label>\n                              <Input className=\"mt-2\" type=\"email\" placeholder=\"juan@galle.com\" />\n                            </div>\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <Label>Rol</Label>\n                              <Select defaultValue=\"viewer\">\n                                <SelectTrigger className=\"mt-2\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"admin\">Admin</SelectItem>\n                                  <SelectItem value=\"manager\">Manager</SelectItem>\n                                  <SelectItem value=\"analyst\">Analyst</SelectItem>\n                                  <SelectItem value=\"asesor\">Asesor</SelectItem>\n                                  <SelectItem value=\"viewer\">Viewer</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div>\n                              <Label>Estado</Label>\n                              <Select defaultValue=\"active\">\n                                <SelectTrigger className=\"mt-2\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"active\">Activo</SelectItem>\n                                  <SelectItem value=\"inactive\">Inactivo</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Switch id=\"send-invite\" />\n                            <Label htmlFor=\"send-invite\">Enviar invitaci├│n por email</Label>\n                          </div>\n                        </div>\n                        <div className=\"flex justify-end gap-2\">\n                          <Button variant=\"outline\" onClick={() => setShowUserDialog(false)}>\n                            Cancelar\n                          </Button>\n                          <Button className=\"bg-[#C8A96A] hover:bg-[#B8996A]\" onClick={() => setShowUserDialog(false)}>\n                            Crear Usuario\n                          </Button>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                  <Separator className=\"my-6\" />\n\n                  <div className=\"overflow-hidden rounded-xl border border-gray-200\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-gray-50\">\n                        <tr>\n                          <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase text-gray-600\">Usuario</th>\n                          <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase text-gray-600\">Email</th>\n                          <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase text-gray-600\">Rol</th>\n                          <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase text-gray-600\">Estado</th>\n                          <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase text-gray-600\">\n                            ├Ültimo acceso\n                          </th>\n                          <th className=\"px-4 py-3 text-right text-xs font-semibold uppercase text-gray-600\">\n                            Acciones\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-gray-200\">\n                        {mockUsers.map((user, idx) => (\n                          <tr key={user.id} className={idx % 2 === 0 ? \"bg-white\" : \"bg-[#FAFAFC]\"}>\n                            <td className=\"px-4 py-3\">\n                              <div className=\"flex items-center gap-3\">\n                                <div className=\"flex h-10 w-10 items-center justify-center rounded-full bg-[#C8A96A] text-sm font-bold text-white\">\n                                  {user.name.charAt(0)}\n                                </div>\n                                <span className=\"font-medium text-gray-900\">{user.name}</span>\n                              </div>\n                            </td>\n                            <td className=\"px-4 py-3 text-sm text-gray-600\">{user.email}</td>\n                            <td className=\"px-4 py-3\">\n                              <Badge variant=\"outline\" className=\"capitalize\">\n                                {user.role}\n                              </Badge>\n                            </td>\n                            <td className=\"px-4 py-3\">\n                              <Badge\n                                variant={user.active ? \"default\" : \"secondary\"}\n                                className={user.active ? \"bg-green-100 text-green-700\" : \"\"}\n                              >\n                                {user.active ? \"Activo\" : \"Bloqueado\"}\n                              </Badge>\n                            </td>\n                            <td className=\"px-4 py-3 text-sm text-gray-600\">{user.lastAccess}</td>\n                            <td className=\"px-4 py-3\">\n                              <div className=\"flex justify-end gap-2\">\n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <Edit className=\"h-4 w-4\" />\n                                </Button>\n                                <Button variant=\"ghost\" size=\"sm\">\n                                  <Trash2 className=\"h-4 w-4 text-red-500\" />\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n\n                {/* Matriz de permisos */}\n                <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n                  <h2 className=\"font-serif text-2xl font-bold text-gray-900\">Roles & Permisos</h2>\n                  <p className=\"mt-1 text-sm text-gray-600\">Matriz de permisos por rol y m├│dulo</p>\n                  <Separator className=\"my-6\" />\n\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"border-b border-gray-200\">\n                          <th className=\"px-4 py-3 text-left text-sm font-semibold text-gray-900\">M├│dulo</th>\n                          <th className=\"px-4 py-3 text-center text-sm font-semibold text-gray-900\">Admin</th>\n                          <th className=\"px-4 py-3 text-center text-sm font-semibold text-gray-900\">Manager</th>\n                          <th className=\"px-4 py-3 text-center text-sm font-semibold text-gray-900\">Analyst</th>\n                          <th className=\"px-4 py-3 text-center text-sm font-semibold text-gray-900\">Asesor</th>\n                          <th className=\"px-4 py-3 text-center text-sm font-semibold text-gray-900\">Viewer</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-gray-200\">\n                        {[\"ventas\", \"pagos\", \"gastos\", \"cogs\", \"clientes\", \"geografia\", \"config\"].map((module) => (\n                          <tr key={module}>\n                            <td className=\"px-4 py-3 font-medium capitalize text-gray-900\">{module}</td>\n                            {[\"admin\", \"manager\", \"analyst\", \"asesor\", \"viewer\"].map((role) => {\n                              const perms =\n                                mockRolePerms.find((rp) => rp.role === role && rp.module === module)?.perms || []\n                              return (\n                                <td key={role} className=\"px-4 py-3\">\n                                  <div className=\"flex justify-center gap-1\">\n                                    {perms.includes(\"read\") && (\n                                      <Badge variant=\"outline\" className=\"text-xs\">\n                                        Ver\n                                      </Badge>\n                                    )}\n                                    {perms.includes(\"create\") && (\n                                      <Badge variant=\"outline\" className=\"text-xs\">\n                                        Crear\n                                      </Badge>\n                                    )}\n                                    {perms.includes(\"update\") && (\n                                      <Badge variant=\"outline\" className=\"text-xs\">\n                                        Editar\n                                      </Badge>\n                                    )}\n                                    {perms.includes(\"delete\") && (\n                                      <Badge variant=\"outline\" className=\"text-xs text-red-600\">\n                                        Eliminar\n                                      </Badge>\n                                    )}\n                                  </div>\n                                </td>\n                              )\n                            })}\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* C. Localizaci├│n */}\n            {activeSection === \"localizacion\" && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.12 }}\n              >\n                <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n                  <h2 className=\"font-serif text-2xl font-bold text-gray-900\">Localizaci├│n</h2>\n                  <p className=\"mt-1 text-sm text-gray-600\">Configuraci├│n de fecha, hora y moneda</p>\n                  <Separator className=\"my-6\" />\n\n                  <div className=\"space-y-6\">\n                    <div className=\"grid grid-cols-2 gap-6\">\n                      <div>\n                        <Label>Zona horaria</Label>\n                        <Select\n                          value={localization.timezone}\n                          onValueChange={(value) => {\n                            setLocalization({ ...localization, timezone: value })\n                            setHasChanges(true)\n                          }}\n                        >\n                          <SelectTrigger className=\"mt-2\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"America/Bogota\">America/Bogota (GMT-5)</SelectItem>\n                            <SelectItem value=\"America/New_York\">America/New_York (GMT-5)</SelectItem>\n                            <SelectItem value=\"Europe/Madrid\">Europe/Madrid (GMT+1)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label>Formato de fecha</Label>\n                        <Select\n                          value={localization.dateFormat}\n                          onValueChange={(value: any) => {\n                            setLocalization({ ...localization, dateFormat: value })\n                            setHasChanges(true)\n                          }}\n                        >\n                          <SelectTrigger className=\"mt-2\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY</SelectItem>\n                            <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label>Formato de hora</Label>\n                        <Select\n                          value={localization.timeFormat}\n                          onValueChange={(value: any) => {\n                            setLocalization({ ...localization, timeFormat: value })\n                            setHasChanges(true)\n                          }}\n                        >\n                          <SelectTrigger className=\"mt-2\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"24h\">24 horas</SelectItem>\n                            <SelectItem value=\"12h\">12 horas (AM/PM)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label>Moneda base</Label>\n                        <Select\n                          value={localization.currency}\n                          onValueChange={(value: any) => {\n                            setLocalization({ ...localization, currency: value })\n                            setHasChanges(true)\n                          }}\n                        >\n                          <SelectTrigger className=\"mt-2\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"COP\">COP (Peso Colombiano)</SelectItem>\n                            <SelectItem value=\"USD\">USD (D├│lar)</SelectItem>\n                            <SelectItem value=\"EUR\">EUR (Euro)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label>Redondeo</Label>\n                        <Select\n                          value={localization.rounding}\n                          onValueChange={(value: any) => {\n                            setLocalization({ ...localization, rounding: value })\n                            setHasChanges(true)\n                          }}\n                        >\n                          <SelectTrigger className=\"mt-2\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"peso\">A peso</SelectItem>\n                            <SelectItem value=\"unidad\">A unidad</SelectItem>\n                            <SelectItem value=\"centena\">A centena</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div className=\"rounded-xl bg-gray-50 p-4\">\n                      <h3 className=\"mb-3 font-semibold text-gray-900\">Vista previa</h3>\n                      <div className=\"space-y-2 text-sm\">\n                        <p className=\"text-gray-600\">\n                          N├║mero: <span className=\"font-mono font-semibold text-gray-900\">{previewNumber}</span>\n                        </p>\n                        <p className=\"text-gray-600\">\n                          Fecha: <span className=\"font-mono font-semibold text-gray-900\">{previewDate}</span>\n                        </p>\n                        <p className=\"text-gray-600\">\n                          Hora:{\" \"}\n                          <span className=\"font-mono font-semibold text-gray-900\">\n                            {localization.timeFormat === \"24h\" ? \"14:30\" : \"2:30 PM\"}\n                          </span>\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* D. Empresa & Branding */}\n            {activeSection === \"empresa\" && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.12 }}\n              >\n                <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n                  <h2 className=\"font-serif text-2xl font-bold text-gray-900\">Empresa & Branding</h2>\n                  <p className=\"mt-1 text-sm text-gray-600\">Informaci├│n de la empresa y personalizaci├│n</p>\n                  <Separator className=\"my-6\" />\n\n                  <div className=\"space-y-6\">\n                    <div className=\"grid grid-cols-2 gap-6\">\n                      <div>\n                        <Label>Nombre legal</Label>\n                        <Input\n                          className=\"mt-2\"\n                          value={branding.company}\n                          onChange={(e) => {\n                            setBranding({ ...branding, company: e.target.value })\n                            setHasChanges(true)\n                          }}\n                        />\n                      </div>\n                      <div>\n                        <Label>NIT</Label>\n                        <Input\n                          className=\"mt-2\"\n                          value={branding.nit}\n                          onChange={(e) => {\n                            setBranding({ ...branding, nit: e.target.value })\n                            setHasChanges(true)\n                          }}\n                        />\n                      </div>\n                      <div className=\"col-span-2\">\n                        <Label>Direcci├│n</Label>\n                        <Input\n                          className=\"mt-2\"\n                          value={branding.address}\n                          onChange={(e) => {\n                            setBranding({ ...branding, address: e.target.value })\n                            setHasChanges(true)\n                          }}\n                        />\n                      </div>\n                      <div>\n                        <Label>Tel├®fono</Label>\n                        <Input\n                          className=\"mt-2\"\n                          value={branding.phone}\n                          onChange={(e) => {\n                            setBranding({ ...branding, phone: e.target.value })\n                            setHasChanges(true)\n                          }}\n                        />\n                      </div>\n                      <div>\n                        <Label>Email</Label>\n                        <Input\n                          className=\"mt-2\"\n                          type=\"email\"\n                          value={branding.email}\n                          onChange={(e) => {\n                            setBranding({ ...branding, email: e.target.value })\n                            setHasChanges(true)\n                          }}\n                        />\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div>\n                      <h3 className=\"mb-4 font-semibold text-gray-900\">Branding</h3>\n                      <div className=\"grid grid-cols-2 gap-6\">\n                        <div>\n                          <Label>Logo</Label>\n                          {logoUrl ? (\n                            <div className=\"mt-2 relative\">\n                              <div className=\"flex h-32 items-center justify-center rounded-xl border-2 border-gray-300 bg-gray-50 p-4\">\n                                <img\n                                  src={logoUrl || \"/placeholder.svg\"}\n                                  alt=\"Logo de la empresa\"\n                                  className=\"max-h-full max-w-full object-contain\"\n                                />\n                              </div>\n                              <button\n                                onClick={handleRemoveLogo}\n                                className=\"absolute -top-2 -right-2 flex h-6 w-6 items-center justify-center rounded-full bg-red-500 text-white hover:bg-red-600 transition-colors\"\n                                aria-label=\"Eliminar logo\"\n                              >\n                                <X className=\"h-4 w-4\" />\n                              </button>\n                            </div>\n                          ) : (\n                            <div className=\"mt-2\">\n                              <input\n                                type=\"file\"\n                                id=\"logo-upload\"\n                                accept=\"image/*\"\n                                className=\"hidden\"\n                                onChange={(e) => {\n                                  const file = e.target.files?.[0]\n                                  if (file) {\n                                    handleLogoUpload(file)\n                                  }\n                                }}\n                              />\n                              <label\n                                htmlFor=\"logo-upload\"\n                                className={`flex h-32 items-center justify-center rounded-xl border-2 border-dashed border-gray-300 bg-gray-50 cursor-pointer hover:border-[#C8A96A] hover:bg-[#C8A96A]/5 transition-colors ${\n                                  isUploadingLogo ? \"opacity-50 cursor-not-allowed\" : \"\"\n                                }`}\n                              >\n                                <div className=\"text-center\">\n                                  {isUploadingLogo ? (\n                                    <>\n                                      <RefreshCw className=\"mx-auto h-8 w-8 text-gray-400 animate-spin\" />\n                                      <p className=\"mt-2 text-sm text-gray-600\">Subiendo...</p>\n                                    </>\n                                  ) : (\n                                    <>\n                                      <Upload className=\"mx-auto h-8 w-8 text-gray-400\" />\n                                      <p className=\"mt-2 text-sm text-gray-600\">Subir logo</p>\n                                      <p className=\"mt-1 text-xs text-gray-500\">PNG, JPG, SVG (m├íx. 5MB)</p>\n                                    </>\n                                  )}\n                                </div>\n                              </label>\n                            </div>\n                          )}\n                        </div>\n                        <div>\n                          <Label>Color primario</Label>\n                          <div className=\"mt-2 flex gap-2\">\n                            <Input\n                              type=\"color\"\n                              value={branding.primary}\n                              onChange={(e) => {\n                                setBranding({ ...branding, primary: e.target.value })\n                                setHasChanges(true)\n                              }}\n                              className=\"h-12 w-20\"\n                            />\n                            <Input\n                              value={branding.primary}\n                              onChange={(e) => {\n                                setBranding({ ...branding, primary: e.target.value })\n                                setHasChanges(true)\n                              }}\n                              className=\"flex-1\"\n                            />\n                          </div>\n                        </div>\n                        <div className=\"col-span-2\">\n                          <Label>Color de barra lateral</Label>\n                          <p className=\"mt-1 text-xs text-gray-500\">\n                            El color se aplicar├í autom├íticamente a la barra lateral\n                          </p>\n                          <div className=\"mt-3 grid grid-cols-5 gap-3\">\n                            {luxuryColors.map((color) => (\n                              <button\n                                key={color.theme}\n                                onClick={() => {\n                                  setSidebarTheme(color.theme)\n                                  setHasChanges(true)\n                                }}\n                                className={`group relative overflow-hidden rounded-xl border-2 transition-all ${\n                                  sidebarTheme === color.theme\n                                    ? \"border-[#C8A96A] shadow-lg\"\n                                    : \"border-gray-200 hover:border-gray-300\"\n                                }`}\n                              >\n                                <div\n                                  className=\"h-24 w-full transition-transform group-hover:scale-105\"\n                                  style={{ backgroundColor: color.preview }}\n                                />\n                                <div className=\"bg-white p-2\">\n                                  <p className=\"text-xs font-semibold text-gray-900\">{color.name}</p>\n                                  <p className=\"text-[10px] text-gray-500\">{color.description}</p>\n                                </div>\n                                {sidebarTheme === color.theme && (\n                                  <div className=\"absolute right-2 top-2 flex h-6 w-6 items-center justify-center rounded-full bg-[#C8A96A] text-white\">\n                                    <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                      <path\n                                        strokeLinecap=\"round\"\n                                        strokeLinejoin=\"round\"\n                                        strokeWidth={2}\n                                        d=\"M5 13l4 4L19 7\"\n                                      />\n                                    </svg>\n                                  </div>\n                                )}\n                              </button>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div>\n                      <Label>T├®rminos y condiciones</Label>\n                      <Textarea className=\"mt-2\" rows={4} placeholder=\"Ingresa los t├®rminos y condiciones...\" />\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* E. Pagos */}\n            {activeSection === \"pagos\" && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.12 }}\n              >\n                <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n                  <h2 className=\"font-serif text-2xl font-bold text-gray-900\">Pagos</h2>\n                  <p className=\"mt-1 text-sm text-gray-600\">Configuraci├│n de m├®todos y subm├®todos de pago</p>\n                  <Separator className=\"my-6\" />\n\n                  <div className=\"space-y-6\">\n                    <div>\n                      <h3 className=\"mb-4 font-semibold text-gray-900\">M├®todos de pago</h3>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between rounded-xl bg-gray-50 p-4\">\n                          <span className=\"font-medium text-gray-900\">Transferencia</span>\n                          <Badge className=\"bg-green-100 text-green-700\">Activo</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between rounded-xl bg-gray-50 p-4\">\n                          <span className=\"font-medium text-gray-900\">Efectivo</span>\n                          <Badge className=\"bg-green-100 text-green-700\">Activo</Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between rounded-xl bg-gray-50 p-4\">\n                          <span className=\"font-medium text-gray-900\">MiPaquete</span>\n                          <Badge className=\"bg-green-100 text-green-700\">Activo</Badge>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div>\n                      <div className=\"mb-4 flex items-center justify-between\">\n                        <h3 className=\"font-semibold text-gray-900\">Subm├®todos de Transferencia</h3>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge className=\"bg-[#C8A96A] text-white\">ENFORCED</Badge>\n                          <Dialog open={showAddBankDialog} onOpenChange={setShowAddBankDialog}>\n                            <DialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"outline\" className=\"gap-2 bg-transparent\">\n                                <Plus className=\"h-4 w-4\" />\n                                Agregar Entidad\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"max-w-md\">\n                              <DialogHeader>\n                                <DialogTitle className=\"font-serif text-2xl\">Agregar Entidad Bancaria</DialogTitle>\n                              </DialogHeader>\n                              <div className=\"space-y-4 py-4\">\n                                <div>\n                                  <Label>Nombre de la entidad</Label>\n                                  <Input\n                                    className=\"mt-2\"\n                                    placeholder=\"Ej: BBVA, Scotiabank, etc.\"\n                                    value={newBankName}\n                                    onChange={(e) => setNewBankName(e.target.value)}\n                                  />\n                                </div>\n                              </div>\n                              <div className=\"flex justify-end gap-2\">\n                                <Button\n                                  variant=\"outline\"\n                                  onClick={() => {\n                                    setShowAddBankDialog(false)\n                                    setNewBankName(\"\")\n                                  }}\n                                >\n                                  Cancelar\n                                </Button>\n                                <Button\n                                  className=\"bg-[#C8A96A] hover:bg-[#B8996A]\"\n                                  onClick={() => {\n                                    if (newBankName.trim()) {\n                                      const bankKey = newBankName.toLowerCase().replace(/\\s+/g, \"\")\n                                      setPaymentsConfig({\n                                        ...paymentsConfig,\n                                        transferSubs: { ...paymentsConfig.transferSubs, [bankKey]: true },\n                                        customBanks: [...paymentsConfig.customBanks, newBankName],\n                                      })\n                                      setShowAddBankDialog(false)\n                                      setNewBankName(\"\")\n                                      setHasChanges(true)\n                                    }\n                                  }}\n                                >\n                                  Agregar\n                                </Button>\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n                        </div>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between rounded-xl bg-gray-50 p-4\">\n                          <span className=\"font-medium text-gray-900\">Bancolombia</span>\n                          <Switch\n                            checked={paymentsConfig.transferSubs.bancolombia}\n                            onCheckedChange={(checked) => {\n                              setPaymentsConfig({\n                                ...paymentsConfig,\n                                transferSubs: { ...paymentsConfig.transferSubs, bancolombia: checked },\n                              })\n                              setHasChanges(true)\n                            }}\n                          />\n                        </div>\n                        <div className=\"flex items-center justify-between rounded-xl bg-gray-50 p-4\">\n                          <span className=\"font-medium text-gray-900\">Nequi</span>\n                          <Switch\n                            checked={paymentsConfig.transferSubs.nequi}\n                            onCheckedChange={(checked) => {\n                              setPaymentsConfig({\n                                ...paymentsConfig,\n                                transferSubs: { ...paymentsConfig.transferSubs, nequi: checked },\n                              })\n                              setHasChanges(true)\n                            }}\n                          />\n                        </div>\n                        <div className=\"flex items-center justify-between rounded-xl bg-gray-50 p-4\">\n                          <span className=\"font-medium text-gray-900\">Daviplata</span>\n                          <Switch\n                            checked={paymentsConfig.transferSubs.daviplata}\n                            onCheckedChange={(checked) => {\n                              setPaymentsConfig({\n                                ...paymentsConfig,\n                                transferSubs: { ...paymentsConfig.transferSubs, daviplata: checked },\n                              })\n                              setHasChanges(true)\n                            }}\n                          />\n                        </div>\n                        <div className=\"flex items-center justify-between rounded-xl bg-gray-50 p-4\">\n                          <span className=\"font-medium text-gray-900\">Davivienda</span>\n                          <Switch\n                            checked={paymentsConfig.transferSubs.davivienda}\n                            onCheckedChange={(checked) => {\n                              setPaymentsConfig({\n                                ...paymentsConfig,\n                                transferSubs: { ...paymentsConfig.transferSubs, davivienda: checked },\n                              })\n                              setHasChanges(true)\n                            }}\n                          />\n                        </div>\n                        {paymentsConfig.customBanks.map((bank) => {\n                          const bankKey = bank.toLowerCase().replace(/\\s+/g, \"\")\n                          return (\n                            <div key={bankKey} className=\"flex items-center justify-between rounded-xl bg-amber-50 p-4\">\n                              <div className=\"flex items-center gap-2\">\n                                <span className=\"font-medium text-gray-900\">{bank}</span>\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  Personalizada\n                                </Badge>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <Switch\n                                  checked={paymentsConfig.transferSubs[bankKey]}\n                                  onCheckedChange={(checked) => {\n                                    setPaymentsConfig({\n                                      ...paymentsConfig,\n                                      transferSubs: { ...paymentsConfig.transferSubs, [bankKey]: checked },\n                                    })\n                                    setHasChanges(true)\n                                  }}\n                                />\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => {\n                                    const newTransferSubs = { ...paymentsConfig.transferSubs }\n                                    delete newTransferSubs[bankKey]\n                                    setPaymentsConfig({\n                                      ...paymentsConfig,\n                                      transferSubs: newTransferSubs,\n                                      customBanks: paymentsConfig.customBanks.filter((b) => b !== bank),\n                                    })\n                                    setHasChanges(true)\n                                  }}\n                                >\n                                  <Trash2 className=\"h-4 w-4 text-red-500\" />\n                                </Button>\n                              </div>\n                            </div>\n                          )\n                        })}\n                      </div>\n                    </div>\n\n                    <div className=\"rounded-xl border-2 border-[#C8A96A] bg-[#C8A96A]/5 p-4\">\n                      <div className=\"flex gap-3\">\n                        <AlertCircle className=\"h-5 w-5 text-[#C8A96A]\" />\n                        <div>\n                          <p className=\"font-semibold text-gray-900\">Comprobante obligatorio</p>\n                          <p className=\"text-sm text-gray-600\">\n                            Los pagos por transferencia requieren adjuntar comprobante. Esta regla est├í activa.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* F. Notificaciones */}\n            {activeSection === \"notificaciones\" && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.12 }}\n              >\n                <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n                  <h2 className=\"font-serif text-2xl font-bold text-gray-900\">Notificaciones</h2>\n                  <p className=\"mt-1 text-sm text-gray-600\">Configuraci├│n de canales y eventos</p>\n                  <Separator className=\"my-6\" />\n\n                  <div className=\"overflow-hidden rounded-xl border border-gray-200\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-gray-50\">\n                        <tr>\n                          <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase text-gray-600\">Evento</th>\n                          <th className=\"px-4 py-3 text-center text-xs font-semibold uppercase text-gray-600\">Email</th>\n                          <th className=\"px-4 py-3 text-center text-xs font-semibold uppercase text-gray-600\">\n                            WhatsApp\n                          </th>\n                          <th className=\"px-4 py-3 text-center text-xs font-semibold uppercase text-gray-600\">\n                            In-App\n                          </th>\n                          <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase text-gray-600\">Roles</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-gray-200\">\n                        {mockNotifications.map((notif, idx) => (\n                          <tr key={idx} className={idx % 2 === 0 ? \"bg-white\" : \"bg-[#FAFAFC]\"}>\n                            <td className=\"px-4 py-3 font-medium text-gray-900\">{notif.event}</td>\n                            <td className=\"px-4 py-3 text-center\">\n                              <Switch checked={notif.channel === \"email\" && notif.enabled} />\n                            </td>\n                            <td className=\"px-4 py-3 text-center\">\n                              <Switch checked={notif.channel === \"whatsapp\" && notif.enabled} />\n                            </td>\n                            <td className=\"px-4 py-3 text-center\">\n                              <Switch checked={notif.channel === \"inapp\" && notif.enabled} />\n                            </td>\n                            <td className=\"px-4 py-3\">\n                              <div className=\"flex gap-1\">\n                                {notif.roleScope.map((role) => (\n                                  <Badge key={role} variant=\"outline\" className=\"text-xs capitalize\">\n                                    {role}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* G. Seguridad */}\n            {activeSection === \"seguridad\" && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.12 }}\n              >\n                <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n                  <h2 className=\"font-serif text-2xl font-bold text-gray-900\">Seguridad</h2>\n                  <p className=\"mt-1 text-sm text-gray-600\">Configuraci├│n de seguridad y acceso</p>\n                  <Separator className=\"my-6\" />\n\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-center justify-between rounded-xl bg-gray-50 p-4\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">Autenticaci├│n de dos factores (2FA)</p>\n                        <p className=\"text-sm text-gray-600\">Requiere c├│digo adicional al iniciar sesi├│n</p>\n                      </div>\n                      <Switch />\n                    </div>\n\n                    <Separator />\n\n                    <div>\n                      <h3 className=\"mb-4 font-semibold text-gray-900\">Pol├¡tica de contrase├▒as</h3>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label>Longitud m├¡nima</Label>\n                          <Input className=\"mt-2\" type=\"number\" defaultValue=\"8\" />\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Switch id=\"require-uppercase\" defaultChecked />\n                          <Label htmlFor=\"require-uppercase\">Requiere may├║sculas</Label>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Switch id=\"require-numbers\" defaultChecked />\n                          <Label htmlFor=\"require-numbers\">Requiere n├║meros</Label>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Switch id=\"require-special\" />\n                          <Label htmlFor=\"require-special\">Requiere caracteres especiales</Label>\n                        </div>\n                        <div>\n                          <Label>Vencimiento (d├¡as)</Label>\n                          <Input className=\"mt-2\" type=\"number\" defaultValue=\"90\" />\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div>\n                      <h3 className=\"mb-4 font-semibold text-gray-900\">Sesiones</h3>\n                      <Button variant=\"outline\" className=\"w-full bg-transparent\">\n                        Cerrar todas las sesiones activas\n                      </Button>\n                    </div>\n\n                    <Separator />\n\n                    <div>\n                      <h3 className=\"mb-4 font-semibold text-gray-900\">IPs confiables</h3>\n                      <div className=\"flex flex-wrap gap-2\">\n                        <Badge variant=\"outline\">192.168.1.100</Badge>\n                        <Badge variant=\"outline\">192.168.1.101</Badge>\n                        <Badge variant=\"outline\">10.0.0.50</Badge>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Plus className=\"mr-2 h-4 w-4\" />\n                          Agregar IP\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* H. Integraciones */}\n            {activeSection === \"integraciones\" && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.12 }}\n              >\n                <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h2 className=\"font-serif text-2xl font-bold text-gray-900\">Integraciones</h2>\n                      <p className=\"mt-1 text-sm text-gray-600\">Servicios externos conectados</p>\n                    </div>\n                    <Dialog open={showAddIntegrationDialog} onOpenChange={setShowAddIntegrationDialog}>\n                      <DialogTrigger asChild>\n                        <Button className=\"bg-[#C8A96A] hover:bg-[#B8996A]\">\n                          <Plus className=\"mr-2 h-4 w-4\" />\n                          Agregar Integraci├│n\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-2xl\">\n                        <DialogHeader>\n                          <DialogTitle className=\"font-serif text-2xl\">Agregar Integraci├│n</DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-4 py-4\">\n                          <div>\n                            <Label>Nombre del proveedor</Label>\n                            <Input\n                              className=\"mt-2\"\n                              placeholder=\"Ej: Stripe, PayPal, etc.\"\n                              value={newIntegration.provider}\n                              onChange={(e) => setNewIntegration({ ...newIntegration, provider: e.target.value })}\n                            />\n                          </div>\n                          <div>\n                            <Label>API Key</Label>\n                            <Input\n                              className=\"mt-2\"\n                              type=\"password\"\n                              placeholder=\"Ingresa la API Key\"\n                              value={newIntegration.key}\n                              onChange={(e) => setNewIntegration({ ...newIntegration, key: e.target.value })}\n                            />\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Switch\n                              id=\"integration-enabled\"\n                              checked={newIntegration.enabled}\n                              onCheckedChange={(checked) => setNewIntegration({ ...newIntegration, enabled: checked })}\n                            />\n                            <Label htmlFor=\"integration-enabled\">Activar integraci├│n</Label>\n                          </div>\n                        </div>\n                        <div className=\"flex justify-end gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => {\n                              setShowAddIntegrationDialog(false)\n                              setNewIntegration({ provider: \"\", key: \"\", enabled: true })\n                            }}\n                          >\n                            Cancelar\n                          </Button>\n                          <Button\n                            className=\"bg-[#C8A96A] hover:bg-[#B8996A]\"\n                            onClick={() => {\n                              if (newIntegration.provider && newIntegration.key) {\n                                const maskedKey = `${newIntegration.key.substring(0, 5)}...****...${newIntegration.key.substring(newIntegration.key.length - 3)}`\n                                setIntegrations([\n                                  ...integrations,\n                                  {\n                                    provider: newIntegration.provider.toLowerCase(),\n                                    keyMasked: maskedKey,\n                                    enabled: newIntegration.enabled,\n                                    isCustom: true,\n                                  },\n                                ])\n                                setShowAddIntegrationDialog(false)\n                                setNewIntegration({ provider: \"\", key: \"\", enabled: true })\n                                setHasChanges(true)\n                              }\n                            }}\n                          >\n                            Agregar Integraci├│n\n                          </Button>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                  <Separator className=\"my-6\" />\n\n                  <div className=\"space-y-6\">\n                    {integrations.map((integration, idx) => (\n                      <div key={`${integration.provider}-${idx}`} className=\"rounded-xl border border-gray-200 p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"flex h-12 w-12 items-center justify-center rounded-xl bg-gray-100\">\n                              <Plug className=\"h-6 w-6 text-gray-600\" />\n                            </div>\n                            <div>\n                              <div className=\"flex items-center gap-2\">\n                                <p className=\"font-semibold capitalize text-gray-900\">{integration.provider}</p>\n                                {integration.isCustom && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    Personalizada\n                                  </Badge>\n                                )}\n                              </div>\n                              <p className=\"text-sm text-gray-600\">\n                                {showPasswordFields[integration.provider] ? integration.keyMasked : \"ÔÇóÔÇóÔÇóÔÇóÔÇóÔÇóÔÇóÔÇóÔÇóÔÇóÔÇóÔÇóÔÇóÔÇóÔÇóÔÇó\"}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() =>\n                                setShowPasswordFields({\n                                  ...showPasswordFields,\n                                  [integration.provider]: !showPasswordFields[integration.provider],\n                                })\n                              }\n                            >\n                              {showPasswordFields[integration.provider] ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                            {integration.isCustom && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setIntegrations(integrations.filter((_, i) => i !== idx))\n                                  setHasChanges(true)\n                                }}\n                              >\n                                <Trash2 className=\"h-4 w-4 text-red-500\" />\n                              </Button>\n                            )}\n                            <Switch\n                              checked={integration.enabled}\n                              onCheckedChange={(checked) => {\n                                const updated = [...integrations]\n                                updated[idx].enabled = checked\n                                setIntegrations(updated)\n                                setHasChanges(true)\n                              }}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* I. Auditor├¡a */}\n            {activeSection === \"auditoria\" && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.12 }}\n              >\n                <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h2 className=\"font-serif text-2xl font-bold text-gray-900\">Auditor├¡a</h2>\n                      <p className=\"mt-1 text-sm text-gray-600\">Registro de actividad del sistema</p>\n                    </div>\n                    <Button variant=\"outline\">\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Exportar CSV\n                    </Button>\n                  </div>\n                  <Separator className=\"my-6\" />\n\n                  <div className=\"overflow-hidden rounded-xl border border-gray-200\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-gray-50\">\n                        <tr>\n                          <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase text-gray-600\">\n                            Fecha/Hora\n                          </th>\n                          <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase text-gray-600\">Usuario</th>\n                          <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase text-gray-600\">M├│dulo</th>\n                          <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase text-gray-600\">Acci├│n</th>\n                          <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase text-gray-600\">IP</th>\n                          <th className=\"px-4 py-3 text-left text-xs font-semibold uppercase text-gray-600\">Resumen</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-gray-200\">\n                        {mockAudit.map((log, idx) => (\n                          <tr key={log.id} className={idx % 2 === 0 ? \"bg-white\" : \"bg-[#FAFAFC]\"}>\n                            <td className=\"px-4 py-3 text-sm text-gray-600\">{log.at}</td>\n                            <td className=\"px-4 py-3 font-medium text-gray-900\">{log.user}</td>\n                            <td className=\"px-4 py-3\">\n                              <Badge variant=\"outline\" className=\"capitalize\">\n                                {log.module}\n                              </Badge>\n                            </td>\n                            <td className=\"px-4 py-3\">\n                              <Badge\n                                variant=\"outline\"\n                                className={\n                                  log.action === \"create\"\n                                    ? \"bg-green-100 text-green-700\"\n                                    : log.action === \"update\"\n                                      ? \"bg-blue-100 text-blue-700\"\n                                      : log.action === \"delete\"\n                                        ? \"bg-red-100 text-red-700\"\n                                        : \"\"\n                                }\n                              >\n                                {log.action}\n                              </Badge>\n                            </td>\n                            <td className=\"px-4 py-3 font-mono text-sm text-gray-600\">{log.ip}</td>\n                            <td className=\"px-4 py-3 text-sm text-gray-600\">{log.summary}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* J. Importar/Exportar */}\n            {activeSection === \"importar\" && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.12 }}\n                className=\"space-y-6\"\n              >\n                {/* Importar */}\n                <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n                  <h2 className=\"font-serif text-2xl font-bold text-gray-900\">Importar</h2>\n                  <p className=\"mt-1 text-sm text-gray-600\">Carga masiva de datos desde Excel</p>\n                  <Separator className=\"my-6\" />\n\n                  <div className=\"space-y-4\">\n                    <Button variant=\"outline\" className=\"w-full bg-transparent\">\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Descargar plantilla Excel\n                    </Button>\n\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full bg-transparent\"\n                      onClick={() => setShowDestinationDialog(true)}\n                    >\n                      <Upload className=\"mr-2 h-4 w-4\" />\n                      Seleccionar destino e importar archivo\n                    </Button>\n\n                    <Dialog open={showDestinationDialog} onOpenChange={setShowDestinationDialog}>\n                      <DialogContent className=\"max-w-md\">\n                        <DialogHeader>\n                          <DialogTitle className=\"font-serif text-2xl\">┬┐D├│nde desea cargar estos datos?</DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-3 py-4\">\n                          {[\"Ventas\", \"Pagos\", \"Clientes\", \"Facturaci├│n\", \"Gastos\", \"Geograf├¡a\"].map((module) => (\n                            <button\n                              key={module}\n                              onClick={() => {\n                                setImportDestination(module)\n                              }}\n                              className={`flex w-full items-center justify-between rounded-xl border-2 p-4 transition-all ${\n                                importDestination === module\n                                  ? \"border-[#C8A96A] bg-[#C8A96A]/5\"\n                                  : \"border-gray-200 hover:border-gray-300\"\n                              }`}\n                            >\n                              <span className=\"font-medium text-gray-900\">{module}</span>\n                              {importDestination === module && (\n                                <div className=\"flex h-6 w-6 items-center justify-center rounded-full bg-[#C8A96A] text-white\">\n                                  <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                    <path\n                                      strokeLinecap=\"round\"\n                                      strokeLinejoin=\"round\"\n                                      strokeWidth={2}\n                                      d=\"M5 13l4 4L19 7\"\n                                    />\n                                  </svg>\n                                </div>\n                              )}\n                            </button>\n                          ))}\n                        </div>\n                        <div className=\"flex justify-end gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => {\n                              setShowDestinationDialog(false)\n                              setImportDestination(\"\")\n                            }}\n                          >\n                            Cancelar\n                          </Button>\n                          <Button\n                            className=\"bg-[#C8A96A] hover:bg-[#B8996A]\"\n                            disabled={!importDestination}\n                            onClick={() => {\n                              setShowDestinationDialog(false)\n                              document.getElementById(\"excel-file-input\")?.click()\n                            }}\n                          >\n                            Continuar\n                          </Button>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n\n                    <input\n                      id=\"excel-file-input\"\n                      type=\"file\"\n                      accept=\".xlsx,.xls\"\n                      className=\"hidden\"\n                      onChange={(e) => {\n                        const file = e.target.files?.[0]\n                        if (file && importDestination) {\n                          setExcelFile(file)\n                          // Simular preview de datos\n                          setExcelPreview([\n                            {\n                              fecha: \"2025-10-15\",\n                              cliente: \"Mar├¡a Gonz├ílez\",\n                              producto: \"Anillo de oro\",\n                              cantidad: 1,\n                              precio: 1250000,\n                            },\n                            {\n                              fecha: \"2025-10-16\",\n                              cliente: \"Carlos Ram├¡rez\",\n                              producto: \"Collar de plata\",\n                              cantidad: 2,\n                              precio: 800000,\n                            },\n                          ])\n                        }\n                      }}\n                    />\n\n                    {excelPreview.length > 0 && importDestination && (\n                      <div className=\"rounded-xl border border-gray-200 p-4\">\n                        <div className=\"mb-4 flex items-center justify-between\">\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900\">Vista previa de datos</h3>\n                            <p className=\"text-sm text-gray-600\">\n                              Destino: <span className=\"font-semibold text-[#C8A96A]\">{importDestination}</span>\n                            </p>\n                          </div>\n                          <Badge className=\"bg-emerald-100 text-emerald-700\">\n                            {excelPreview.length} facturas detectadas\n                          </Badge>\n                        </div>\n                        <div className=\"overflow-x-auto\">\n                          <table className=\"w-full text-sm\">\n                            <thead className=\"bg-gray-50\">\n                              <tr>\n                                <th className=\"px-4 py-2 text-left text-xs font-semibold text-gray-700\">Fecha</th>\n                                <th className=\"px-4 py-2 text-left text-xs font-semibold text-gray-700\">Cliente</th>\n                                <th className=\"px-4 py-2 text-left text-xs font-semibold text-gray-700\">Producto</th>\n                                <th className=\"px-4 py-2 text-left text-xs font-semibold text-gray-700\">Cantidad</th>\n                                <th className=\"px-4 py-2 text-right text-xs font-semibold text-gray-700\">Precio</th>\n                              </tr>\n                            </thead>\n                            <tbody className=\"divide-y divide-gray-100\">\n                              {excelPreview.map((row, idx) => (\n                                <tr key={idx}>\n                                  <td className=\"px-4 py-2 text-gray-900\">{row.fecha}</td>\n                                  <td className=\"px-4 py-2 text-gray-900\">{row.cliente}</td>\n                                  <td className=\"px-4 py-2 text-gray-900\">{row.producto}</td>\n                                  <td className=\"px-4 py-2 text-gray-900\">{row.cantidad}</td>\n                                  <td className=\"px-4 py-2 text-right font-semibold text-gray-900\">\n                                    ${row.precio.toLocaleString()}\n                                  </td>\n                                </tr>\n                              ))}\n                            </tbody>\n                          </table>\n                        </div>\n                        <div className=\"mt-4 flex justify-end gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => {\n                              setExcelFile(null)\n                              setExcelPreview([])\n                              setImportDestination(\"\")\n                            }}\n                          >\n                            Cancelar\n                          </Button>\n                          <Button\n                            className=\"bg-[#C8A96A] hover:bg-[#B8996A]\"\n                            onClick={() => {\n                              alert(`Facturas importadas exitosamente a ${importDestination}`)\n                              setExcelFile(null)\n                              setExcelPreview([])\n                              setImportDestination(\"\")\n                            }}\n                          >\n                            Importar {excelPreview.length} facturas a {importDestination}\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Exportar */}\n                <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n                  <h2 className=\"font-serif text-2xl font-bold text-gray-900\">Exportar</h2>\n                  <p className=\"mt-1 text-sm text-gray-600\">Descarga datos por m├│dulo</p>\n                  <Separator className=\"my-6\" />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    {[\"Ventas\", \"Pagos\", \"Gastos\", \"Clientes\", \"Geograf├¡a\", \"Configuraci├│n\"].map((module) => (\n                      <Button key={module} variant=\"outline\" className=\"justify-start bg-transparent\">\n                        <Download className=\"mr-2 h-4 w-4\" />\n                        Exportar {module}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </motion.div>\n            )}\n\n            {/* K. Preferencias del sistema */}\n            {activeSection === \"preferencias\" && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.12 }}\n              >\n                <div className=\"rounded-3xl border border-gray-200 bg-white p-6 shadow-[0_20px_60px_rgba(0,0,0,.15)]\">\n                  <h2 className=\"font-serif text-2xl font-bold text-gray-900\">Preferencias del sistema</h2>\n                  <p className=\"mt-1 text-sm text-gray-600\">Personalizaci├│n de la interfaz</p>\n                  <Separator className=\"my-6\" />\n\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label>Tema</Label>\n                      <Select\n                        value={theme}\n                        onValueChange={(value: any) => {\n                          setTheme(value)\n                          setHasChanges(true)\n                        }}\n                      >\n                        <SelectTrigger className=\"mt-2\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"white\">White (por defecto)</SelectItem>\n                          <SelectItem value=\"black\">Black</SelectItem>\n                          <SelectItem value=\"auto\">Auto</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label>Densidad</Label>\n                      <Select\n                        value={systemPrefs.density}\n                        onValueChange={(value) => {\n                          setSystemPrefs({ ...systemPrefs, density: value })\n                          setHasChanges(true)\n                        }}\n                      >\n                        <SelectTrigger className=\"mt-2\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"comoda\">C├│moda</SelectItem>\n                          <SelectItem value=\"compacta\">Compacta</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <Separator />\n\n                    <div>\n                      <h3 className=\"mb-4 font-semibold text-gray-900\">Accesibilidad</h3>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between rounded-xl bg-gray-50 p-4\">\n                          <span className=\"font-medium text-gray-900\">Alto contraste</span>\n                          <Switch\n                            checked={systemPrefs.highContrast}\n                            onCheckedChange={(checked) => {\n                              setSystemPrefs({ ...systemPrefs, highContrast: checked })\n                              setHasChanges(true)\n                            }}\n                          />\n                        </div>\n                        <div className=\"flex items-center justify-between rounded-xl bg-gray-50 p-4\">\n                          <span className=\"font-medium text-gray-900\">Reducir animaciones</span>\n                          <Switch\n                            checked={systemPrefs.reduceAnimations}\n                            onCheckedChange={(checked) => {\n                              setSystemPrefs({ ...systemPrefs, reduceAnimations: checked })\n                              setHasChanges(true)\n                            }}\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    <div>\n                      <Label>Idioma</Label>\n                      <Select\n                        value={systemPrefs.language}\n                        onValueChange={(value) => {\n                          setSystemPrefs({ ...systemPrefs, language: value })\n                          setHasChanges(true)\n                        }}\n                      >\n                        <SelectTrigger className=\"mt-2\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"es\">Espa├▒ol</SelectItem>\n                          <SelectItem value=\"en\">Ingl├®s</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </div>\n        </main>\n      </div>\n\n      {/* Sticky Save Bar */}\n      {hasChanges && (\n        <motion.div\n          initial={{ y: 100 }}\n          animate={{ y: 0 }}\n          className=\"fixed bottom-0 left-0 right-0 border-t border-gray-200 bg-white p-4 shadow-[0_-10px_40px_rgba(0,0,0,.1)]\"\n        >\n          <div className=\"mx-auto flex max-w-5xl items-center justify-between\">\n            <p className=\"text-sm text-gray-600\">Tienes cambios sin guardar</p>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={() => setHasChanges(false)}>\n                Descartar\n              </Button>\n              <Button className=\"bg-[#C8A96A] hover:bg-[#B8996A]\" onClick={() => setHasChanges(false)}>\n                <Save className=\"mr-2 h-4 w-4\" />\n                Guardar cambios\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </div>\n  )\n}\n",
        "type": "registry:page",
        "target": "app/(dashboard)/configuracion/page.tsx"
      }
    ],
    "tailwind": {},
    "cssVars": {},
    "meta": {
      "importSpecifier": "",
      "moduleSpecifier": "",
      "nextVersion": "15.2.4"
    },
    "docs": "Please review v0-generated code before incorporating it into your project to ensure completeness and accuracy."
  }
]
