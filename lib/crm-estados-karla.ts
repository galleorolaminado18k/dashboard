// =====================================================
// Sistema de Estados CRM - Karla Garc√≠a (Galle Oro Laminado 18K)
// =====================================================
// Gesti√≥n autom√°tica de estados basada en el flujo de ventas

export type EstadoConversacion = 
  | 'por-contestar'        // 1. Cliente escribi√≥, esperando respuesta inicial
  | 'pendiente-datos'      // 2. Mostr√≥ inter√©s, faltan datos completos
  | 'por-confirmar'        // 3. Tiene todos los datos, esperando confirmaci√≥n
  | 'pendiente-guia'       // 4. Pedido confirmado, esperando gu√≠a de env√≠o
  | 'pedido-completo'      // 5. Gu√≠a enviada, pedido en tr√°nsito/completado

// Detectores de intenci√≥n basados en el prompt de Karla
export const DETECTORES_ESTADO = {
  
  // Palabras que indican confirmaci√≥n de pedido (lenguaje natural colombiano)
  CONFIRMACION: /\b(s[i√≠]|si|dale|perfecto|listo|confirm(o|a|ado)?|de una|h[√°a]gale|vamos|ok(ay)?|va|claro|exacto|correcto|as√≠ es|eso|sale|bien|bueno|‚úÖ|üëç|üëå|‚úîÔ∏è|seguimos|adelante|venga)\b/i,
  
  // Palabras que indican inter√©s en producto (m√°s variaciones)
  INTERES_PRODUCTO: /\b(quiero|me interesa|me gusta|cu√°nto|cu[√°a]nto|precio|cuesta|valor|cat√°logo|catalogo|ver|mostrar|baliner√≠a|baliner[√≠i]a|joyer√≠a|joyer[√≠i]a|aretes|arete|collar|pulsera|cadena|anillo|conjunto|disponible|hay|env√≠an|envian|despachan|mandan|entregan|llega|demora|cu[√°a]nto tarda)\b/i,
  
  // Detecta si tiene datos completos (nombre + ciudad + direcci√≥n + tel√©fono + documento + correo)
  DATOS_COMPLETOS: (mensaje: string) => {
    const tieneNombre = /nombre[:\s]*([a-z√°√©√≠√≥√∫√±\s]{3,})/i.test(mensaje)
    const tieneCiudad = /ciudad[:\s]*([a-z√°√©√≠√≥√∫√±\s]{3,})/i.test(mensaje)
    const tieneDireccion = /(direcci√≥n|direccion|calle|carrera|avenida|av|cr|cl)[:\s#]*\d/i.test(mensaje)
    const tieneTelefono = /\b3\d{9}\b/.test(mensaje.replace(/[\s\-()]/g, ''))
    const tieneDocumento = /(cc|c√©dula|cedula|documento)[:\s]*\d{7,}/i.test(mensaje)
    const tieneCorreo = /\b[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}\b/i.test(mensaje)
    
    return tieneNombre && tieneCiudad && tieneDireccion && tieneTelefono && tieneDocumento && tieneCorreo
  },
  
  // Detecta si proporcion√≥ el barrio (CR√çTICO seg√∫n el prompt - m√°s variaciones)
  TIENE_BARRIO: /\b(barrio|brio|b\/|sector|urbanizaci√≥n|urb\.|urbanizaci[√≥o]n|conjunto|residencial|torre|edificio|casa|calle|carrera|kr|cl|diagonal|transversal|vereda|etapa|manzana|apartamento|apto|piso|bloque|interior|local|ofic|corregimiento)\b/i,
  
  // Detecta m√©todo de pago elegido (m√°s variaciones)
  METODO_PAGO: /(transferencia|transferir|consignar|consignaci√≥n|consignacion|anticipado|adelantado|pago ya|contraentrega|contra entrega|pago contra|efectivo|nequi|daviplata|bancolombia)\b/i,
  
  // Detecta que quiere hablar con un asesor (m√°s variaciones)
  SOLICITA_ASESOR: /\b(asesor|asesora|persona|hablar con alguien|atenci√≥n|atenci[√≥o]n|quien atiende|alguien|ayuda|necesito ayuda|me pueden ayudar|representante|vendedor|vendedora)\b/i,
  
  // Detecta temas de garant√≠a/problemas (m√°s variaciones)
  SOLICITA_GARANTIA: /\b(garant√≠a|garant[√≠i]a|cambio|devoluci[√≥o]n|reclamo|queja|problema|pelado|da√±(o|ado)|roto|defecto|malo|mala calidad|no sirve|no funciona|no me gusta|no es lo que|esperaba otro)\b/i,
}

// Analizador de estado autom√°tico
export function analizarEstadoConversacion(mensajes: Array<{ sender: string; content: string }>): EstadoConversacion {
  
  if (mensajes.length === 0) {
    return 'por-contestar'
  }
  
  const ultimosMensajes = mensajes.slice(-10) // Analizar √∫ltimos 10 mensajes
  const mensajesCliente = ultimosMensajes.filter(m => m.sender === 'client')
  const mensajesAgente = ultimosMensajes.filter(m => m.sender === 'agent')
  
  // Si no hay respuesta del agente, est√° por contestar
  if (mensajesAgente.length === 0) {
    return 'por-contestar'
  }
  
  // Analizar √∫ltimo mensaje del cliente
  const ultimoMensajeCliente = mensajesCliente[mensajesCliente.length - 1]?.content || ''
  const todosLosMensajesCliente = mensajesCliente.map(m => m.content).join(' ')
  
  // 5. PEDIDO COMPLETO - Si el agente ya envi√≥ gu√≠a o confirm√≥ despacho
  const agenteEnvioGuia = mensajesAgente.some(m => 
    /\b(gu√≠a|numero de gu√≠a|c√≥digo de rastreo|despachado|en camino)\b/i.test(m.content)
  )
  if (agenteEnvioGuia) {
    return 'pedido-completo'
  }
  
  // 4. PENDIENTE GU√çA - Cliente confirm√≥ y dio todos los datos
  const clienteConfirmo = DETECTORES_ESTADO.CONFIRMACION.test(ultimoMensajeCliente)
  const tieneDatosCompletos = DETECTORES_ESTADO.DATOS_COMPLETOS(todosLosMensajesCliente)
  const tieneBarrio = DETECTORES_ESTADO.TIENE_BARRIO.test(todosLosMensajesCliente)
  const tieneMetodoPago = DETECTORES_ESTADO.METODO_PAGO.test(todosLosMensajesCliente)
  
  if (clienteConfirmo && tieneDatosCompletos && tieneBarrio && tieneMetodoPago) {
    return 'pendiente-guia'
  }
  
  // 3. POR CONFIRMAR - Tiene todos los datos, esperando confirmaci√≥n final
  if (tieneDatosCompletos && tieneBarrio && tieneMetodoPago) {
    return 'por-confirmar'
  }
  
  // 2. PENDIENTE DATOS - Mostr√≥ inter√©s pero faltan datos
  const muestroInteres = DETECTORES_ESTADO.INTERES_PRODUCTO.test(ultimoMensajeCliente)
  const agentePidioDatos = mensajesAgente.some(m => 
    /\b(nombre completo|ciudad|direcci√≥n|celular|documento|correo|m√©todo de pago)\b/i.test(m.content)
  )
  
  if (muestroInteres || agentePidioDatos) {
    return 'pendiente-datos'
  }
  
  // 1. POR CONTESTAR - Estado por defecto
  return 'por-contestar'
}

// Funci√≥n para actualizar estado autom√°ticamente
export function debeActualizarEstado(
  estadoActual: EstadoConversacion,
  mensajes: Array<{ sender: string; content: string }>
): { debeActualizar: boolean; nuevoEstado: EstadoConversacion } {
  
  const estadoDetectado = analizarEstadoConversacion(mensajes)
  
  // Mapeo de progresi√≥n l√≥gica de estados
  const PROGRESION_VALIDA: Record<EstadoConversacion, EstadoConversacion[]> = {
    'por-contestar': ['pendiente-datos', 'por-confirmar', 'pendiente-guia', 'pedido-completo'],
    'pendiente-datos': ['por-confirmar', 'pendiente-guia', 'pedido-completo'],
    'por-confirmar': ['pendiente-guia', 'pedido-completo'],
    'pendiente-guia': ['pedido-completo'],
    'pedido-completo': [], // Estado final
  }
  
  // Solo actualizar si es una progresi√≥n v√°lida
  const puedeProgresar = PROGRESION_VALIDA[estadoActual].includes(estadoDetectado)
  
  return {
    debeActualizar: puedeActualizar && estadoActual !== estadoDetectado,
    nuevoEstado: estadoDetectado
  }
}

// Extractor de datos del cliente (para autocompletado)
export function extraerDatosCliente(mensajes: Array<{ sender: string; content: string }>) {
  const todosLosMensajes = mensajes
    .filter(m => m.sender === 'client')
    .map(m => m.content)
    .join('\n')
  
  // Extraer nombre (m√°s patrones)
  const nombreMatch = todosLosMensajes.match(/(?:nombre[:\s]+|me llamo[:\s]+|soy[:\s]+|mi nombre es[:\s]+)([a-z√°√©√≠√≥√∫√±\s]{3,})/i)
  const nombre = nombreMatch ? nombreMatch[1].trim() : null
  
  // Extraer ciudad (m√°s ciudades colombianas)
  const ciudadMatch = todosLosMensajes.match(/(?:ciudad[:\s]+|de[:\s]+|en[:\s]+|desde[:\s]+|vivo en[:\s]+)(bogot√°|bogota|medell√≠n|medellin|cali|barranquilla|cartagena|bucaramanga|pereira|c√∫cuta|cucuta|manizales|ibagu√©|ibague|pasto|monter√≠a|monteria|valledupar|villavicencio|armenia|soacha|santa marta|bello|soledad|buenaventura|[a-z√°√©√≠√≥√∫√±\s]{3,})/i)
  const ciudad = ciudadMatch ? ciudadMatch[1].trim() : null
  
  // Extraer tel√©fono (m√°s formatos colombianos)
  const telefonoMatch = todosLosMensajes.replace(/[\s\-()]/g, '').match(/\b(3\d{9})\b/)
  const telefono = telefonoMatch ? telefonoMatch[1] : null
  
  // Extraer correo
  const correoMatch = todosLosMensajes.match(/\b([a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,})\b/i)
  const correo = correoMatch ? correoMatch[1] : null
  
  // Extraer direcci√≥n (m√°s formatos)
  const direccionMatch = todosLosMensajes.match(/(?:direcci√≥n|direccion|direcci[√≥o]n|dir|donde vivo|mi direcci[√≥o]n)[:\s]+([^\n]{10,})/i)
  const direccion = direccionMatch ? direccionMatch[1].trim() : null
  
  // Extraer documento (m√°s formatos)
  const documentoMatch = todosLosMensajes.match(/(?:cc|c√©dula|cedula|c[√©e]dula|documento|identificaci[√≥o]n)[:\s]+(\d{7,})/i)
  const documento = documentoMatch ? documentoMatch[1] : null
  
  // Extraer barrio (m√°s patrones)
  const barrioMatch = todosLosMensajes.match(/(?:barrio|brio|b\/|sector|conjunto|residencial|urbanizaci[√≥o]n|urb\.?)[:\s]+([a-z√°√©√≠√≥√∫√±0-9\s]{3,})/i)
  const barrio = barrioMatch ? barrioMatch[1].trim() : null
  
  // Detectar m√©todo de pago (m√°s variaciones)
  let metodoPago: 'anticipado' | 'contraentrega' | null = null
  if (/\b(transferencia|transferir|consignar|consignaci√≥n|anticipado|adelantado|pago ya|nequi|daviplata)\b/i.test(todosLosMensajes)) {
    metodoPago = 'anticipado'
  } else if (/\b(contraentrega|contra entrega|pago contra|efectivo al recibir)\b/i.test(todosLosMensajes)) {
    metodoPago = 'contraentrega'
  }
  
  return {
    nombre,
    ciudad,
    telefono,
    correo,
    direccion,
    documento,
    barrio,
    metodoPago,
    datosCompletos: !!(nombre && ciudad && telefono && correo && direccion && documento && barrio)
  }
}

// Sugerencias para el agente seg√∫n el estado
export function obtenerSugerenciasAgente(estado: EstadoConversacion): string[] {
  const sugerencias: Record<EstadoConversacion, string[]> = {
    'por-contestar': [
      '¬°Buenos [d√≠as/tardes/noches]! üëã Soy Karla Garc√≠a de Galle Oro Laminado 18K',
      '¬øTe gustar√≠a ver Baliner√≠a Premium üíé o Joyer√≠a Exclusiva üíç?',
      '¬øEs tu primera vez con nosotros? üòä'
    ],
    'pendiente-datos': [
      'Para alistar tu pedido, necesito: Nombre, Ciudad, Direcci√≥n + barrio, Celular, Documento, Correo y M√©todo de pago',
      '¬øCu√°l es tu direcci√≥n completa con barrio? üèòÔ∏è',
      '¬øPrefieres pago anticipado üí≥ o contraentrega üì¶?'
    ],
    'por-confirmar': [
      '¬øConfirmas para despacho HOY? ‚úÖ',
      'Resumen: [Producto] $[Total]. ¬øLo aseguramos ya? üí´',
      '¬øAprovechamos el descuento del pago anticipado? üéØ'
    ],
    'pendiente-guia': [
      '¬°Pedido confirmado! Estamos preparando tu env√≠o üì¶',
      'Te env√≠o la gu√≠a de env√≠o en los pr√≥ximos minutos ‚è∞',
      'Tu pedido saldr√° HOY mismo ‚ú®'
    ],
    'pedido-completo': [
      '¬°Tu pedido est√° en camino! üöö',
      'Gu√≠a de rastreo: [N√∫mero]',
      '¬øAlguna pregunta sobre tu pedido? üòä'
    ]
  }
  
  return sugerencias[estado]
}

// Estad√≠sticas de conversi√≥n por estado
export function calcularMetricasEstado(conversaciones: Array<{ status: EstadoConversacion }>) {
  const total = conversaciones.length
  const porEstado = conversaciones.reduce((acc, conv) => {
    acc[conv.status] = (acc[conv.status] || 0) + 1
    return acc
  }, {} as Record<EstadoConversacion, number>)
  
  const tasaConversion = total > 0 
    ? ((porEstado['pedido-completo'] || 0) / total * 100).toFixed(1)
    : '0.0'
  
  return {
    total,
    porEstado,
    tasaConversion: `${tasaConversion}%`,
    embudoConversion: {
      inicial: porEstado['por-contestar'] || 0,
      interesados: (porEstado['pendiente-datos'] || 0) + (porEstado['por-confirmar'] || 0),
      confirmados: porEstado['pendiente-guia'] || 0,
      completados: porEstado['pedido-completo'] || 0,
    }
  }
}
