// =====================================================
// Sistema de Estados CRM - Karla Garc√≠a (Galle Oro Laminado 18K)
// =====================================================
// L√≥gica REAL: Basada en flujo de Karla Garc√≠a con GATES cr√≠ticos

export type EstadoConversacion = 
  | 'por-contestar'        // 1. Cliente escribi√≥, esperando saludo y solicitud de datos
  | 'pendiente-datos'      // 2. Faltan datos obligatorios (GATE: barrio + celular 10)
  | 'por-confirmar'        // 3. Agente envi√≥ RESUMEN FINAL, esperando confirmaci√≥n
  | 'pendiente-guia'       // 4. Cliente confirm√≥ (+ pago validado si anticipado), esperando gu√≠a
  | 'pedido-completo'      // 5. Gu√≠a registrada y enviada al cliente

// =====================================================
// DETECTORES DE INTENCI√ìN (170+ variaciones)
// =====================================================

export const DETECTORES_ESTADO = {
  
  // Palabras de confirmaci√≥n (27 variaciones)
  CONFIRMACION: /\b(s[i√≠]|si|dale|perfecto|listo|confirm(o|a|ado)?|de una|h[√°a]gale|hagale|vamos|ok(ay)?|va|claro|exacto|correcto|as√≠ es|eso|sale|bien|bueno|‚úÖ|üëç|üëå|‚úîÔ∏è|seguimos|adelante|venga)\b/i,
  
  // Inter√©s en productos (38 variaciones + garant√≠a)
  INTERES_PRODUCTO: /\b(quiero|kiero|me interesa|me gusta|cu√°nto|cu[√°a]nto|quanto|precio|cuesta|valor|cat√°logo|catalogo|ver|mostrar|baliner√≠a|baliner[√≠i]a|joyer√≠a|joyer[√≠i]a|aretes|arete|collar|qollar|pulsera|cadena|anillo|conjunto|disponible|hay|env√≠an|envian|despachan|mandan|entregan|llega|demora|cu[√°a]nto tarda|garant√≠a|garant[√≠i]a)\b/i,
  
  // DATOS COMPLETOS OBLIGATORIOS seg√∫n Karla Garc√≠a
  // REQUISITOS CR√çTICOS: nombre + ciudad + direcci√≥n + BARRIO + celular 10 + CC + correo + m√©todo pago
  DATOS_COMPLETOS: (mensaje: string) => {
    
    // 1. Nombre: 2+ palabras capitalizadas o con etiqueta
    const tieneNombre = /\b[A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+\s+[A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+/i.test(mensaje) || 
                        /(nombre|me llamo|soy)[:\s]+([a-z√°√©√≠√≥√∫√±\s]{3,})/i.test(mensaje)
    
    // 2. Ciudad colombiana (con errores ortogr√°ficos)
    const tieneCiudad = /(bogot[a√°]|medell[i√≠]n|kali|cali|barranquilla|cartagena|bucaramanga|pereira|c[u√∫]cuta|manizales|ibagu[√©e]|pasto|monter[i√≠]a|valledupar|villavicencio|armenia|neiva|popay[a√°]n|tunja|sincelejo|riohacha)/i.test(mensaje)
    
    // 3. Direcci√≥n con n√∫mero
    const tieneDireccion = /(direcci[√≥o]n|direc|dir|kalle|calle|carrera|avenida|diagonal|transversal|av|cr|cl|kr)[:\s#\d]/i.test(mensaje) ||
                           /\b(kalle|calle|carrera|cr|cl|kr)\s*\d+/i.test(mensaje)
    
    // 4. ‚ö†Ô∏è BARRIO (GATE CR√çTICO - SIN ESTO NO AVANZA A POR-CONFIRMAR)
    const tieneBarrio = /\b(barrio|bario|vario|brio|b\/|sector|urbanizaci√≥n|urb\.|urbanizaci[√≥o]n|conjunto|residencial|torre|manzana|mz|etapa|vereda|corregimiento)\b/i.test(mensaje)
    
    // 5. ‚ö†Ô∏è CELULAR 10 D√çGITOS (GATE CR√çTICO - debe empezar con 3)
    const telefonoLimpio = mensaje.replace(/[\s\-()]/g, '')
    const tieneCelular10 = /\b3\d{9}\b/.test(telefonoLimpio)
    
    // 6. Documento 7-10 d√≠gitos
    const tieneDocumento = /(cc|c[e√©]dula|cedula|documento)[:\s]*\d{7,}/i.test(mensaje) ||
                           /\b\d{7,10}\b/.test(mensaje)
    
    // 7. Correo electr√≥nico
    const tieneCorreo = /\b[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}\b/i.test(mensaje)
    
    // 8. M√©todo de pago (anticipado o contraentrega)
    const tieneMetodoPago = /(transferencia|transferir|transferensia|consignar|anticipado|adelantado|pago ya|contraentrega|contra entrega|pago contra|nequi|nequ[√≠i]|daviplata|bancolombia|efectivo)\b/i.test(mensaje)
    
    // ‚úÖ TODOS obligatorios, especialmente BARRIO y CELULAR 10
    return tieneNombre && tieneCiudad && tieneDireccion && tieneBarrio && 
           tieneCelular10 && tieneDocumento && tieneCorreo && tieneMetodoPago
  },
  
  // Detecta barrio espec√≠ficamente (para validaci√≥n por separado)
  TIENE_BARRIO: /\b(barrio|bario|vario|brio|b\/|sector|urbanizaci√≥n|urb\.|urbanizaci[√≥o]n|conjunto|residencial|torre|manzana|mz|etapa|vereda|corregimiento)\b/i,
  
  // Detecta celular 10 d√≠gitos espec√≠ficamente
  TIENE_CELULAR_10: (mensaje: string) => {
    const limpio = mensaje.replace(/[\s\-()]/g, '')
    return /\b3\d{9}\b/.test(limpio)
  },
  
  // M√©todo de pago
  METODO_PAGO: /(transferencia|transferir|transferensia|consignar|anticipado|adelantado|pago ya|contraentrega|contra entrega|pago contra|nequi|nequ[√≠i]|daviplata|bancolombia|efectivo)\b/i,
  
  // Detecta si es pago anticipado espec√≠ficamente
  ES_PAGO_ANTICIPADO: /\b(transferencia|transferir|transferensia|consignar|anticipado|adelantado|pago ya|nequi|nequ[√≠i]|daviplata|bancolombia)\b/i,
  
  // Detecta comprobante de pago (foto, captura, pantallazo)
  ENVIO_COMPROBANTE: /\b(comprobante|pago|transacci[√≥o]n|transferencia|foto|captura|pantallazo|screenshot|recibo|voucher|soporte)\b/i,
  
  // Detecta "confirmo despacho" para contraentrega
  CONFIRMA_DESPACHO: /\b(confirmo|confirmar|de acuerdo|acepto|apruebo|autorizo|despach(o|en|ar))\b/i,
  
  // Detecta que agente envi√≥ RESUMEN FINAL (trigger para pasar a por-confirmar)
  AGENTE_ENVIO_RESUMEN: /\b(resumen|total|valor final|producto|env[i√≠]o|descuento|confirmas?|aseguramos|lo dejamos as[√≠i]|resumiendo)\b/i,
  
  // Detecta que agente registr√≥ gu√≠a
  AGENTE_REGISTRO_GUIA: /\b(gu[i√≠]a|numero de gu[i√≠]a|n[u√∫]mero de gu[i√≠]a|c[√≥o]digo|rastreo|despachado|en camino|fue despachado|transportadora|mipaquete)\b/i,
  
  // Solicita asesor
  SOLICITA_ASESOR: /\b(asesor|asesora|persona|hablar con alguien|atenci√≥n|atenci[√≥o]n|quien atiende|alguien|ayuda|necesito ayuda|me pueden ayudar|representante|vendedor|vendedora)\b/i,
  
  // Garant√≠a/problemas
  SOLICITA_GARANTIA: /\b(garant√≠a|garant[√≠i]a|cambio|devoluci[√≥o]n|reclamo|queja|problema|pelado|da√±(o|ado)|roto|defecto|malo|mala calidad|no sirve|no funciona|no me gusta|no es lo que|esperaba otro)\b/i,
}

// =====================================================
// ANALIZADOR DE ESTADO AUTOM√ÅTICO
// =====================================================

export function analizarEstadoConversacion(mensajes: Array<{ sender: string; content: string }>): EstadoConversacion {
  
  if (mensajes.length === 0) {
    return 'por-contestar'
  }
  
  const ultimosMensajes = mensajes.slice(-10)
  const mensajesCliente = ultimosMensajes.filter(m => m.sender === 'client')
  const mensajesAgente = ultimosMensajes.filter(m => m.sender === 'agent')
  
  // Si no hay respuesta del agente, est√° por contestar
  if (mensajesAgente.length === 0) {
    return 'por-contestar'
  }
  
  const ultimoMensajeCliente = mensajesCliente[mensajesCliente.length - 1]?.content || ''
  const ultimoMensajeAgente = mensajesAgente[mensajesAgente.length - 1]?.content || ''
  const todosLosMensajesCliente = mensajesCliente.map(m => m.content).join(' ')
  const todosLosMensajesAgente = mensajesAgente.map(m => m.content).join(' ')
  
  // =====================================================
  // 5. PEDIDO COMPLETO
  // =====================================================
  // Agente registr√≥ y envi√≥ n√∫mero de gu√≠a
  if (DETECTORES_ESTADO.AGENTE_REGISTRO_GUIA.test(todosLosMensajesAgente)) {
    return 'pedido-completo'
  }
  
  // =====================================================
  // 4. PENDIENTE GU√çA
  // =====================================================
  // Cliente confirm√≥ Y (si es anticipado: valid√≥ pago | si es contraentrega: confirm√≥ despacho)
  const clienteConfirmo = DETECTORES_ESTADO.CONFIRMACION.test(ultimoMensajeCliente)
  const tieneDatosCompletos = DETECTORES_ESTADO.DATOS_COMPLETOS(todosLosMensajesCliente)
  const esAnticipado = DETECTORES_ESTADO.ES_PAGO_ANTICIPADO.test(todosLosMensajesCliente)
  
  if (clienteConfirmo && tieneDatosCompletos) {
    // Si es anticipado, necesita comprobante
    if (esAnticipado) {
      const envioComprobante = DETECTORES_ESTADO.ENVIO_COMPROBANTE.test(todosLosMensajesCliente) ||
                               DETECTORES_ESTADO.ENVIO_COMPROBANTE.test(todosLosMensajesAgente) // agente puede confirmar que vio el pago
      if (envioComprobante) {
        return 'pendiente-guia'
      }
    } else {
      // Si es contraentrega, solo necesita confirmar despacho
      if (DETECTORES_ESTADO.CONFIRMA_DESPACHO.test(ultimoMensajeCliente)) {
        return 'pendiente-guia'
      }
    }
  }
  
  // =====================================================
  // 3. POR CONFIRMAR
  // =====================================================
  // Agente envi√≥ RESUMEN FINAL y esperamos confirmaci√≥n del cliente
  const agenteEnvioResumen = DETECTORES_ESTADO.AGENTE_ENVIO_RESUMEN.test(todosLosMensajesAgente)
  
  // Si tiene TODOS los datos Y agente envi√≥ resumen ‚Üí POR CONFIRMAR
  if (tieneDatosCompletos && agenteEnvioResumen) {
    return 'por-confirmar'
  }
  
  // Si tiene todos los datos pero agente NO envi√≥ resumen, queda en PENDIENTE DATOS
  // (agente debe calcular env√≠o y enviar resumen primero)
  if (tieneDatosCompletos && !agenteEnvioResumen) {
    return 'pendiente-datos' // ‚ö†Ô∏è Agente debe enviar RESUMEN primero
  }
  
  // =====================================================
  // 2. PENDIENTE DATOS
  // =====================================================
  // Cliente mostr√≥ inter√©s O agente pidi√≥ datos O cliente dio alg√∫n dato
  const muestroInteres = DETECTORES_ESTADO.INTERES_PRODUCTO.test(todosLosMensajesCliente)
  const agentePidioDatos = /\b(nombre|ciudad|direcci√≥n|direccion|celular|tel√©fono|telefono|documento|correo|m√©todo de pago|datos|barrio)\b/i.test(todosLosMensajesAgente)
  
  // Detectar si dio ALG√öN dato parcial
  const dioAlgunDato = DETECTORES_ESTADO.TIENE_CELULAR_10(todosLosMensajesCliente) ||
                       /\b[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}\b/i.test(todosLosMensajesCliente) ||
                       /\b\d{7,10}\b/.test(todosLosMensajesCliente) ||
                       /(kalle|calle|carrera|cr|cl|kr)\s*\d/i.test(todosLosMensajesCliente) ||
                       /(bogot[a√°]|medell[i√≠]n|kali|cali)/i.test(todosLosMensajesCliente) ||
                       DETECTORES_ESTADO.TIENE_BARRIO.test(todosLosMensajesCliente) ||
                       DETECTORES_ESTADO.METODO_PAGO.test(todosLosMensajesCliente) ||
                       DETECTORES_ESTADO.SOLICITA_GARANTIA.test(todosLosMensajesCliente)
  
  if (muestroInteres || agentePidioDatos || dioAlgunDato) {
    return 'pendiente-datos'
  }
  
  // =====================================================
  // 1. POR CONTESTAR (Estado inicial)
  // =====================================================
  return 'por-contestar'
}

// =====================================================
// VALIDACI√ìN DE PROGRESI√ìN
// =====================================================

export function debeActualizarEstado(
  estadoActual: EstadoConversacion,
  mensajes: Array<{ sender: string; content: string }>
): { debeActualizar: boolean; nuevoEstado: EstadoConversacion; razon?: string } {
  
  const estadoDetectado = analizarEstadoConversacion(mensajes)
  
  // Mapeo de progresi√≥n v√°lida seg√∫n Karla Garc√≠a
  const PROGRESION_VALIDA: Record<EstadoConversacion, EstadoConversacion[]> = {
    'por-contestar': ['pendiente-datos'],
    'pendiente-datos': ['por-confirmar'], // Solo si agente envi√≥ RESUMEN
    'por-confirmar': ['pendiente-guia'],  // Solo si confirm√≥ + valid√≥ pago
    'pendiente-guia': ['pedido-completo'], // Solo si agente registr√≥ gu√≠a
    'pedido-completo': [], // Estado final
  }
  
  const puedeProgresar = PROGRESION_VALIDA[estadoActual].includes(estadoDetectado)
  
  // Validaciones de GATES
  let razon: string | undefined
  
  if (estadoDetectado === 'por-confirmar' && estadoActual === 'pendiente-datos') {
    const todosLosMensajes = mensajes.filter(m => m.sender === 'client').map(m => m.content).join(' ')
    
    // GATE 1: Verificar barrio
    if (!DETECTORES_ESTADO.TIENE_BARRIO.test(todosLosMensajes)) {
      razon = '‚ö†Ô∏è GATE BLOQUEADO: Falta BARRIO. No puede avanzar a Por Confirmar.'
      return { debeActualizar: false, nuevoEstado: 'pendiente-datos', razon }
    }
    
    // GATE 2: Verificar celular 10 d√≠gitos
    if (!DETECTORES_ESTADO.TIENE_CELULAR_10(todosLosMensajes)) {
      razon = '‚ö†Ô∏è GATE BLOQUEADO: Falta CELULAR 10 d√≠gitos. No puede avanzar a Por Confirmar.'
      return { debeActualizar: false, nuevoEstado: 'pendiente-datos', razon }
    }
  }
  
  return {
    debeActualizar: puedeProgresar && estadoActual !== estadoDetectado,
    nuevoEstado: estadoDetectado,
    razon: razon
  }
}

// =====================================================
// EXTRACTOR DE DATOS
// =====================================================

export function extraerDatosCliente(mensajes: Array<{ sender: string; content: string }>) {
  const todosLosMensajes = mensajes
    .filter(m => m.sender === 'client')
    .map(m => m.content)
    .join('\n')
  
  // Nombre
  const nombreMatch = todosLosMensajes.match(/(?:nombre[:\s]+|me llamo[:\s]+|soy[:\s]+|mi nombre es[:\s]+)([a-z√°√©√≠√≥√∫√±\s]{3,})/i) ||
                      todosLosMensajes.match(/\b([A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+\s+[A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+(?:\s+[A-Z√Å√â√ç√ì√ö√ë][a-z√°√©√≠√≥√∫√±]+)?)\b/)
  const nombre = nombreMatch ? nombreMatch[1].trim().split(/\s+(ciudad|de|en|vivo|tel|celular|cc|cedula|correo|email|@|3\d{2})/i)[0].trim() : null
  
  // Ciudad
  const ciudadMatch = todosLosMensajes.match(/(?:ciudad[:\s]+|de[:\s]+|en[:\s]+|desde[:\s]+|vivo en[:\s]+)?(bogot[a√°]|medell[i√≠]n|kali|cali|barranquilla|cartagena|bucaramanga|pereira|c[u√∫]cuta|manizales|ibagu[√©e]|pasto|monter[i√≠]a|valledupar|villavicencio|armenia|soacha|santa marta|bello|soledad|buenaventura|neiva|popay[a√°]n|tunja|sincelejo|riohacha)/i)
  const ciudad = ciudadMatch ? ciudadMatch[ciudadMatch.length - 1].trim() : null
  
  // Tel√©fono 10 d√≠gitos
  const telefonoMatch = todosLosMensajes.replace(/[\s\-()]/g, '').match(/\b(3\d{9})\b/)
  const telefono = telefonoMatch ? telefonoMatch[1] : null
  
  // Correo
  const correoMatch = todosLosMensajes.match(/\b([a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,})\b/i)
  const correo = correoMatch ? correoMatch[1] : null
  
  // Direcci√≥n
  const direccionMatch = todosLosMensajes.match(/(?:direcci√≥n|direccion|direcci[√≥o]n|direc|dir|donde vivo|mi direcci[√≥o]n|kalle|calle|carrera|cr|kr|cl|diagonal|transversal|mz|manzana)[:\s#]+([^\n]{8,})/i)
  const direccion = direccionMatch ? direccionMatch[1].trim().split(/\s+(tel|celular|cc|cedula|correo|email|doc|transferencia|nequi)/i)[0].trim() : null
  
  // Documento
  const documentoMatch = todosLosMensajes.match(/(?:cc|c√©dula|cedula|c[√©e]dula|documento|identificaci[√≥o]n|doc)[:\s]*(\d{7,})/i) ||
                         todosLosMensajes.match(/\b(\d{7,10})\b/)
  const documento = documentoMatch ? documentoMatch[1] : null
  
  // Barrio
  const barrioMatch = todosLosMensajes.match(/(?:barrio|bario|vario|brio|b\/|sector|conjunto|residencial|urbanizaci[√≥o]n|urb\.?|torre|mz|manzana)[:\s]+([a-z√°√©√≠√≥√∫√±0-9\s]{3,})/i)
  const barrio = barrioMatch ? barrioMatch[1].trim().split(/\s+(tel|celular|cc|cedula|correo|3\d{2}|ciudad)/i)[0].trim() : null
  
  // M√©todo de pago
  let metodoPago: 'anticipado' | 'contraentrega' | null = null
  if (/\b(transferencia|transferensia|transferir|consignar|consignaci√≥n|anticipado|adelantado|pago ya|nequi|nequ[√≠i]|daviplata)\b/i.test(todosLosMensajes)) {
    metodoPago = 'anticipado'
  } else if (/\b(contraentrega|contra entrega|pago contra|efectivo al recibir)\b/i.test(todosLosMensajes)) {
    metodoPago = 'contraentrega'
  }
  
  // Validar celular 10 d√≠gitos
  const celular10Valido = telefono ? telefono.length === 10 && telefono.startsWith('3') : false
  
  return {
    nombre,
    ciudad,
    telefono,
    celular10Valido, // ‚ö†Ô∏è GATE cr√≠tico
    correo,
    direccion,
    documento,
    barrio, // ‚ö†Ô∏è GATE cr√≠tico
    metodoPago,
    datosCompletos: !!(nombre && ciudad && telefono && celular10Valido && correo && direccion && documento && barrio && metodoPago)
  }
}

// =====================================================
// SUGERENCIAS PARA EL AGENTE
// =====================================================

export function obtenerSugerenciasAgente(estado: EstadoConversacion, datosCliente?: ReturnType<typeof extraerDatosCliente>): string[] {
  const sugerencias: Record<EstadoConversacion, string[]> = {
    'por-contestar': [
      '¬°Buenos [d√≠as/tardes/noches]! üëã Soy Karla Garc√≠a de Galle Oro Laminado 18K',
      '¬øTe gustar√≠a ver Baliner√≠a Premium üíé o Joyer√≠a Exclusiva üíç?',
      '¬øEs tu primera vez con nosotros? üòä'
    ],
    'pendiente-datos': [
      'üìù Para alistar tu pedido necesito:',
      '‚Ä¢ Nombre completo',
      '‚Ä¢ Ciudad',
      '‚Ä¢ Direcci√≥n + ‚ö†Ô∏è BARRIO (obligatorio)',
      '‚Ä¢ Celular (‚ö†Ô∏è 10 d√≠gitos)',
      '‚Ä¢ C√©dula',
      '‚Ä¢ Correo',
      '‚Ä¢ M√©todo de pago: Anticipado üí≥ o Contraentrega üì¶',
      datosCliente?.barrio ? '' : '‚ö†Ô∏è Falta BARRIO - GATE cr√≠tico',
      datosCliente?.telefono && !datosCliente?.celular10Valido ? '‚ö†Ô∏è Celular debe tener 10 d√≠gitos - GATE cr√≠tico' : ''
    ].filter(Boolean),
    'por-confirmar': [
      'üì¶ RESUMEN FINAL:',
      '‚Ä¢ Producto: [Nombre]',
      '‚Ä¢ Valor: $[Total]',
      '‚Ä¢ Env√≠o: $[Costo]',
      '‚Ä¢ Total: $[Final]',
      '¬øConfirmas para despacho HOY? ‚úÖ',
      '¬øLo aseguramos ya? üí´'
    ],
    'pendiente-guia': [
      datosCliente?.metodoPago === 'anticipado' 
        ? 'üì∏ Por favor env√≠a el comprobante de pago'
        : '‚úÖ ¬°Pedido confirmado!',
      'üì¶ Estamos preparando tu env√≠o',
      '‚è∞ Te env√≠o la gu√≠a en los pr√≥ximos minutos'
    ],
    'pedido-completo': [
      '‚úÖ ¬°Tu pedido est√° en camino! üöö',
      'üìã Gu√≠a de rastreo: [N√∫mero]',
      'üì± Puedes rastrear tu pedido en [Link]',
      '¬øAlguna pregunta sobre tu pedido? üòä'
    ]
  }
  
  return sugerencias[estado]
}

// =====================================================
// M√âTRICAS Y ESTAD√çSTICAS
// =====================================================

export function calcularMetricasEstado(conversaciones: Array<{ status: EstadoConversacion }>) {
  const total = conversaciones.length
  const porEstado = conversaciones.reduce((acc, conv) => {
    acc[conv.status] = (acc[conv.status] || 0) + 1
    return acc
  }, {} as Record<EstadoConversacion, number>)
  
  const tasaConversion = total > 0 
    ? ((porEstado['pedido-completo'] || 0) / total * 100).toFixed(1)
    : '0.0'
  
  const tasaBloqueadosEnDatos = total > 0
    ? ((porEstado['pendiente-datos'] || 0) / total * 100).toFixed(1)
    : '0.0'
  
  return {
    total,
    porEstado,
    tasaConversion: `${tasaConversion}%`,
    tasaBloqueadosEnDatos: `${tasaBloqueadosEnDatos}%`,
    embudoConversion: {
      inicial: porEstado['por-contestar'] || 0,
      recolectandoDatos: porEstado['pendiente-datos'] || 0,
      esperandoConfirmacion: porEstado['por-confirmar'] || 0,
      confirmados: porEstado['pendiente-guia'] || 0,
      completados: porEstado['pedido-completo'] || 0,
    }
  }
}
